var zt=Object.create;var _=Object.defineProperty;var qt=Object.getOwnPropertyDescriptor;var Vt=Object.getOwnPropertyNames;var Jt=Object.getPrototypeOf,Wt=Object.prototype.hasOwnProperty;var Qt=(i,n)=>()=>(n||i((n={exports:{}}).exports,n),n.exports),Gt=(i,n)=>{for(var e in n)_(i,e,{get:n[e],enumerable:!0})},ut=(i,n,e,t)=>{if(n&&typeof n=="object"||typeof n=="function")for(let s of Vt(n))!Wt.call(i,s)&&s!==e&&_(i,s,{get:()=>n[s],enumerable:!(t=qt(n,s))||t.enumerable});return i};var Kt=(i,n,e)=>(e=i!=null?zt(Jt(i)):{},ut(n||!i||!i.__esModule?_(e,"default",{value:i,enumerable:!0}):e,i)),Zt=i=>ut(_({},"__esModule",{value:!0}),i);var a=(i,n,e)=>new Promise((t,s)=>{var o=c=>{try{u(e.next(c))}catch(g){s(g)}},r=c=>{try{u(e.throw(c))}catch(g){s(g)}},u=c=>c.done?t(c.value):Promise.resolve(c.value).then(o,r);u((e=e.apply(i,n)).next())});var _t=Qt(l=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0});var f=require("obsidian"),it="YYYY-MM-DD",st="gggg-[W]ww",Et="YYYY-MM",It="YYYY-[Q]Q",Ft="YYYY";function L(i){var e,t;let n=window.app.plugins.getPlugin("periodic-notes");return n&&((t=(e=n.settings)==null?void 0:e[i])==null?void 0:t.enabled)}function B(){var i,n,e,t;try{let{internalPlugins:s,plugins:o}=window.app;if(L("daily")){let{format:g,folder:d,template:p}=((n=(i=o.getPlugin("periodic-notes"))==null?void 0:i.settings)==null?void 0:n.daily)||{};return{format:g||it,folder:(d==null?void 0:d.trim())||"",template:(p==null?void 0:p.trim())||""}}let{folder:r,format:u,template:c}=((t=(e=s.getPluginById("daily-notes"))==null?void 0:e.instance)==null?void 0:t.options)||{};return{format:u||it,folder:(r==null?void 0:r.trim())||"",template:(c==null?void 0:c.trim())||""}}catch(s){console.info("No custom daily note settings found!",s)}}function R(){var i,n,e,t,s,o,r;try{let u=window.app.plugins,c=(i=u.getPlugin("calendar"))==null?void 0:i.options,g=(e=(n=u.getPlugin("periodic-notes"))==null?void 0:n.settings)==null?void 0:e.weekly;if(L("weekly"))return{format:g.format||st,folder:((t=g.folder)==null?void 0:t.trim())||"",template:((s=g.template)==null?void 0:s.trim())||""};let d=c||{};return{format:d.weeklyNoteFormat||st,folder:((o=d.weeklyNoteFolder)==null?void 0:o.trim())||"",template:((r=d.weeklyNoteTemplate)==null?void 0:r.trim())||""}}catch(u){console.info("No custom weekly note settings found!",u)}}function k(){var n,e,t,s;let i=window.app.plugins;try{let o=L("monthly")&&((e=(n=i.getPlugin("periodic-notes"))==null?void 0:n.settings)==null?void 0:e.monthly)||{};return{format:o.format||Et,folder:((t=o.folder)==null?void 0:t.trim())||"",template:((s=o.template)==null?void 0:s.trim())||""}}catch(o){console.info("No custom monthly note settings found!",o)}}function M(){var n,e,t,s;let i=window.app.plugins;try{let o=L("quarterly")&&((e=(n=i.getPlugin("periodic-notes"))==null?void 0:n.settings)==null?void 0:e.quarterly)||{};return{format:o.format||It,folder:((t=o.folder)==null?void 0:t.trim())||"",template:((s=o.template)==null?void 0:s.trim())||""}}catch(o){console.info("No custom quarterly note settings found!",o)}}function O(){var n,e,t,s;let i=window.app.plugins;try{let o=L("yearly")&&((e=(n=i.getPlugin("periodic-notes"))==null?void 0:n.settings)==null?void 0:e.yearly)||{};return{format:o.format||Ft,folder:((t=o.folder)==null?void 0:t.trim())||"",template:((s=o.template)==null?void 0:s.trim())||""}}catch(o){console.info("No custom yearly note settings found!",o)}}function Dt(...i){let n=[];for(let t=0,s=i.length;t<s;t++)n=n.concat(i[t].split("/"));let e=[];for(let t=0,s=n.length;t<s;t++){let o=n[t];!o||o==="."||e.push(o)}return n[0]===""&&e.unshift(""),e.join("/")}function ne(i){let n=i.substring(i.lastIndexOf("/")+1);return n.lastIndexOf(".")!=-1&&(n=n.substring(0,n.lastIndexOf("."))),n}function ie(i){return a(this,null,function*(){let n=i.replace(/\\/g,"/").split("/");if(n.pop(),n.length){let e=Dt(...n);window.app.vault.getAbstractFileByPath(e)||(yield window.app.vault.createFolder(e))}})}function x(i,n){return a(this,null,function*(){n.endsWith(".md")||(n+=".md");let e=f.normalizePath(Dt(i,n));return yield ie(e),e})}function E(i){return a(this,null,function*(){let{metadataCache:n,vault:e}=window.app,t=f.normalizePath(i);if(t==="/")return Promise.resolve(["",null]);try{let s=n.getFirstLinkpathDest(t,""),o=yield e.cachedRead(s),r=window.app.foldManager.load(s);return[o,r]}catch(s){return console.error(`Failed to read the daily note template '${t}'`,s),new f.Notice("Failed to read the daily note template"),["",null]}})}function C(i,n="day"){let e=i.clone().startOf(n).format();return`${n}-${e}`}function Lt(i){return i.replace(/\[[^\]]*\]/g,"")}function se(i,n){if(n==="week"){let e=Lt(i);return/w{1,2}/i.test(e)&&(/M{1,4}/.test(e)||/D{1,4}/.test(e))}return!1}function I(i,n){return Bt(i.basename,n)}function ae(i,n){return Bt(ne(i),n)}function Bt(i,n){let t={day:B,week:R,month:k,quarter:M,year:O}[n]().format.split("/").pop(),s=window.moment(i,t,!0);if(!s.isValid())return null;if(se(t,n)&&n==="week"){let o=Lt(t);if(/w{1,2}/i.test(o))return window.moment(i,t.replace(/M{1,4}/g,"").replace(/D{1,4}/g,""),!1)}return s}var at=class extends Error{};function Rt(i){return a(this,null,function*(){let n=window.app,{vault:e}=n,t=window.moment,{template:s,format:o,folder:r}=B(),[u,c]=yield E(s),g=i.format(o),d=yield x(r,g);try{let p=yield e.create(d,u.replace(/{{\s*date\s*}}/gi,g).replace(/{{\s*time\s*}}/gi,t().format("HH:mm")).replace(/{{\s*title\s*}}/gi,g).replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,(P,w,y,N,b,h)=>{let X=t(),tt=i.clone().set({hour:X.get("hour"),minute:X.get("minute"),second:X.get("second")});return y&&tt.add(parseInt(N,10),b),h?tt.format(h.substring(1).trim()):tt.format(o)}).replace(/{{\s*yesterday\s*}}/gi,i.clone().subtract(1,"day").format(o)).replace(/{{\s*tomorrow\s*}}/gi,i.clone().add(1,"d").format(o)));return n.foldManager.save(p,c),p}catch(p){console.error(`Failed to create file: '${d}'`,p),new f.Notice("Unable to create new file.")}})}function oe(i,n){var e;return(e=n[C(i,"day")])!=null?e:null}function re(){let{vault:i}=window.app,{folder:n}=B(),e=i.getAbstractFileByPath(f.normalizePath(n));if(!e)throw new at("Failed to find daily notes folder");let t={};return f.Vault.recurseChildren(e,s=>{if(s instanceof f.TFile){let o=I(s,"day");if(o){let r=C(o,"day");t[r]=s}}}),t}var ot=class extends Error{};function le(){let{moment:i}=window,n=i.localeData()._week.dow,e=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"];for(;n;)e.push(e.shift()),n--;return e}function ge(i){return le().indexOf(i.toLowerCase())}function kt(i){return a(this,null,function*(){let{vault:n}=window.app,{template:e,format:t,folder:s}=R(),[o,r]=yield E(e),u=i.format(t),c=yield x(s,u);try{let g=yield n.create(c,o.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,(d,p,P,w,y,N)=>{let b=window.moment(),h=i.clone().set({hour:b.get("hour"),minute:b.get("minute"),second:b.get("second")});return P&&h.add(parseInt(w,10),y),N?h.format(N.substring(1).trim()):h.format(t)}).replace(/{{\s*title\s*}}/gi,u).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*(sunday|monday|tuesday|wednesday|thursday|friday|saturday)\s*:(.*?)}}/gi,(d,p,P)=>{let w=ge(p);return i.weekday(w).format(P.trim())}));return window.app.foldManager.save(g,r),g}catch(g){console.error(`Failed to create file: '${c}'`,g),new f.Notice("Unable to create new file.")}})}function ue(i,n){var e;return(e=n[C(i,"week")])!=null?e:null}function ce(){let i={};if(!Ot())return i;let{vault:n}=window.app,{folder:e}=R(),t=n.getAbstractFileByPath(f.normalizePath(e));if(!t)throw new ot("Failed to find weekly notes folder");return f.Vault.recurseChildren(t,s=>{if(s instanceof f.TFile){let o=I(s,"week");if(o){let r=C(o,"week");i[r]=s}}}),i}var rt=class extends Error{};function Mt(i){return a(this,null,function*(){let{vault:n}=window.app,{template:e,format:t,folder:s}=k(),[o,r]=yield E(e),u=i.format(t),c=yield x(s,u);try{let g=yield n.create(c,o.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,(d,p,P,w,y,N)=>{let b=window.moment(),h=i.clone().set({hour:b.get("hour"),minute:b.get("minute"),second:b.get("second")});return P&&h.add(parseInt(w,10),y),N?h.format(N.substring(1).trim()):h.format(t)}).replace(/{{\s*date\s*}}/gi,u).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi,u));return window.app.foldManager.save(g,r),g}catch(g){console.error(`Failed to create file: '${c}'`,g),new f.Notice("Unable to create new file.")}})}function de(i,n){var e;return(e=n[C(i,"month")])!=null?e:null}function me(){let i={};if(!xt())return i;let{vault:n}=window.app,{folder:e}=k(),t=n.getAbstractFileByPath(f.normalizePath(e));if(!t)throw new rt("Failed to find monthly notes folder");return f.Vault.recurseChildren(t,s=>{if(s instanceof f.TFile){let o=I(s,"month");if(o){let r=C(o,"month");i[r]=s}}}),i}var lt=class extends Error{};function pe(i){return a(this,null,function*(){let{vault:n}=window.app,{template:e,format:t,folder:s}=M(),[o,r]=yield E(e),u=i.format(t),c=yield x(s,u);try{let g=yield n.create(c,o.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,(d,p,P,w,y,N)=>{let b=window.moment(),h=i.clone().set({hour:b.get("hour"),minute:b.get("minute"),second:b.get("second")});return P&&h.add(parseInt(w,10),y),N?h.format(N.substring(1).trim()):h.format(t)}).replace(/{{\s*date\s*}}/gi,u).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi,u));return window.app.foldManager.save(g,r),g}catch(g){console.error(`Failed to create file: '${c}'`,g),new f.Notice("Unable to create new file.")}})}function fe(i,n){var e;return(e=n[C(i,"quarter")])!=null?e:null}function he(){let i={};if(!$t())return i;let{vault:n}=window.app,{folder:e}=M(),t=n.getAbstractFileByPath(f.normalizePath(e));if(!t)throw new lt("Failed to find quarterly notes folder");return f.Vault.recurseChildren(t,s=>{if(s instanceof f.TFile){let o=I(s,"quarter");if(o){let r=C(o,"quarter");i[r]=s}}}),i}var gt=class extends Error{};function be(i){return a(this,null,function*(){let{vault:n}=window.app,{template:e,format:t,folder:s}=O(),[o,r]=yield E(e),u=i.format(t),c=yield x(s,u);try{let g=yield n.create(c,o.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,(d,p,P,w,y,N)=>{let b=window.moment(),h=i.clone().set({hour:b.get("hour"),minute:b.get("minute"),second:b.get("second")});return P&&h.add(parseInt(w,10),y),N?h.format(N.substring(1).trim()):h.format(t)}).replace(/{{\s*date\s*}}/gi,u).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi,u));return window.app.foldManager.save(g,r),g}catch(g){console.error(`Failed to create file: '${c}'`,g),new f.Notice("Unable to create new file.")}})}function we(i,n){var e;return(e=n[C(i,"year")])!=null?e:null}function ye(){let i={};if(!Ut())return i;let{vault:n}=window.app,{folder:e}=O(),t=n.getAbstractFileByPath(f.normalizePath(e));if(!t)throw new gt("Failed to find yearly notes folder");return f.Vault.recurseChildren(t,s=>{if(s instanceof f.TFile){let o=I(s,"year");if(o){let r=C(o,"year");i[r]=s}}}),i}function Te(){var t,s;let{app:i}=window,n=i.internalPlugins.plugins["daily-notes"];if(n&&n.enabled)return!0;let e=i.plugins.getPlugin("periodic-notes");return e&&((s=(t=e.settings)==null?void 0:t.daily)==null?void 0:s.enabled)}function Ot(){var e,t;let{app:i}=window;if(i.plugins.getPlugin("calendar"))return!0;let n=i.plugins.getPlugin("periodic-notes");return n&&((t=(e=n.settings)==null?void 0:e.weekly)==null?void 0:t.enabled)}function xt(){var e,t;let{app:i}=window,n=i.plugins.getPlugin("periodic-notes");return n&&((t=(e=n.settings)==null?void 0:e.monthly)==null?void 0:t.enabled)}function $t(){var e,t;let{app:i}=window,n=i.plugins.getPlugin("periodic-notes");return n&&((t=(e=n.settings)==null?void 0:e.quarterly)==null?void 0:t.enabled)}function Ut(){var e,t;let{app:i}=window,n=i.plugins.getPlugin("periodic-notes");return n&&((t=(e=n.settings)==null?void 0:e.yearly)==null?void 0:t.enabled)}function Pe(i){return{day:B,week:R,month:k,quarter:M,year:O}[i]()}function ve(i,n){return{day:Rt,month:Mt,week:kt}[i](n)}l.DEFAULT_DAILY_NOTE_FORMAT=it;l.DEFAULT_MONTHLY_NOTE_FORMAT=Et;l.DEFAULT_QUARTERLY_NOTE_FORMAT=It;l.DEFAULT_WEEKLY_NOTE_FORMAT=st;l.DEFAULT_YEARLY_NOTE_FORMAT=Ft;l.appHasDailyNotesPluginLoaded=Te;l.appHasMonthlyNotesPluginLoaded=xt;l.appHasQuarterlyNotesPluginLoaded=$t;l.appHasWeeklyNotesPluginLoaded=Ot;l.appHasYearlyNotesPluginLoaded=Ut;l.createDailyNote=Rt;l.createMonthlyNote=Mt;l.createPeriodicNote=ve;l.createQuarterlyNote=pe;l.createWeeklyNote=kt;l.createYearlyNote=be;l.getAllDailyNotes=re;l.getAllMonthlyNotes=me;l.getAllQuarterlyNotes=he;l.getAllWeeklyNotes=ce;l.getAllYearlyNotes=ye;l.getDailyNote=oe;l.getDailyNoteSettings=B;l.getDateFromFile=I;l.getDateFromPath=ae;l.getDateUID=C;l.getMonthlyNote=de;l.getMonthlyNoteSettings=k;l.getPeriodicNoteSettings=Pe;l.getQuarterlyNote=fe;l.getQuarterlyNoteSettings=M;l.getTemplateInfo=E;l.getWeeklyNote=ue;l.getWeeklyNoteSettings=R;l.getYearlyNote=we;l.getYearlyNoteSettings=O});var Ne={};Gt(Ne,{default:()=>Z});module.exports=Zt(Ne);var jt=require("obsidian");var T=require("obsidian");var q=require("obsidian");var ct=require("obsidian"),v=class extends ct.FuzzySuggestModal{constructor(e){super(e.app);this.scope.register(["Shift"],"Enter",t=>this.enterTrigger(t)),this.scope.register(["Ctrl"],"Enter",t=>this.enterTrigger(t))}setSuggesterData(e){this.data=e}display(e){return a(this,null,function*(){this.callbackFunction=e,this.open()})}getItems(){return this.data}getItemText(e){return e.display}onChooseItem(){}renderSuggestion(e,t){t.createEl("div",{text:e.item.display})}enterTrigger(e){let t=document.querySelector(".suggestion-item.is-selected div").textContent,s=this.data.find(o=>o.display===t);s&&(this.invokeCallback(s,e),this.close())}onChooseSuggestion(e,t){this.invokeCallback(e.item,t)}invokeCallback(e,t){this.callbackFunction(e,t)}};var A=require("obsidian"),Xt="https://raw.githubusercontent.com/",H=(i,n,e)=>a(void 0,null,function*(){let t=`https://github.com/${i}/releases/download/${n}/${e}`;try{let s=yield(0,A.request)({url:t});return s==="Not Found"||s==='{"error":"Not Found"}'?null:s}catch(s){console.log("error in grabReleaseFileFromRepository",t,s)}}),dt=(i,n=!0)=>a(void 0,null,function*(){let e=Xt+i+(n===!0?"/HEAD/manifest.json":"/HEAD/manifest-beta.json");try{let t=yield(0,A.request)({url:e});return t==="404: Not Found"?null:yield JSON.parse(t)}catch(t){console.log(`error in grabManifestJsonFromRepository for ${e}`,t)}}),mt=()=>a(void 0,null,function*(){let i="https://raw.githubusercontent.com/obsidianmd/obsidian-releases/HEAD/community-plugins.json";try{let n=yield(0,A.request)({url:i});return n==="404: Not Found"?null:yield JSON.parse(n)}catch(n){console.log("error in grabCommmunityPluginList",n)}}),Y=()=>a(void 0,null,function*(){let i="https://raw.githubusercontent.com/obsidianmd/obsidian-releases/HEAD/community-css-themes.json";try{let n=yield(0,A.request)({url:i});return n==="404: Not Found"?null:yield JSON.parse(n)}catch(n){console.log("error in grabCommmunityThemesList",n)}}),et=i=>a(void 0,null,function*(){let n=`https://raw.githubusercontent.com/${i}/HEAD/obsidian.css`;try{let e=yield(0,A.request)({url:n});return e==="404: Not Found"?null:e}catch(e){console.log("error in grabCommmunityThemesList",e)}}),te=(i,n)=>a(void 0,null,function*(){let e=`https://api.github.com/repos/${i}/commits?path=${n}&page=1&per_page=1`;try{let t=yield(0,A.request)({url:e});return t==="404: Not Found"?null:JSON.parse(t)}catch(t){console.log("error in grabCommmunityThemesList",t)}}),j=(i,n)=>a(void 0,null,function*(){let e=yield te(i,n);return e[0].commit.committer.date?e[0].commit.committer.date:""});var pt={pluginList:[],themesList:[],updateAtStartup:!1,updateThemesAtStartup:!1,ribbonIconEnabled:!0,loggingEnabled:!1,loggingPath:"BRAT-log",loggingVerboseEnabled:!1,debuggingMode:!0,notificationsEnabled:!0};function ft(i,n){return a(this,null,function*(){i.settings.pluginList.contains(n)||(i.settings.pluginList.unshift(n),i.saveSettings())})}function ht(i,n){return a(this,null,function*(){return i.settings.pluginList.contains(n)})}function bt(i,n){return a(this,null,function*(){let e={repo:n,lastUpdate:yield j(n,"obsidian.css")};i.settings.themesList.unshift(e),i.saveSettings()})}function wt(i,n){return a(this,null,function*(){return!!i.settings.themesList.find(t=>t.repo===n)})}function yt(i,n,e){i.settings.themesList.forEach(t=>{t.repo===n&&(t.lastUpdate=e,i.saveSettings())})}var Tt=require("obsidian");function m(i,n,e=10,t=null){if(i.settings.notificationsEnabled===!1)return;let s=t?"(click=dismiss, right-click=Info)":"",o=new Tt.Notice(`BRAT
${n}
${s}`,e*1e3);t&&(o.noticeEl.oncontextmenu=()=>a(this,null,function*(){t()}))}function z(){return a(this,null,function*(){try{let i=yield fetch("https://obsidian.md/?"+Math.random());return i.status>=200&&i.status<300}catch(i){return!1}})}var Pt=i=>(0,q.normalizePath)(i.app.vault.configDir+"/themes")+"/",nt=(i,n,e="")=>a(void 0,null,function*(){let t=yield et(n);if(!t)return m(i,"There is no obsidian.css file in the root path of this repository, so there is no theme to install."),!1;yield vt(i,e,t);let s=`${e} theme installed from ${n}. `;return i.log(s+`[Theme Info](https://github.com/${n})`,!1),m(i,`${s}`,10,()=>a(void 0,null,function*(){window.open(`https://github.com/${n}`)})),setTimeout(()=>{i.app.customCss.setTheme(e)},500),!0}),vt=(i,n,e)=>a(void 0,null,function*(){let t=Pt(i),s=i.app.vault.adapter;(yield s.exists(t))===!1&&(yield s.mkdir(t)),yield s.write(t+n+".css",e)}),Nt=i=>a(void 0,null,function*(){let n=yield Y(),e=Object.values(n).map(s=>({display:`Theme: ${s.name}  (${s.repo})`,info:s})),t=new v(i);t.setSuggesterData(e),yield t.display(s=>a(void 0,null,function*(){yield nt(i,s.info.repo,s.info.name)}))}),V=i=>("BRAT-"+i.replace("/","----")).substr(0,100),Ct=(i,n)=>a(void 0,null,function*(){i.settings.themesList=i.settings.themesList.filter(t=>t.repo!=n),i.saveSettings(),yield i.app.vault.adapter.remove(Pt(i)+V(n)+".css");let e=`Removed ${n} from BRAT themes list and deleted from vault`;i.log(e,!0),m(i,`${e}`)}),J=(i,n)=>a(void 0,null,function*(){if((yield z())===!1){console.log("BRAT: No internet detected.");return}let e,t="Checking for beta theme updates STARTED";i.log(t,!0),n&&i.settings.notificationsEnabled&&(e=new q.Notice(`BRAT
${t}`,3e4));for(let o of i.settings.themesList){let r=yield j(o.repo,"obsidian.css");r!==o.lastUpdate&&(yield ee(i,o.repo,o.lastUpdate,r))}let s="Checking for beta theme updates COMPLETED";i.log(s,!0),n&&(i.settings.notificationsEnabled&&e.hide(),m(i,s))}),ee=(i,n,e="",t="")=>a(void 0,null,function*(){let s=yield et(n);if(!s)return m(i,"There is no obsidian.css file in the root path of the ${cssGithubRepository} repository, so this theme cannot be updated."),!1;let o=V(n);yield vt(i,o,s),yt(i,n,t);let r=`${o} theme updated from ${n}. From date: ${e} to ${t} `;return i.log(r+`[Theme Info](https://github.com/${n})`,!1),m(i,`${r}`,20,()=>a(void 0,null,function*(){window.open(`https://github.com/${n}`)})),!0});var W=require("obsidian");var S=class extends W.Modal{constructor(e,t=!1){super(e.app);this.plugin=e,this.address="",this.openSettingsTabAfterwards=t}submitForm(){return a(this,null,function*(){if(this.address==="")return;let e=this.address.replace("https://github.com/","");if(yield wt(this.plugin,e)){m(this.plugin,"This plugin is already in the list for beta testing",10);return}(yield nt(this.plugin,e,V(e)))&&(yield bt(this.plugin,e),this.close())})}onOpen(){this.contentEl.createEl("h4",{text:"Github repository for beta theme:"}),this.contentEl.createEl("form",{},e=>{new W.Setting(e).addText(t=>{t.setPlaceholder("Repository (example: GitubUserName/repository-name"),t.onChange(s=>{this.address=s.trim()}),t.inputEl.addEventListener("keydown",s=>a(this,null,function*(){s.key==="Enter"&&this.address!==" "&&(s.preventDefault(),yield this.submitForm())})),t.inputEl.style.width="100%",window.setTimeout(()=>{let s=document.querySelector(".setting-item-info");s&&s.remove(),t.inputEl.focus()},10)}),e.createDiv("modal-button-container",t=>{t.createEl("button",{attr:{type:"button"},text:"Never mind"}).addEventListener("click",()=>this.close()),t.createEl("button",{attr:{type:"submit"},cls:"mod-cta",text:"Add Theme"})}),e.addEventListener("submit",t=>a(this,null,function*(){t.preventDefault(),this.address!==""&&(yield this.submitForm())}))})}onClose(){return a(this,null,function*(){this.openSettingsTabAfterwards&&(yield this.plugin.app.setting.open(),yield this.plugin.app.setting.openTabById("obsidian42-brat"))})}};var Q=class extends T.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:this.plugin.appName}),new T.Setting(e).setName("Auto-update plugins at startup").setDesc("If enabled all beta plugins will be checked for updates each time Obsidian starts.").addToggle(t=>{t.setValue(this.plugin.settings.updateAtStartup),t.onChange(s=>a(this,null,function*(){this.plugin.settings.updateAtStartup=s,yield this.plugin.saveSettings()}))}),new T.Setting(e).setName("Auto-update themes at startup").setDesc("If enabled all beta themes will be checked for updates each time Obsidian starts.").addToggle(t=>{t.setValue(this.plugin.settings.updateThemesAtStartup),t.onChange(s=>a(this,null,function*(){this.plugin.settings.updateThemesAtStartup=s,yield this.plugin.saveSettings()}))}),new T.Setting(e).setName("Ribbon Button").setDesc("Toggle ribbon button off and on.").addToggle(t=>{t.setValue(this.plugin.settings.ribbonIconEnabled),t.onChange(s=>a(this,null,function*(){this.plugin.settings.ribbonIconEnabled=s,this.plugin.settings.ribbonIconEnabled===!1?this.plugin.ribbonIcon.remove():this.plugin.showRibbonButton(),yield this.plugin.saveSettings()}))}),e.createEl("hr"),e.createEl("h2",{text:"Beta Plugin List"}),e.createEl("div",{text:'The following is a list of beta plugins added via the command palette "Add a beta plugin for testing". '}),e.createEl("p"),e.createEl("div",{text:"Click the x button next to a plugin to remove it from the list."}),e.createEl("p"),e.createEl("span").createEl("b",{text:"Note: "}),e.createSpan({text:"This does not delete the plugin, this should be done from the  Community Plugins tab in Settings."}),new T.Setting(e).addButton(t=>{t.setButtonText("Add Beta plugin"),t.onClick(()=>a(this,null,function*(){this.plugin.app.setting.close(),yield this.plugin.betaPlugins.displayAddNewPluginModal(!0)}))});for(let t of this.plugin.settings.pluginList)new T.Setting(e).setName(t).addButton(s=>{s.setIcon("cross"),s.setTooltip("Delete this beta plugin"),s.onClick(()=>a(this,null,function*(){s.buttonEl.textContent===""?s.setButtonText("Click once more to confirm removal"):(s.buttonEl.parentElement.parentElement.remove(),yield this.plugin.betaPlugins.deletePlugin(t))}))});e.createEl("hr"),e.createEl("h2",{text:"Beta Themes List"}),new T.Setting(e).addButton(t=>{t.setButtonText("Add Beta Theme"),t.onClick(()=>a(this,null,function*(){this.plugin.app.setting.close(),new S(this.plugin).open()}))});for(let t of this.plugin.settings.themesList)new T.Setting(e).setName(t.repo).addButton(s=>{s.setIcon("cross"),s.setTooltip("Delete this beta theme"),s.onClick(()=>a(this,null,function*(){s.buttonEl.textContent===""?s.setButtonText("Click once more to confirm removal"):(s.buttonEl.parentElement.parentElement.remove(),yield Ct(this.plugin,t.repo))}))});e.createEl("hr"),e.createEl("h2",{text:"Monitoring"}),new T.Setting(e).setName("Enable Notifications").setDesc("BRAT will provide popup notifications for its various activities. Turn this off means  no notifications from BRAT.").addToggle(t=>{t.setValue(this.plugin.settings.notificationsEnabled),t.onChange(s=>a(this,null,function*(){this.plugin.settings.notificationsEnabled=s,yield this.plugin.saveSettings()}))}),new T.Setting(e).setName("Enable Logging").setDesc("Plugin updates will be logged to a file in the log file.").addToggle(t=>{t.setValue(this.plugin.settings.loggingEnabled),t.onChange(s=>a(this,null,function*(){this.plugin.settings.loggingEnabled=s,yield this.plugin.saveSettings()}))}),new T.Setting(this.containerEl).setName("BRAT Log File Location").setDesc("Logs will be saved to this file. Don't add .md to the file name.").addSearch(t=>{t.setPlaceholder("Example: BRAT-log").setValue(this.plugin.settings.loggingPath).onChange(s=>a(this,null,function*(){this.plugin.settings.loggingPath=s,yield this.plugin.saveSettings()}))}),new T.Setting(e).setName("Enable Verbose Logging").setDesc("Get a lot  more information in  the log.").addToggle(t=>{t.setValue(this.plugin.settings.loggingVerboseEnabled),t.onChange(s=>a(this,null,function*(){this.plugin.settings.loggingVerboseEnabled=s,yield this.plugin.saveSettings()}))}),new T.Setting(e).setName("Debugging Mode").setDesc("Atomic Bomb level console logging. Can be used for troubleshoting and development.").addToggle(t=>{t.setValue(this.plugin.settings.debuggingMode),t.onChange(s=>a(this,null,function*(){this.plugin.settings.debuggingMode=s,yield this.plugin.saveSettings()}))})}};var G=require("obsidian");var F=class extends G.Modal{constructor(e,t,s=!1){super(e.app);this.plugin=e,this.betaPlugins=t,this.address="",this.openSettingsTabAfterwards=s}submitForm(){return a(this,null,function*(){if(this.address==="")return;let e=this.address.replace("https://github.com/","");if(yield ht(this.plugin,e)){m(this.plugin,"This plugin is already in the list for beta testing",10);return}(yield this.betaPlugins.addPlugin(e))&&this.close()})}onOpen(){this.contentEl.createEl("h4",{text:"Github repository for beta plugin:"}),this.contentEl.createEl("form",{},e=>{new G.Setting(e).addText(t=>{t.setPlaceholder("Repository (example: TfTHacker/obsidian-brat"),t.onChange(s=>{this.address=s.trim()}),t.inputEl.addEventListener("keydown",s=>a(this,null,function*(){s.key==="Enter"&&this.address!==" "&&(s.preventDefault(),yield this.submitForm())})),t.inputEl.style.width="100%",window.setTimeout(()=>{let s=document.querySelector(".setting-item-info");s&&s.remove(),t.inputEl.focus()},10)}),e.createDiv("modal-button-container",t=>{t.createEl("button",{attr:{type:"button"},text:"Never mind"}).addEventListener("click",()=>this.close()),t.createEl("button",{attr:{type:"submit"},cls:"mod-cta",text:"Add Plugin"})}),e.addEventListener("submit",t=>a(this,null,function*(){t.preventDefault(),this.address!==""&&(yield this.submitForm())}))})}onClose(){return a(this,null,function*(){this.openSettingsTabAfterwards&&(yield this.plugin.app.setting.open(),yield this.plugin.app.setting.openTabById("obsidian42-brat"))})}};var K=require("obsidian");var D=class{constructor(n){this.plugin=n}displayAddNewPluginModal(n=!1){return a(this,null,function*(){new F(this.plugin,this,n).open()})}validateRepository(n,e=!1,t=!1){return a(this,null,function*(){let o=yield dt(n,!e);return o?"id"in o?"version"in o?o:(t&&m(this.plugin,`${n}
The version attribute for the release is missing from the manifest file`,15),null):(t&&m(this.plugin,`${n}
The plugin id attribute for the release is missing from the manifest file`,15),null):(t&&m(this.plugin,`${n}
This does not seem to be an obsidian plugin, as there is no manifest.json file.`,15),null)})}getAllReleaseFiles(n,e,t){return a(this,null,function*(){return{mainJs:yield H(n,e.version,"main.js"),manifest:t?yield H(n,e.version,"manifest.json"):null,styles:yield H(n,e.version,"styles.css")}})}writeReleaseFilesToPluginFolder(n,e){return a(this,null,function*(){let t=(0,K.normalizePath)(this.plugin.app.vault.configDir+"/plugins/"+n)+"/",s=this.plugin.app.vault.adapter;((yield s.exists(t))===!1||!(yield s.exists(t+"manifest.json")))&&(yield s.mkdir(t)),yield s.write(t+"main.js",e.mainJs),yield s.write(t+"manifest.json",e.manifest),e.styles&&(yield s.write(t+"styles.css",e.styles))})}addPlugin(n,e=!1,t=!1,s=!1){return a(this,null,function*(){var g;let r=yield this.validateRepository(n,!0,!1),u=!!r;if(u===!1&&(r=yield this.validateRepository(n,!1,!0)),r===null){let d=`${n}
A manifest.json or manifest-beta.json file does not exist in the root directory of the repository. This plugin cannot be installed.`;return this.plugin.log(d,!0),m(this.plugin,`${d}`,10),!1}if(!r.hasOwnProperty("version")){let d=`${n}
The manifest${u?"-beta":""}.json file in the root directory of the repository does not have a version number in the file. This plugin cannot be installed.`;return this.plugin.log(d,!0),m(this.plugin,`${d}`,10),!1}let c=()=>a(this,null,function*(){let d=yield this.getAllReleaseFiles(n,r,u);if((u||d.manifest===null)&&(d.manifest=JSON.stringify(r)),d.mainJs===null){let p=`${n}
The release is not complete and cannot be download. main.js is missing from the Release`;return this.plugin.log(p,!0),m(this.plugin,`${p}`,10),null}return d});if(e===!1){let d=yield c();if(d===null)return;yield this.writeReleaseFilesToPluginFolder(r.id,d),yield ft(this.plugin,n),yield this.plugin.app.plugins.loadManifests();let p=`${n}
The plugin has been registered with BRAT. You may still need to enable it the Community Plugin List.`;this.plugin.log(p,!0),m(this.plugin,p,10)}else{let d=this.plugin.app.vault.configDir+"/plugins/"+r.id+"/",p=null;try{p=yield this.plugin.app.vault.adapter.read(d+"manifest.json")}catch(w){if(w.errno===-4058)return yield this.addPlugin(n,!1,u),!0;console.log("BRAT - Local Manifest Load",r.id,JSON.stringify(w,null,2))}let P=yield JSON.parse(p);if(P.version!==r.version){let w=yield c();if(w===null)return;if(t){let y=`There is an update available for ${r.id} from version ${P.version} to ${r.version}. `;this.plugin.log(y+`[Release Info](https://github.com/${n}/releases/tag/${r.version})`,!1),m(this.plugin,y,30,()=>a(this,null,function*(){window.open(`https://github.com/${n}/releases/tag/${r.version}`)}))}else{yield this.writeReleaseFilesToPluginFolder(r.id,w),yield this.plugin.app.plugins.loadManifests(),(g=this.plugin.app.plugins.plugins[r.id])!=null&&g.manifest&&(yield this.reloadPlugin(r.id));let y=`${r.id}
Plugin has been updated from version ${P.version} to ${r.version}. `;this.plugin.log(y+`[Release Info](https://github.com/${n}/releases/tag/${r.version})`,!1),m(this.plugin,y,30,()=>a(this,null,function*(){window.open(`https://github.com/${n}/releases/tag/${r.version}`)}))}}else s&&m(this.plugin,`No update available for ${n}`,3)}return!0})}reloadPlugin(n){return a(this,null,function*(){let e=this.plugin.app.plugins;try{yield e.disablePlugin(n),yield e.enablePlugin(n)}catch(t){console.log("reload plugin",t)}})}updatePlugin(n,e=!1,t=!1){return a(this,null,function*(){let s=yield this.addPlugin(n,!0,e,t);return s===!1&&e===!1&&m(this.plugin,`${n}
Update of plugin failed.`),s})}checkForUpdatesAndInstallUpdates(n=!1,e=!1){return a(this,null,function*(){if((yield z())===!1){console.log("BRAT: No internet detected.");return}let t,s="Checking for plugin updates STARTED";this.plugin.log(s,!0),n&&this.plugin.settings.notificationsEnabled&&(t=new K.Notice(`BRAT
${s}`,3e4));for(let r of this.plugin.settings.pluginList)yield this.updatePlugin(r,e);let o="Checking for plugin updates COMPLETED";this.plugin.log(o,!0),n&&(t.hide(),m(this.plugin,o,10))})}deletePlugin(n){return a(this,null,function*(){let e=`Removed ${n} from BRAT plugin list`;this.plugin.log(e,!0),this.plugin.settings.pluginList=this.plugin.settings.pluginList.filter(t=>t!=n),this.plugin.saveSettings()})}getEnabledDisabledPlugins(n){let e=this.plugin.app.plugins,t=Object.values(e.manifests),s=Object.values(e.plugins).map(o=>o.manifest);return n?t.filter(o=>s.find(r=>o.id===r.id)):t.filter(o=>!s.find(r=>o.id===r.id))}};var At=require("obsidian");function St(){(0,At.addIcon)("BratIcon",'<path fill="currentColor" stroke="currentColor"  d="M 41.667969 41.667969 C 41.667969 39.367188 39.800781 37.5 37.5 37.5 C 35.199219 37.5 33.332031 39.367188 33.332031 41.667969 C 33.332031 43.96875 35.199219 45.832031 37.5 45.832031 C 39.800781 45.832031 41.667969 43.96875 41.667969 41.667969 Z M 60.417969 58.582031 C 59.460938 58.023438 58.320312 57.867188 57.25 58.148438 C 56.179688 58.429688 55.265625 59.125 54.707031 60.082031 C 53.746094 61.777344 51.949219 62.820312 50 62.820312 C 48.050781 62.820312 46.253906 61.777344 45.292969 60.082031 C 44.734375 59.125 43.820312 58.429688 42.75 58.148438 C 41.679688 57.867188 40.539062 58.023438 39.582031 58.582031 C 37.597656 59.726562 36.910156 62.257812 38.042969 64.25 C 40.5 68.53125 45.0625 71.171875 50 71.171875 C 54.9375 71.171875 59.5 68.53125 61.957031 64.25 C 63.089844 62.257812 62.402344 59.726562 60.417969 58.582031 Z M 62.5 37.5 C 60.199219 37.5 58.332031 39.367188 58.332031 41.667969 C 58.332031 43.96875 60.199219 45.832031 62.5 45.832031 C 64.800781 45.832031 66.667969 43.96875 66.667969 41.667969 C 66.667969 39.367188 64.800781 37.5 62.5 37.5 Z M 50 8.332031 C 26.988281 8.332031 8.332031 26.988281 8.332031 50 C 8.332031 73.011719 26.988281 91.667969 50 91.667969 C 73.011719 91.667969 91.667969 73.011719 91.667969 50 C 91.667969 26.988281 73.011719 8.332031 50 8.332031 Z M 50 83.332031 C 33.988281 83.402344 20.191406 72.078125 17.136719 56.363281 C 14.078125 40.644531 22.628906 24.976562 37.5 19.042969 C 37.457031 19.636719 37.457031 20.238281 37.5 20.832031 C 37.5 27.738281 43.097656 33.332031 50 33.332031 C 52.300781 33.332031 54.167969 31.46875 54.167969 29.167969 C 54.167969 26.867188 52.300781 25 50 25 C 47.699219 25 45.832031 23.132812 45.832031 20.832031 C 45.832031 18.53125 47.699219 16.667969 50 16.667969 C 68.410156 16.667969 83.332031 31.589844 83.332031 50 C 83.332031 68.410156 68.410156 83.332031 50 83.332031 Z M 50 83.332031 " />')}var $=require("obsidian"),Ht=Kt(_t());function Yt(i,n,e=!1){if(i.settings.debuggingMode&&console.log("BRAT: "+n),i.settings.loggingEnabled){if(i.settings.loggingVerboseEnabled===!1&&e===!0)return;{let t=i.settings.loggingPath+".md",s="[["+(0,$.moment)().format((0,Ht.getDailyNoteSettings)().format).toString()+"]] "+(0,$.moment)().format("HH:mm"),o=$.Platform.isDesktop?window.require("os").hostname():"MOBILE",r=s+" "+o+" "+n.replace(`
`," ")+`

`;setTimeout(()=>a(this,null,function*(){if((yield i.app.vault.adapter.exists(t))===!0){let u=yield i.app.vault.adapter.read(t);r=r+u;let c=i.app.vault.getAbstractFileByPath(t);yield i.app.vault.modify(c,r)}else yield i.app.vault.create(t,r)}),10)}}}var U=class{constructor(n){this.bratCommands=[{id:"BRAT-AddBetaPlugin",icon:"BratIcon",name:"Plugins: Add a beta plugin for testing",showInRibbon:!0,callback:()=>a(this,null,function*(){yield this.plugin.betaPlugins.displayAddNewPluginModal()})},{id:"BRAT-checkForUpdatesAndUpdate",icon:"BratIcon",name:"Plugins: Check for updates to all beta plugins and UPDATE",showInRibbon:!0,callback:()=>a(this,null,function*(){yield this.plugin.betaPlugins.checkForUpdatesAndInstallUpdates(!0,!1)})},{id:"BRAT-checkForUpdatesAndDontUpdate",icon:"BratIcon",name:"Plugins: Only check for updates to beta plugins, but don't Update",showInRibbon:!0,callback:()=>a(this,null,function*(){yield this.plugin.betaPlugins.checkForUpdatesAndInstallUpdates(!0,!0)})},{id:"BRAT-updateOnePlugin",icon:"BratIcon",name:"Plugins: Choose a single plugin to update",showInRibbon:!0,callback:()=>a(this,null,function*(){let n=Object.values(this.plugin.settings.pluginList).map(t=>({display:t,info:t})),e=new v(this.plugin);e.setSuggesterData(n),yield e.display(t=>a(this,null,function*(){let s=`Checking for updates for ${t.info}`;this.plugin.log(s,!0),m(this.plugin,`
${s}`,3),yield this.plugin.betaPlugins.updatePlugin(t.info,!1,!0)}))})},{id:"BRAT-restartPlugin",icon:"BratIcon",name:"Plugins: Restart a plugin that is already installed",showInRibbon:!0,callback:()=>a(this,null,function*(){let n=Object.values(this.plugin.app.plugins.manifests).map(t=>({display:t.id,info:t.id})),e=new v(this.plugin);e.setSuggesterData(n),yield e.display(t=>a(this,null,function*(){m(this.plugin,`${t.info}
Plugin reloading .....`,5),yield this.plugin.betaPlugins.reloadPlugin(t.info)}))})},{id:"BRAT-disablePlugin",icon:"BratIcon",name:"Plugins: Disable a plugin - toggle it off",showInRibbon:!0,callback:()=>a(this,null,function*(){let n=this.plugin.betaPlugins.getEnabledDisabledPlugins(!0).map(t=>({display:`${t.name} (${t.id})`,info:t.id})),e=new v(this.plugin);e.setSuggesterData(n),yield e.display(t=>a(this,null,function*(){this.plugin.log(`${t.display} plugin disabled`,!1),yield this.plugin.app.plugins.disablePlugin(t.info)}))})},{id:"BRAT-enablePlugin",icon:"BratIcon",name:"Plugins: Enable a plugin - toggle it on",showInRibbon:!0,callback:()=>a(this,null,function*(){let n=this.plugin.betaPlugins.getEnabledDisabledPlugins(!1).map(t=>({display:`${t.name} (${t.id})`,info:t.id})),e=new v(this.plugin);e.setSuggesterData(n),yield e.display(t=>a(this,null,function*(){this.plugin.log(`${t.display} plugin enabled`,!1),yield this.plugin.app.plugins.enablePlugin(t.info)}))})},{id:"BRAT-openGitHubZRepository",icon:"BratIcon",name:"Plugins: Open the GitHub repository for a plugin",showInRibbon:!0,callback:()=>a(this,null,function*(){let n=yield mt(),e=Object.values(n).map(o=>({display:`Plugin: ${o.name}  (${o.repo})`,info:o.repo})),t=Object.values(this.plugin.settings.pluginList).map(o=>({display:"BRAT: "+o,info:o}));e.forEach(o=>t.push(o));let s=new v(this.plugin);s.setSuggesterData(t),yield s.display(o=>a(this,null,function*(){o.info&&window.open(`https://github.com/${o.info}`)}))})},{id:"BRAT-openGitHubRepoTheme",icon:"BratIcon",name:"Themes: Open the GitHub repository for a theme (appearance)",showInRibbon:!0,callback:()=>a(this,null,function*(){let n=yield Y(),e=Object.values(n).map(s=>({display:`Theme: ${s.name}  (${s.repo})`,info:s.repo})),t=new v(this.plugin);t.setSuggesterData(e),yield t.display(s=>a(this,null,function*(){s.info&&window.open(`https://github.com/${s.info}`)}))})},{id:"BRAT-opentPluginSettings",icon:"BratIcon",name:"Plugins: Open Plugin Settings Tab",showInRibbon:!0,callback:()=>a(this,null,function*(){let n=this.plugin.app.setting,e=Object.values(n.pluginTabs).map(o=>({display:"Plugin: "+o.name,info:o.id})),t=new v(this.plugin),s=Object.values(n.settingTabs).map(o=>({display:"Core: "+o.name,info:o.id}));e.forEach(o=>s.push(o)),t.setSuggesterData(s),yield t.display(o=>a(this,null,function*(){n.open(),n.openTabById(o.info)}))})},{id:"BRAT-GrabCommunityTheme",icon:"BratIcon",name:"Themes: Grab a community theme",showInRibbon:!0,callback:()=>a(this,null,function*(){return yield Nt(this.plugin)})},{id:"BRAT-GrabBetaTheme",icon:"BratIcon",name:"Themes: Grab a beta theme for testing from a Github repository",showInRibbon:!0,callback:()=>a(this,null,function*(){new S(this.plugin).open()})},{id:"BRAT-updateBetaThemes",icon:"BratIcon",name:"Themes: Update beta themes",showInRibbon:!0,callback:()=>a(this,null,function*(){return yield J(this.plugin,!0)})},{id:"BRAT-switchTheme",icon:"BratIcon",name:"Themes: Switch Active Theme ",showInRibbon:!0,callback:()=>a(this,null,function*(){let n=Object.values(this.plugin.app.customCss.themes).map(t=>({display:t,info:t}));n.unshift({display:"Obsidian Default Theme",info:""});let e=new v(this.plugin);e.setSuggesterData(n),yield e.display(t=>a(this,null,function*(){this.plugin.log(`Switched to theme ${t.display}`,!1),this.plugin.app.customCss.setTheme(t.info)}))})},{id:"BRAT-allCommands",icon:"BratIcon",name:"All Commands list",showInRibbon:!1,callback:()=>a(this,null,function*(){return this.ribbonDisplayCommands()})}];this.plugin=n,this.bratCommands.forEach(e=>a(this,null,function*(){this.plugin.addCommand({id:e.id,name:e.name,icon:e.icon,callback:()=>a(this,null,function*(){yield e.callback()})})}))}ribbonDisplayCommands(){return a(this,null,function*(){let n=[];this.bratCommands.forEach(r=>{r.showInRibbon&&n.push({display:r.name,info:r.callback})});let e=new v(this.plugin),t=this.plugin.app.setting,s=Object.values(t.settingTabs).map(r=>({display:"Core: "+r.name,info:()=>a(this,null,function*(){t.open(),t.openTabById(r.id)})})),o=Object.values(t.pluginTabs).map(r=>({display:"Plugin: "+r.name,info:()=>a(this,null,function*(){t.open(),t.openTabById(r.id)})}));n.push({display:"---- Core Plugin Settings ----",info:()=>a(this,null,function*(){yield this.ribbonDisplayCommands()})}),s.forEach(r=>n.push(r)),n.push({display:"---- Plugin Settings ----",info:()=>a(this,null,function*(){yield this.ribbonDisplayCommands()})}),o.forEach(r=>n.push(r)),e.setSuggesterData(n),yield e.display(r=>a(this,null,function*(){return yield r.info()}))})}};var Z=class extends jt.Plugin{constructor(){super(...arguments);this.appName="Obsidian42 - Beta Reviewer's Auto-update Tool (BRAT)";this.appID="obsidian42-brat"}onload(){return a(this,null,function*(){console.log("loading Obsidian42 - BRAT"),yield this.loadSettings(),this.addSettingTab(new Q(this.app,this)),this.betaPlugins=new D(this),this.commands=new U(this),St(),this.settings.ribbonIconEnabled&&this.showRibbonButton(),this.app.workspace.onLayoutReady(()=>{this.settings.updateAtStartup&&setTimeout(()=>a(this,null,function*(){yield this.betaPlugins.checkForUpdatesAndInstallUpdates(!1)}),6e4),this.settings.updateThemesAtStartup&&setTimeout(()=>a(this,null,function*(){yield J(this,!1)}),12e4)})})}showRibbonButton(){this.ribbonIcon=this.addRibbonIcon("BratIcon","BRAT",()=>a(this,null,function*(){return this.commands.ribbonDisplayCommands()}))}log(e,t=!1){Yt(this,e,t)}onunload(){console.log("unloading "+this.appName)}loadSettings(){return a(this,null,function*(){this.settings=Object.assign({},pt,yield this.loadData())})}saveSettings(){return a(this,null,function*(){yield this.saveData(this.settings)})}};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzL29ic2lkaWFuLWRhaWx5LW5vdGVzLWludGVyZmFjZS9kaXN0L21haW4uanMiLCAiLi4vc3JjL21haW4udHMiLCAiLi4vc3JjL3VpL1NldHRpbmdzVGFiLnRzIiwgIi4uL3NyYy9mZWF0dXJlcy90aGVtZXMudHMiLCAiLi4vc3JjL3VpL0dlbmVyaWNGdXp6eVN1Z2dlc3Rlci50cyIsICIuLi9zcmMvZmVhdHVyZXMvZ2l0aHViVXRpbHMudHMiLCAiLi4vc3JjL3VpL3NldHRpbmdzLnRzIiwgIi4uL3NyYy91dGlscy9ub3RpZmljYXRpb25zLnRzIiwgIi4uL3NyYy91dGlscy9pbnRlcm5ldGNvbm5lY3Rpb24udHMiLCAiLi4vc3JjL3VpL0FkZE5ld1RoZW1lLnRzIiwgIi4uL3NyYy91aS9BZGROZXdQbHVnaW5Nb2RhbC50cyIsICIuLi9zcmMvZmVhdHVyZXMvQmV0YVBsdWdpbnMudHMiLCAiLi4vc3JjL3VpL2ljb25zLnRzIiwgIi4uL3NyYy91dGlscy9sb2dnaW5nLnRzIiwgIi4uL3NyYy91aS9QbHVnaW5Db21tYW5kcy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgb2JzaWRpYW4gPSByZXF1aXJlKCdvYnNpZGlhbicpO1xuXG5jb25zdCBERUZBVUxUX0RBSUxZX05PVEVfRk9STUFUID0gXCJZWVlZLU1NLUREXCI7XG5jb25zdCBERUZBVUxUX1dFRUtMWV9OT1RFX0ZPUk1BVCA9IFwiZ2dnZy1bV113d1wiO1xuY29uc3QgREVGQVVMVF9NT05USExZX05PVEVfRk9STUFUID0gXCJZWVlZLU1NXCI7XG5jb25zdCBERUZBVUxUX1FVQVJURVJMWV9OT1RFX0ZPUk1BVCA9IFwiWVlZWS1bUV1RXCI7XG5jb25zdCBERUZBVUxUX1lFQVJMWV9OT1RFX0ZPUk1BVCA9IFwiWVlZWVwiO1xuXG5mdW5jdGlvbiBzaG91bGRVc2VQZXJpb2RpY05vdGVzU2V0dGluZ3MocGVyaW9kaWNpdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IHBlcmlvZGljTm90ZXMgPSB3aW5kb3cuYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwicGVyaW9kaWMtbm90ZXNcIik7XG4gICAgcmV0dXJuIHBlcmlvZGljTm90ZXMgJiYgcGVyaW9kaWNOb3Rlcy5zZXR0aW5ncz8uW3BlcmlvZGljaXR5XT8uZW5hYmxlZDtcbn1cbi8qKlxuICogUmVhZCB0aGUgdXNlciBzZXR0aW5ncyBmb3IgdGhlIGBkYWlseS1ub3Rlc2AgcGx1Z2luXG4gKiB0byBrZWVwIGJlaGF2aW9yIG9mIGNyZWF0aW5nIGEgbmV3IG5vdGUgaW4tc3luYy5cbiAqL1xuZnVuY3Rpb24gZ2V0RGFpbHlOb3RlU2V0dGluZ3MoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgY29uc3QgeyBpbnRlcm5hbFBsdWdpbnMsIHBsdWdpbnMgfSA9IHdpbmRvdy5hcHA7XG4gICAgICAgIGlmIChzaG91bGRVc2VQZXJpb2RpY05vdGVzU2V0dGluZ3MoXCJkYWlseVwiKSkge1xuICAgICAgICAgICAgY29uc3QgeyBmb3JtYXQsIGZvbGRlciwgdGVtcGxhdGUgfSA9IHBsdWdpbnMuZ2V0UGx1Z2luKFwicGVyaW9kaWMtbm90ZXNcIik/LnNldHRpbmdzPy5kYWlseSB8fCB7fTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiBmb3JtYXQgfHwgREVGQVVMVF9EQUlMWV9OT1RFX0ZPUk1BVCxcbiAgICAgICAgICAgICAgICBmb2xkZXI6IGZvbGRlcj8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRlbXBsYXRlPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBmb2xkZXIsIGZvcm1hdCwgdGVtcGxhdGUgfSA9IGludGVybmFsUGx1Z2lucy5nZXRQbHVnaW5CeUlkKFwiZGFpbHktbm90ZXNcIik/Lmluc3RhbmNlPy5vcHRpb25zIHx8IHt9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9ybWF0OiBmb3JtYXQgfHwgREVGQVVMVF9EQUlMWV9OT1RFX0ZPUk1BVCxcbiAgICAgICAgICAgIGZvbGRlcjogZm9sZGVyPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZT8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKFwiTm8gY3VzdG9tIGRhaWx5IG5vdGUgc2V0dGluZ3MgZm91bmQhXCIsIGVycik7XG4gICAgfVxufVxuLyoqXG4gKiBSZWFkIHRoZSB1c2VyIHNldHRpbmdzIGZvciB0aGUgYHdlZWtseS1ub3Rlc2AgcGx1Z2luXG4gKiB0byBrZWVwIGJlaGF2aW9yIG9mIGNyZWF0aW5nIGEgbmV3IG5vdGUgaW4tc3luYy5cbiAqL1xuZnVuY3Rpb24gZ2V0V2Vla2x5Tm90ZVNldHRpbmdzKCkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGNvbnN0IHBsdWdpbk1hbmFnZXIgPSB3aW5kb3cuYXBwLnBsdWdpbnM7XG4gICAgICAgIGNvbnN0IGNhbGVuZGFyU2V0dGluZ3MgPSBwbHVnaW5NYW5hZ2VyLmdldFBsdWdpbihcImNhbGVuZGFyXCIpPy5vcHRpb25zO1xuICAgICAgICBjb25zdCBwZXJpb2RpY05vdGVzU2V0dGluZ3MgPSBwbHVnaW5NYW5hZ2VyLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpPy5zZXR0aW5ncz8ud2Vla2x5O1xuICAgICAgICBpZiAoc2hvdWxkVXNlUGVyaW9kaWNOb3Rlc1NldHRpbmdzKFwid2Vla2x5XCIpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGZvcm1hdDogcGVyaW9kaWNOb3Rlc1NldHRpbmdzLmZvcm1hdCB8fCBERUZBVUxUX1dFRUtMWV9OT1RFX0ZPUk1BVCxcbiAgICAgICAgICAgICAgICBmb2xkZXI6IHBlcmlvZGljTm90ZXNTZXR0aW5ncy5mb2xkZXI/LnRyaW0oKSB8fCBcIlwiLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBwZXJpb2RpY05vdGVzU2V0dGluZ3MudGVtcGxhdGU/LnRyaW0oKSB8fCBcIlwiLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IGNhbGVuZGFyU2V0dGluZ3MgfHwge307XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb3JtYXQ6IHNldHRpbmdzLndlZWtseU5vdGVGb3JtYXQgfHwgREVGQVVMVF9XRUVLTFlfTk9URV9GT1JNQVQsXG4gICAgICAgICAgICBmb2xkZXI6IHNldHRpbmdzLndlZWtseU5vdGVGb2xkZXI/LnRyaW0oKSB8fCBcIlwiLFxuICAgICAgICAgICAgdGVtcGxhdGU6IHNldHRpbmdzLndlZWtseU5vdGVUZW1wbGF0ZT8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKFwiTm8gY3VzdG9tIHdlZWtseSBub3RlIHNldHRpbmdzIGZvdW5kIVwiLCBlcnIpO1xuICAgIH1cbn1cbi8qKlxuICogUmVhZCB0aGUgdXNlciBzZXR0aW5ncyBmb3IgdGhlIGBwZXJpb2RpYy1ub3Rlc2AgcGx1Z2luXG4gKiB0byBrZWVwIGJlaGF2aW9yIG9mIGNyZWF0aW5nIGEgbmV3IG5vdGUgaW4tc3luYy5cbiAqL1xuZnVuY3Rpb24gZ2V0TW9udGhseU5vdGVTZXR0aW5ncygpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IHBsdWdpbk1hbmFnZXIgPSB3aW5kb3cuYXBwLnBsdWdpbnM7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSAoc2hvdWxkVXNlUGVyaW9kaWNOb3Rlc1NldHRpbmdzKFwibW9udGhseVwiKSAmJlxuICAgICAgICAgICAgcGx1Z2luTWFuYWdlci5nZXRQbHVnaW4oXCJwZXJpb2RpYy1ub3Rlc1wiKT8uc2V0dGluZ3M/Lm1vbnRobHkpIHx8XG4gICAgICAgICAgICB7fTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvcm1hdDogc2V0dGluZ3MuZm9ybWF0IHx8IERFRkFVTFRfTU9OVEhMWV9OT1RFX0ZPUk1BVCxcbiAgICAgICAgICAgIGZvbGRlcjogc2V0dGluZ3MuZm9sZGVyPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgICAgIHRlbXBsYXRlOiBzZXR0aW5ncy50ZW1wbGF0ZT8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKFwiTm8gY3VzdG9tIG1vbnRobHkgbm90ZSBzZXR0aW5ncyBmb3VuZCFcIiwgZXJyKTtcbiAgICB9XG59XG4vKipcbiAqIFJlYWQgdGhlIHVzZXIgc2V0dGluZ3MgZm9yIHRoZSBgcGVyaW9kaWMtbm90ZXNgIHBsdWdpblxuICogdG8ga2VlcCBiZWhhdmlvciBvZiBjcmVhdGluZyBhIG5ldyBub3RlIGluLXN5bmMuXG4gKi9cbmZ1bmN0aW9uIGdldFF1YXJ0ZXJseU5vdGVTZXR0aW5ncygpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IHBsdWdpbk1hbmFnZXIgPSB3aW5kb3cuYXBwLnBsdWdpbnM7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSAoc2hvdWxkVXNlUGVyaW9kaWNOb3Rlc1NldHRpbmdzKFwicXVhcnRlcmx5XCIpICYmXG4gICAgICAgICAgICBwbHVnaW5NYW5hZ2VyLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpPy5zZXR0aW5ncz8ucXVhcnRlcmx5KSB8fFxuICAgICAgICAgICAge307XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb3JtYXQ6IHNldHRpbmdzLmZvcm1hdCB8fCBERUZBVUxUX1FVQVJURVJMWV9OT1RFX0ZPUk1BVCxcbiAgICAgICAgICAgIGZvbGRlcjogc2V0dGluZ3MuZm9sZGVyPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgICAgIHRlbXBsYXRlOiBzZXR0aW5ncy50ZW1wbGF0ZT8udHJpbSgpIHx8IFwiXCIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKFwiTm8gY3VzdG9tIHF1YXJ0ZXJseSBub3RlIHNldHRpbmdzIGZvdW5kIVwiLCBlcnIpO1xuICAgIH1cbn1cbi8qKlxuICogUmVhZCB0aGUgdXNlciBzZXR0aW5ncyBmb3IgdGhlIGBwZXJpb2RpYy1ub3Rlc2AgcGx1Z2luXG4gKiB0byBrZWVwIGJlaGF2aW9yIG9mIGNyZWF0aW5nIGEgbmV3IG5vdGUgaW4tc3luYy5cbiAqL1xuZnVuY3Rpb24gZ2V0WWVhcmx5Tm90ZVNldHRpbmdzKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGx1Z2luTWFuYWdlciA9IHdpbmRvdy5hcHAucGx1Z2lucztcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IChzaG91bGRVc2VQZXJpb2RpY05vdGVzU2V0dGluZ3MoXCJ5ZWFybHlcIikgJiZcbiAgICAgICAgICAgIHBsdWdpbk1hbmFnZXIuZ2V0UGx1Z2luKFwicGVyaW9kaWMtbm90ZXNcIik/LnNldHRpbmdzPy55ZWFybHkpIHx8XG4gICAgICAgICAgICB7fTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvcm1hdDogc2V0dGluZ3MuZm9ybWF0IHx8IERFRkFVTFRfWUVBUkxZX05PVEVfRk9STUFULFxuICAgICAgICAgICAgZm9sZGVyOiBzZXR0aW5ncy5mb2xkZXI/LnRyaW0oKSB8fCBcIlwiLFxuICAgICAgICAgICAgdGVtcGxhdGU6IHNldHRpbmdzLnRlbXBsYXRlPy50cmltKCkgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmluZm8oXCJObyBjdXN0b20geWVhcmx5IG5vdGUgc2V0dGluZ3MgZm91bmQhXCIsIGVycik7XG4gICAgfVxufVxuXG4vLyBDcmVkaXQ6IEBjcmVhdGlvbml4L3BhdGguanNcbmZ1bmN0aW9uIGpvaW4oLi4ucGFydFNlZ21lbnRzKSB7XG4gICAgLy8gU3BsaXQgdGhlIGlucHV0cyBpbnRvIGEgbGlzdCBvZiBwYXRoIGNvbW1hbmRzLlxuICAgIGxldCBwYXJ0cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gcGFydFNlZ21lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBwYXJ0cyA9IHBhcnRzLmNvbmNhdChwYXJ0U2VnbWVudHNbaV0uc3BsaXQoXCIvXCIpKTtcbiAgICB9XG4gICAgLy8gSW50ZXJwcmV0IHRoZSBwYXRoIGNvbW1hbmRzIHRvIGdldCB0aGUgbmV3IHJlc29sdmVkIHBhdGguXG4gICAgY29uc3QgbmV3UGFydHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgIC8vIFJlbW92ZSBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaGVzXG4gICAgICAgIC8vIEFsc28gcmVtb3ZlIFwiLlwiIHNlZ21lbnRzXG4gICAgICAgIGlmICghcGFydCB8fCBwYXJ0ID09PSBcIi5cIilcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAvLyBQdXNoIG5ldyBwYXRoIHNlZ21lbnRzLlxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBuZXdQYXJ0cy5wdXNoKHBhcnQpO1xuICAgIH1cbiAgICAvLyBQcmVzZXJ2ZSB0aGUgaW5pdGlhbCBzbGFzaCBpZiB0aGVyZSB3YXMgb25lLlxuICAgIGlmIChwYXJ0c1swXSA9PT0gXCJcIilcbiAgICAgICAgbmV3UGFydHMudW5zaGlmdChcIlwiKTtcbiAgICAvLyBUdXJuIGJhY2sgaW50byBhIHNpbmdsZSBzdHJpbmcgcGF0aC5cbiAgICByZXR1cm4gbmV3UGFydHMuam9pbihcIi9cIik7XG59XG5mdW5jdGlvbiBiYXNlbmFtZShmdWxsUGF0aCkge1xuICAgIGxldCBiYXNlID0gZnVsbFBhdGguc3Vic3RyaW5nKGZ1bGxQYXRoLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpO1xuICAgIGlmIChiYXNlLmxhc3RJbmRleE9mKFwiLlwiKSAhPSAtMSlcbiAgICAgICAgYmFzZSA9IGJhc2Uuc3Vic3RyaW5nKDAsIGJhc2UubGFzdEluZGV4T2YoXCIuXCIpKTtcbiAgICByZXR1cm4gYmFzZTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGVuc3VyZUZvbGRlckV4aXN0cyhwYXRoKSB7XG4gICAgY29uc3QgZGlycyA9IHBhdGgucmVwbGFjZSgvXFxcXC9nLCBcIi9cIikuc3BsaXQoXCIvXCIpO1xuICAgIGRpcnMucG9wKCk7IC8vIHJlbW92ZSBiYXNlbmFtZVxuICAgIGlmIChkaXJzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBkaXIgPSBqb2luKC4uLmRpcnMpO1xuICAgICAgICBpZiAoIXdpbmRvdy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGRpcikpIHtcbiAgICAgICAgICAgIGF3YWl0IHdpbmRvdy5hcHAudmF1bHQuY3JlYXRlRm9sZGVyKGRpcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiBnZXROb3RlUGF0aChkaXJlY3RvcnksIGZpbGVuYW1lKSB7XG4gICAgaWYgKCFmaWxlbmFtZS5lbmRzV2l0aChcIi5tZFwiKSkge1xuICAgICAgICBmaWxlbmFtZSArPSBcIi5tZFwiO1xuICAgIH1cbiAgICBjb25zdCBwYXRoID0gb2JzaWRpYW4ubm9ybWFsaXplUGF0aChqb2luKGRpcmVjdG9yeSwgZmlsZW5hbWUpKTtcbiAgICBhd2FpdCBlbnN1cmVGb2xkZXJFeGlzdHMocGF0aCk7XG4gICAgcmV0dXJuIHBhdGg7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRUZW1wbGF0ZUluZm8odGVtcGxhdGUpIHtcbiAgICBjb25zdCB7IG1ldGFkYXRhQ2FjaGUsIHZhdWx0IH0gPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHRlbXBsYXRlUGF0aCA9IG9ic2lkaWFuLm5vcm1hbGl6ZVBhdGgodGVtcGxhdGUpO1xuICAgIGlmICh0ZW1wbGF0ZVBhdGggPT09IFwiL1wiKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW1wiXCIsIG51bGxdKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdGVtcGxhdGVGaWxlID0gbWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdCh0ZW1wbGF0ZVBhdGgsIFwiXCIpO1xuICAgICAgICBjb25zdCBjb250ZW50cyA9IGF3YWl0IHZhdWx0LmNhY2hlZFJlYWQodGVtcGxhdGVGaWxlKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgY29uc3QgSUZvbGRJbmZvID0gd2luZG93LmFwcC5mb2xkTWFuYWdlci5sb2FkKHRlbXBsYXRlRmlsZSk7XG4gICAgICAgIHJldHVybiBbY29udGVudHMsIElGb2xkSW5mb107XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHJlYWQgdGhlIGRhaWx5IG5vdGUgdGVtcGxhdGUgJyR7dGVtcGxhdGVQYXRofSdgLCBlcnIpO1xuICAgICAgICBuZXcgb2JzaWRpYW4uTm90aWNlKFwiRmFpbGVkIHRvIHJlYWQgdGhlIGRhaWx5IG5vdGUgdGVtcGxhdGVcIik7XG4gICAgICAgIHJldHVybiBbXCJcIiwgbnVsbF07XG4gICAgfVxufVxuXG4vKipcbiAqIGRhdGVVSUQgaXMgYSB3YXkgb2Ygd2Vla2x5IGlkZW50aWZ5aW5nIGRhaWx5L3dlZWtseS9tb250aGx5IG5vdGVzLlxuICogVGhleSBhcmUgcHJlZml4ZWQgd2l0aCB0aGUgZ3JhbnVsYXJpdHkgdG8gYXZvaWQgYW1iaWd1aXR5LlxuICovXG5mdW5jdGlvbiBnZXREYXRlVUlEKGRhdGUsIGdyYW51bGFyaXR5ID0gXCJkYXlcIikge1xuICAgIGNvbnN0IHRzID0gZGF0ZS5jbG9uZSgpLnN0YXJ0T2YoZ3JhbnVsYXJpdHkpLmZvcm1hdCgpO1xuICAgIHJldHVybiBgJHtncmFudWxhcml0eX0tJHt0c31gO1xufVxuZnVuY3Rpb24gcmVtb3ZlRXNjYXBlZENoYXJhY3RlcnMoZm9ybWF0KSB7XG4gICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC9cXFtbXlxcXV0qXFxdL2csIFwiXCIpOyAvLyByZW1vdmUgZXZlcnl0aGluZyB3aXRoaW4gYnJhY2tldHNcbn1cbi8qKlxuICogWFhYOiBXaGVuIHBhcnNpbmcgZGF0ZXMgdGhhdCBjb250YWluIGJvdGggd2VlayBudW1iZXJzIGFuZCBtb250aHMsXG4gKiBNb21lbnQgY2hvc2VzIHRvIGlnbm9yZSB0aGUgd2VlayBudW1iZXJzLiBGb3IgdGhlIHdlZWsgZGF0ZVVJRCwgd2VcbiAqIHdhbnQgdGhlIG9wcG9zaXRlIGJlaGF2aW9yLiBTdHJpcCB0aGUgTU1NIGZyb20gdGhlIGZvcm1hdCB0byBwYXRjaC5cbiAqL1xuZnVuY3Rpb24gaXNGb3JtYXRBbWJpZ3VvdXMoZm9ybWF0LCBncmFudWxhcml0eSkge1xuICAgIGlmIChncmFudWxhcml0eSA9PT0gXCJ3ZWVrXCIpIHtcbiAgICAgICAgY29uc3QgY2xlYW5Gb3JtYXQgPSByZW1vdmVFc2NhcGVkQ2hhcmFjdGVycyhmb3JtYXQpO1xuICAgICAgICByZXR1cm4gKC93ezEsMn0vaS50ZXN0KGNsZWFuRm9ybWF0KSAmJlxuICAgICAgICAgICAgKC9NezEsNH0vLnRlc3QoY2xlYW5Gb3JtYXQpIHx8IC9EezEsNH0vLnRlc3QoY2xlYW5Gb3JtYXQpKSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGdldERhdGVGcm9tRmlsZShmaWxlLCBncmFudWxhcml0eSkge1xuICAgIHJldHVybiBnZXREYXRlRnJvbUZpbGVuYW1lKGZpbGUuYmFzZW5hbWUsIGdyYW51bGFyaXR5KTtcbn1cbmZ1bmN0aW9uIGdldERhdGVGcm9tUGF0aChwYXRoLCBncmFudWxhcml0eSkge1xuICAgIHJldHVybiBnZXREYXRlRnJvbUZpbGVuYW1lKGJhc2VuYW1lKHBhdGgpLCBncmFudWxhcml0eSk7XG59XG5mdW5jdGlvbiBnZXREYXRlRnJvbUZpbGVuYW1lKGZpbGVuYW1lLCBncmFudWxhcml0eSkge1xuICAgIGNvbnN0IGdldFNldHRpbmdzID0ge1xuICAgICAgICBkYXk6IGdldERhaWx5Tm90ZVNldHRpbmdzLFxuICAgICAgICB3ZWVrOiBnZXRXZWVrbHlOb3RlU2V0dGluZ3MsXG4gICAgICAgIG1vbnRoOiBnZXRNb250aGx5Tm90ZVNldHRpbmdzLFxuICAgICAgICBxdWFydGVyOiBnZXRRdWFydGVybHlOb3RlU2V0dGluZ3MsXG4gICAgICAgIHllYXI6IGdldFllYXJseU5vdGVTZXR0aW5ncyxcbiAgICB9O1xuICAgIGNvbnN0IGZvcm1hdCA9IGdldFNldHRpbmdzW2dyYW51bGFyaXR5XSgpLmZvcm1hdC5zcGxpdChcIi9cIikucG9wKCk7XG4gICAgY29uc3Qgbm90ZURhdGUgPSB3aW5kb3cubW9tZW50KGZpbGVuYW1lLCBmb3JtYXQsIHRydWUpO1xuICAgIGlmICghbm90ZURhdGUuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaXNGb3JtYXRBbWJpZ3VvdXMoZm9ybWF0LCBncmFudWxhcml0eSkpIHtcbiAgICAgICAgaWYgKGdyYW51bGFyaXR5ID09PSBcIndlZWtcIikge1xuICAgICAgICAgICAgY29uc3QgY2xlYW5Gb3JtYXQgPSByZW1vdmVFc2NhcGVkQ2hhcmFjdGVycyhmb3JtYXQpO1xuICAgICAgICAgICAgaWYgKC93ezEsMn0vaS50ZXN0KGNsZWFuRm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cubW9tZW50KGZpbGVuYW1lLCBcbiAgICAgICAgICAgICAgICAvLyBJZiBmb3JtYXQgY29udGFpbnMgd2VlaywgcmVtb3ZlIGRheSAmIG1vbnRoIGZvcm1hdHRpbmdcbiAgICAgICAgICAgICAgICBmb3JtYXQucmVwbGFjZSgvTXsxLDR9L2csIFwiXCIpLnJlcGxhY2UoL0R7MSw0fS9nLCBcIlwiKSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub3RlRGF0ZTtcbn1cblxuY2xhc3MgRGFpbHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBtaW1pY3MgdGhlIGJlaGF2aW9yIG9mIHRoZSBkYWlseS1ub3RlcyBwbHVnaW5cbiAqIHNvIGl0IHdpbGwgcmVwbGFjZSB7e2RhdGV9fSwge3t0aXRsZX19LCBhbmQge3t0aW1lfX0gd2l0aCB0aGVcbiAqIGZvcm1hdHRlZCB0aW1lc3RhbXAuXG4gKlxuICogTm90ZTogaXQgaGFzIGFuIGFkZGVkIGJvbnVzIHRoYXQgaXQncyBub3QgJ3RvZGF5JyBzcGVjaWZpYy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlRGFpbHlOb3RlKGRhdGUpIHtcbiAgICBjb25zdCBhcHAgPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgdmF1bHQgfSA9IGFwcDtcbiAgICBjb25zdCBtb21lbnQgPSB3aW5kb3cubW9tZW50O1xuICAgIGNvbnN0IHsgdGVtcGxhdGUsIGZvcm1hdCwgZm9sZGVyIH0gPSBnZXREYWlseU5vdGVTZXR0aW5ncygpO1xuICAgIGNvbnN0IFt0ZW1wbGF0ZUNvbnRlbnRzLCBJRm9sZEluZm9dID0gYXdhaXQgZ2V0VGVtcGxhdGVJbmZvKHRlbXBsYXRlKTtcbiAgICBjb25zdCBmaWxlbmFtZSA9IGRhdGUuZm9ybWF0KGZvcm1hdCk7XG4gICAgY29uc3Qgbm9ybWFsaXplZFBhdGggPSBhd2FpdCBnZXROb3RlUGF0aChmb2xkZXIsIGZpbGVuYW1lKTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjcmVhdGVkRmlsZSA9IGF3YWl0IHZhdWx0LmNyZWF0ZShub3JtYWxpemVkUGF0aCwgdGVtcGxhdGVDb250ZW50c1xuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKmRhdGVcXHMqfX0vZ2ksIGZpbGVuYW1lKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpbWVcXHMqfX0vZ2ksIG1vbWVudCgpLmZvcm1hdChcIkhIOm1tXCIpKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpdGxlXFxzKn19L2dpLCBmaWxlbmFtZSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyooZGF0ZXx0aW1lKVxccyooKFsrLV1cXGQrKShbeXFtd2Roc10pKT9cXHMqKDouKz8pP319L2dpLCAoXywgX3RpbWVPckRhdGUsIGNhbGMsIHRpbWVEZWx0YSwgdW5pdCwgbW9tZW50Rm9ybWF0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3cgPSBtb21lbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnREYXRlID0gZGF0ZS5jbG9uZSgpLnNldCh7XG4gICAgICAgICAgICAgICAgaG91cjogbm93LmdldChcImhvdXJcIiksXG4gICAgICAgICAgICAgICAgbWludXRlOiBub3cuZ2V0KFwibWludXRlXCIpLFxuICAgICAgICAgICAgICAgIHNlY29uZDogbm93LmdldChcInNlY29uZFwiKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGNhbGMpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZS5hZGQocGFyc2VJbnQodGltZURlbHRhLCAxMCksIHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vbWVudEZvcm1hdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZS5mb3JtYXQobW9tZW50Rm9ybWF0LnN1YnN0cmluZygxKS50cmltKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlLmZvcm1hdChmb3JtYXQpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnllc3RlcmRheVxccyp9fS9naSwgZGF0ZS5jbG9uZSgpLnN1YnRyYWN0KDEsIFwiZGF5XCIpLmZvcm1hdChmb3JtYXQpKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRvbW9ycm93XFxzKn19L2dpLCBkYXRlLmNsb25lKCkuYWRkKDEsIFwiZFwiKS5mb3JtYXQoZm9ybWF0KSkpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBhcHAuZm9sZE1hbmFnZXIuc2F2ZShjcmVhdGVkRmlsZSwgSUZvbGRJbmZvKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZWRGaWxlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBjcmVhdGUgZmlsZTogJyR7bm9ybWFsaXplZFBhdGh9J2AsIGVycik7XG4gICAgICAgIG5ldyBvYnNpZGlhbi5Ob3RpY2UoXCJVbmFibGUgdG8gY3JlYXRlIG5ldyBmaWxlLlwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXREYWlseU5vdGUoZGF0ZSwgZGFpbHlOb3Rlcykge1xuICAgIHJldHVybiBkYWlseU5vdGVzW2dldERhdGVVSUQoZGF0ZSwgXCJkYXlcIildID8/IG51bGw7XG59XG5mdW5jdGlvbiBnZXRBbGxEYWlseU5vdGVzKCkge1xuICAgIC8qKlxuICAgICAqIEZpbmQgYWxsIGRhaWx5IG5vdGVzIGluIHRoZSBkYWlseSBub3RlIGZvbGRlclxuICAgICAqL1xuICAgIGNvbnN0IHsgdmF1bHQgfSA9IHdpbmRvdy5hcHA7XG4gICAgY29uc3QgeyBmb2xkZXIgfSA9IGdldERhaWx5Tm90ZVNldHRpbmdzKCk7XG4gICAgY29uc3QgZGFpbHlOb3Rlc0ZvbGRlciA9IHZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChvYnNpZGlhbi5ub3JtYWxpemVQYXRoKGZvbGRlcikpO1xuICAgIGlmICghZGFpbHlOb3Rlc0ZvbGRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRGFpbHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvcihcIkZhaWxlZCB0byBmaW5kIGRhaWx5IG5vdGVzIGZvbGRlclwiKTtcbiAgICB9XG4gICAgY29uc3QgZGFpbHlOb3RlcyA9IHt9O1xuICAgIG9ic2lkaWFuLlZhdWx0LnJlY3Vyc2VDaGlsZHJlbihkYWlseU5vdGVzRm9sZGVyLCAobm90ZSkgPT4ge1xuICAgICAgICBpZiAobm90ZSBpbnN0YW5jZW9mIG9ic2lkaWFuLlRGaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gZ2V0RGF0ZUZyb21GaWxlKG5vdGUsIFwiZGF5XCIpO1xuICAgICAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlU3RyaW5nID0gZ2V0RGF0ZVVJRChkYXRlLCBcImRheVwiKTtcbiAgICAgICAgICAgICAgICBkYWlseU5vdGVzW2RhdGVTdHJpbmddID0gbm90ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkYWlseU5vdGVzO1xufVxuXG5jbGFzcyBXZWVrbHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcbn1cbmZ1bmN0aW9uIGdldERheXNPZldlZWsoKSB7XG4gICAgY29uc3QgeyBtb21lbnQgfSA9IHdpbmRvdztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGxldCB3ZWVrU3RhcnQgPSBtb21lbnQubG9jYWxlRGF0YSgpLl93ZWVrLmRvdztcbiAgICBjb25zdCBkYXlzT2ZXZWVrID0gW1xuICAgICAgICBcInN1bmRheVwiLFxuICAgICAgICBcIm1vbmRheVwiLFxuICAgICAgICBcInR1ZXNkYXlcIixcbiAgICAgICAgXCJ3ZWRuZXNkYXlcIixcbiAgICAgICAgXCJ0aHVyc2RheVwiLFxuICAgICAgICBcImZyaWRheVwiLFxuICAgICAgICBcInNhdHVyZGF5XCIsXG4gICAgXTtcbiAgICB3aGlsZSAod2Vla1N0YXJ0KSB7XG4gICAgICAgIGRheXNPZldlZWsucHVzaChkYXlzT2ZXZWVrLnNoaWZ0KCkpO1xuICAgICAgICB3ZWVrU3RhcnQtLTtcbiAgICB9XG4gICAgcmV0dXJuIGRheXNPZldlZWs7XG59XG5mdW5jdGlvbiBnZXREYXlPZldlZWtOdW1lcmljYWxWYWx1ZShkYXlPZldlZWtOYW1lKSB7XG4gICAgcmV0dXJuIGdldERheXNPZldlZWsoKS5pbmRleE9mKGRheU9mV2Vla05hbWUudG9Mb3dlckNhc2UoKSk7XG59XG5hc3luYyBmdW5jdGlvbiBjcmVhdGVXZWVrbHlOb3RlKGRhdGUpIHtcbiAgICBjb25zdCB7IHZhdWx0IH0gPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgdGVtcGxhdGUsIGZvcm1hdCwgZm9sZGVyIH0gPSBnZXRXZWVrbHlOb3RlU2V0dGluZ3MoKTtcbiAgICBjb25zdCBbdGVtcGxhdGVDb250ZW50cywgSUZvbGRJbmZvXSA9IGF3YWl0IGdldFRlbXBsYXRlSW5mbyh0ZW1wbGF0ZSk7XG4gICAgY29uc3QgZmlsZW5hbWUgPSBkYXRlLmZvcm1hdChmb3JtYXQpO1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRQYXRoID0gYXdhaXQgZ2V0Tm90ZVBhdGgoZm9sZGVyLCBmaWxlbmFtZSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY3JlYXRlZEZpbGUgPSBhd2FpdCB2YXVsdC5jcmVhdGUobm9ybWFsaXplZFBhdGgsIHRlbXBsYXRlQ29udGVudHNcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyooZGF0ZXx0aW1lKVxccyooKFsrLV1cXGQrKShbeXFtd2Roc10pKT9cXHMqKDouKz8pP319L2dpLCAoXywgX3RpbWVPckRhdGUsIGNhbGMsIHRpbWVEZWx0YSwgdW5pdCwgbW9tZW50Rm9ybWF0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3cgPSB3aW5kb3cubW9tZW50KCk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50RGF0ZSA9IGRhdGUuY2xvbmUoKS5zZXQoe1xuICAgICAgICAgICAgICAgIGhvdXI6IG5vdy5nZXQoXCJob3VyXCIpLFxuICAgICAgICAgICAgICAgIG1pbnV0ZTogbm93LmdldChcIm1pbnV0ZVwiKSxcbiAgICAgICAgICAgICAgICBzZWNvbmQ6IG5vdy5nZXQoXCJzZWNvbmRcIiksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjYWxjKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudERhdGUuYWRkKHBhcnNlSW50KHRpbWVEZWx0YSwgMTApLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb21lbnRGb3JtYXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudERhdGUuZm9ybWF0KG1vbWVudEZvcm1hdC5zdWJzdHJpbmcoMSkudHJpbSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZS5mb3JtYXQoZm9ybWF0KTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyp0aXRsZVxccyp9fS9naSwgZmlsZW5hbWUpXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqdGltZVxccyp9fS9naSwgd2luZG93Lm1vbWVudCgpLmZvcm1hdChcIkhIOm1tXCIpKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKihzdW5kYXl8bW9uZGF5fHR1ZXNkYXl8d2VkbmVzZGF5fHRodXJzZGF5fGZyaWRheXxzYXR1cmRheSlcXHMqOiguKj8pfX0vZ2ksIChfLCBkYXlPZldlZWssIG1vbWVudEZvcm1hdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGF5ID0gZ2V0RGF5T2ZXZWVrTnVtZXJpY2FsVmFsdWUoZGF5T2ZXZWVrKTtcbiAgICAgICAgICAgIHJldHVybiBkYXRlLndlZWtkYXkoZGF5KS5mb3JtYXQobW9tZW50Rm9ybWF0LnRyaW0oKSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgd2luZG93LmFwcC5mb2xkTWFuYWdlci5zYXZlKGNyZWF0ZWRGaWxlLCBJRm9sZEluZm8pO1xuICAgICAgICByZXR1cm4gY3JlYXRlZEZpbGU7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSBmaWxlOiAnJHtub3JtYWxpemVkUGF0aH0nYCwgZXJyKTtcbiAgICAgICAgbmV3IG9ic2lkaWFuLk5vdGljZShcIlVuYWJsZSB0byBjcmVhdGUgbmV3IGZpbGUuXCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFdlZWtseU5vdGUoZGF0ZSwgd2Vla2x5Tm90ZXMpIHtcbiAgICByZXR1cm4gd2Vla2x5Tm90ZXNbZ2V0RGF0ZVVJRChkYXRlLCBcIndlZWtcIildID8/IG51bGw7XG59XG5mdW5jdGlvbiBnZXRBbGxXZWVrbHlOb3RlcygpIHtcbiAgICBjb25zdCB3ZWVrbHlOb3RlcyA9IHt9O1xuICAgIGlmICghYXBwSGFzV2Vla2x5Tm90ZXNQbHVnaW5Mb2FkZWQoKSkge1xuICAgICAgICByZXR1cm4gd2Vla2x5Tm90ZXM7XG4gICAgfVxuICAgIGNvbnN0IHsgdmF1bHQgfSA9IHdpbmRvdy5hcHA7XG4gICAgY29uc3QgeyBmb2xkZXIgfSA9IGdldFdlZWtseU5vdGVTZXR0aW5ncygpO1xuICAgIGNvbnN0IHdlZWtseU5vdGVzRm9sZGVyID0gdmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG9ic2lkaWFuLm5vcm1hbGl6ZVBhdGgoZm9sZGVyKSk7XG4gICAgaWYgKCF3ZWVrbHlOb3Rlc0ZvbGRlcikge1xuICAgICAgICB0aHJvdyBuZXcgV2Vla2x5Tm90ZXNGb2xkZXJNaXNzaW5nRXJyb3IoXCJGYWlsZWQgdG8gZmluZCB3ZWVrbHkgbm90ZXMgZm9sZGVyXCIpO1xuICAgIH1cbiAgICBvYnNpZGlhbi5WYXVsdC5yZWN1cnNlQ2hpbGRyZW4od2Vla2x5Tm90ZXNGb2xkZXIsIChub3RlKSA9PiB7XG4gICAgICAgIGlmIChub3RlIGluc3RhbmNlb2Ygb2JzaWRpYW4uVEZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBnZXREYXRlRnJvbUZpbGUobm90ZSwgXCJ3ZWVrXCIpO1xuICAgICAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlU3RyaW5nID0gZ2V0RGF0ZVVJRChkYXRlLCBcIndlZWtcIik7XG4gICAgICAgICAgICAgICAgd2Vla2x5Tm90ZXNbZGF0ZVN0cmluZ10gPSBub3RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHdlZWtseU5vdGVzO1xufVxuXG5jbGFzcyBNb250aGx5Tm90ZXNGb2xkZXJNaXNzaW5nRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gbWltaWNzIHRoZSBiZWhhdmlvciBvZiB0aGUgZGFpbHktbm90ZXMgcGx1Z2luXG4gKiBzbyBpdCB3aWxsIHJlcGxhY2Uge3tkYXRlfX0sIHt7dGl0bGV9fSwgYW5kIHt7dGltZX19IHdpdGggdGhlXG4gKiBmb3JtYXR0ZWQgdGltZXN0YW1wLlxuICpcbiAqIE5vdGU6IGl0IGhhcyBhbiBhZGRlZCBib251cyB0aGF0IGl0J3Mgbm90ICd0b2RheScgc3BlY2lmaWMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZU1vbnRobHlOb3RlKGRhdGUpIHtcbiAgICBjb25zdCB7IHZhdWx0IH0gPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgdGVtcGxhdGUsIGZvcm1hdCwgZm9sZGVyIH0gPSBnZXRNb250aGx5Tm90ZVNldHRpbmdzKCk7XG4gICAgY29uc3QgW3RlbXBsYXRlQ29udGVudHMsIElGb2xkSW5mb10gPSBhd2FpdCBnZXRUZW1wbGF0ZUluZm8odGVtcGxhdGUpO1xuICAgIGNvbnN0IGZpbGVuYW1lID0gZGF0ZS5mb3JtYXQoZm9ybWF0KTtcbiAgICBjb25zdCBub3JtYWxpemVkUGF0aCA9IGF3YWl0IGdldE5vdGVQYXRoKGZvbGRlciwgZmlsZW5hbWUpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNyZWF0ZWRGaWxlID0gYXdhaXQgdmF1bHQuY3JlYXRlKG5vcm1hbGl6ZWRQYXRoLCB0ZW1wbGF0ZUNvbnRlbnRzXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqKGRhdGV8dGltZSlcXHMqKChbKy1dXFxkKykoW3lxbXdkaHNdKSk/XFxzKig6Lis/KT99fS9naSwgKF8sIF90aW1lT3JEYXRlLCBjYWxjLCB0aW1lRGVsdGEsIHVuaXQsIG1vbWVudEZvcm1hdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gd2luZG93Lm1vbWVudCgpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudERhdGUgPSBkYXRlLmNsb25lKCkuc2V0KHtcbiAgICAgICAgICAgICAgICBob3VyOiBub3cuZ2V0KFwiaG91clwiKSxcbiAgICAgICAgICAgICAgICBtaW51dGU6IG5vdy5nZXQoXCJtaW51dGVcIiksXG4gICAgICAgICAgICAgICAgc2Vjb25kOiBub3cuZ2V0KFwic2Vjb25kXCIpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoY2FsYykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlLmFkZChwYXJzZUludCh0aW1lRGVsdGEsIDEwKSwgdW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9tZW50Rm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlLmZvcm1hdChtb21lbnRGb3JtYXQuc3Vic3RyaW5nKDEpLnRyaW0oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudERhdGUuZm9ybWF0KGZvcm1hdCk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqZGF0ZVxccyp9fS9naSwgZmlsZW5hbWUpXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqdGltZVxccyp9fS9naSwgd2luZG93Lm1vbWVudCgpLmZvcm1hdChcIkhIOm1tXCIpKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpdGxlXFxzKn19L2dpLCBmaWxlbmFtZSkpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB3aW5kb3cuYXBwLmZvbGRNYW5hZ2VyLnNhdmUoY3JlYXRlZEZpbGUsIElGb2xkSW5mbyk7XG4gICAgICAgIHJldHVybiBjcmVhdGVkRmlsZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gY3JlYXRlIGZpbGU6ICcke25vcm1hbGl6ZWRQYXRofSdgLCBlcnIpO1xuICAgICAgICBuZXcgb2JzaWRpYW4uTm90aWNlKFwiVW5hYmxlIHRvIGNyZWF0ZSBuZXcgZmlsZS5cIik7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0TW9udGhseU5vdGUoZGF0ZSwgbW9udGhseU5vdGVzKSB7XG4gICAgcmV0dXJuIG1vbnRobHlOb3Rlc1tnZXREYXRlVUlEKGRhdGUsIFwibW9udGhcIildID8/IG51bGw7XG59XG5mdW5jdGlvbiBnZXRBbGxNb250aGx5Tm90ZXMoKSB7XG4gICAgY29uc3QgbW9udGhseU5vdGVzID0ge307XG4gICAgaWYgKCFhcHBIYXNNb250aGx5Tm90ZXNQbHVnaW5Mb2FkZWQoKSkge1xuICAgICAgICByZXR1cm4gbW9udGhseU5vdGVzO1xuICAgIH1cbiAgICBjb25zdCB7IHZhdWx0IH0gPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgZm9sZGVyIH0gPSBnZXRNb250aGx5Tm90ZVNldHRpbmdzKCk7XG4gICAgY29uc3QgbW9udGhseU5vdGVzRm9sZGVyID0gdmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG9ic2lkaWFuLm5vcm1hbGl6ZVBhdGgoZm9sZGVyKSk7XG4gICAgaWYgKCFtb250aGx5Tm90ZXNGb2xkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1vbnRobHlOb3Rlc0ZvbGRlck1pc3NpbmdFcnJvcihcIkZhaWxlZCB0byBmaW5kIG1vbnRobHkgbm90ZXMgZm9sZGVyXCIpO1xuICAgIH1cbiAgICBvYnNpZGlhbi5WYXVsdC5yZWN1cnNlQ2hpbGRyZW4obW9udGhseU5vdGVzRm9sZGVyLCAobm90ZSkgPT4ge1xuICAgICAgICBpZiAobm90ZSBpbnN0YW5jZW9mIG9ic2lkaWFuLlRGaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gZ2V0RGF0ZUZyb21GaWxlKG5vdGUsIFwibW9udGhcIik7XG4gICAgICAgICAgICBpZiAoZGF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBnZXREYXRlVUlEKGRhdGUsIFwibW9udGhcIik7XG4gICAgICAgICAgICAgICAgbW9udGhseU5vdGVzW2RhdGVTdHJpbmddID0gbm90ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtb250aGx5Tm90ZXM7XG59XG5cbmNsYXNzIFF1YXJ0ZXJseU5vdGVzRm9sZGVyTWlzc2luZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIG1pbWljcyB0aGUgYmVoYXZpb3Igb2YgdGhlIGRhaWx5LW5vdGVzIHBsdWdpblxuICogc28gaXQgd2lsbCByZXBsYWNlIHt7ZGF0ZX19LCB7e3RpdGxlfX0sIGFuZCB7e3RpbWV9fSB3aXRoIHRoZVxuICogZm9ybWF0dGVkIHRpbWVzdGFtcC5cbiAqXG4gKiBOb3RlOiBpdCBoYXMgYW4gYWRkZWQgYm9udXMgdGhhdCBpdCdzIG5vdCAndG9kYXknIHNwZWNpZmljLlxuICovXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVRdWFydGVybHlOb3RlKGRhdGUpIHtcbiAgICBjb25zdCB7IHZhdWx0IH0gPSB3aW5kb3cuYXBwO1xuICAgIGNvbnN0IHsgdGVtcGxhdGUsIGZvcm1hdCwgZm9sZGVyIH0gPSBnZXRRdWFydGVybHlOb3RlU2V0dGluZ3MoKTtcbiAgICBjb25zdCBbdGVtcGxhdGVDb250ZW50cywgSUZvbGRJbmZvXSA9IGF3YWl0IGdldFRlbXBsYXRlSW5mbyh0ZW1wbGF0ZSk7XG4gICAgY29uc3QgZmlsZW5hbWUgPSBkYXRlLmZvcm1hdChmb3JtYXQpO1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRQYXRoID0gYXdhaXQgZ2V0Tm90ZVBhdGgoZm9sZGVyLCBmaWxlbmFtZSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY3JlYXRlZEZpbGUgPSBhd2FpdCB2YXVsdC5jcmVhdGUobm9ybWFsaXplZFBhdGgsIHRlbXBsYXRlQ29udGVudHNcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyooZGF0ZXx0aW1lKVxccyooKFsrLV1cXGQrKShbeXFtd2Roc10pKT9cXHMqKDouKz8pP319L2dpLCAoXywgX3RpbWVPckRhdGUsIGNhbGMsIHRpbWVEZWx0YSwgdW5pdCwgbW9tZW50Rm9ybWF0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3cgPSB3aW5kb3cubW9tZW50KCk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50RGF0ZSA9IGRhdGUuY2xvbmUoKS5zZXQoe1xuICAgICAgICAgICAgICAgIGhvdXI6IG5vdy5nZXQoXCJob3VyXCIpLFxuICAgICAgICAgICAgICAgIG1pbnV0ZTogbm93LmdldChcIm1pbnV0ZVwiKSxcbiAgICAgICAgICAgICAgICBzZWNvbmQ6IG5vdy5nZXQoXCJzZWNvbmRcIiksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjYWxjKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudERhdGUuYWRkKHBhcnNlSW50KHRpbWVEZWx0YSwgMTApLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb21lbnRGb3JtYXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudERhdGUuZm9ybWF0KG1vbWVudEZvcm1hdC5zdWJzdHJpbmcoMSkudHJpbSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZS5mb3JtYXQoZm9ybWF0KTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccypkYXRlXFxzKn19L2dpLCBmaWxlbmFtZSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyp0aW1lXFxzKn19L2dpLCB3aW5kb3cubW9tZW50KCkuZm9ybWF0KFwiSEg6bW1cIikpXG4gICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqdGl0bGVcXHMqfX0vZ2ksIGZpbGVuYW1lKSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHdpbmRvdy5hcHAuZm9sZE1hbmFnZXIuc2F2ZShjcmVhdGVkRmlsZSwgSUZvbGRJbmZvKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZWRGaWxlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBjcmVhdGUgZmlsZTogJyR7bm9ybWFsaXplZFBhdGh9J2AsIGVycik7XG4gICAgICAgIG5ldyBvYnNpZGlhbi5Ob3RpY2UoXCJVbmFibGUgdG8gY3JlYXRlIG5ldyBmaWxlLlwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRRdWFydGVybHlOb3RlKGRhdGUsIHF1YXJ0ZXJseSkge1xuICAgIHJldHVybiBxdWFydGVybHlbZ2V0RGF0ZVVJRChkYXRlLCBcInF1YXJ0ZXJcIildID8/IG51bGw7XG59XG5mdW5jdGlvbiBnZXRBbGxRdWFydGVybHlOb3RlcygpIHtcbiAgICBjb25zdCBxdWFydGVybHkgPSB7fTtcbiAgICBpZiAoIWFwcEhhc1F1YXJ0ZXJseU5vdGVzUGx1Z2luTG9hZGVkKCkpIHtcbiAgICAgICAgcmV0dXJuIHF1YXJ0ZXJseTtcbiAgICB9XG4gICAgY29uc3QgeyB2YXVsdCB9ID0gd2luZG93LmFwcDtcbiAgICBjb25zdCB7IGZvbGRlciB9ID0gZ2V0UXVhcnRlcmx5Tm90ZVNldHRpbmdzKCk7XG4gICAgY29uc3QgcXVhcnRlcmx5Rm9sZGVyID0gdmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG9ic2lkaWFuLm5vcm1hbGl6ZVBhdGgoZm9sZGVyKSk7XG4gICAgaWYgKCFxdWFydGVybHlGb2xkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFF1YXJ0ZXJseU5vdGVzRm9sZGVyTWlzc2luZ0Vycm9yKFwiRmFpbGVkIHRvIGZpbmQgcXVhcnRlcmx5IG5vdGVzIGZvbGRlclwiKTtcbiAgICB9XG4gICAgb2JzaWRpYW4uVmF1bHQucmVjdXJzZUNoaWxkcmVuKHF1YXJ0ZXJseUZvbGRlciwgKG5vdGUpID0+IHtcbiAgICAgICAgaWYgKG5vdGUgaW5zdGFuY2VvZiBvYnNpZGlhbi5URmlsZSkge1xuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IGdldERhdGVGcm9tRmlsZShub3RlLCBcInF1YXJ0ZXJcIik7XG4gICAgICAgICAgICBpZiAoZGF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBnZXREYXRlVUlEKGRhdGUsIFwicXVhcnRlclwiKTtcbiAgICAgICAgICAgICAgICBxdWFydGVybHlbZGF0ZVN0cmluZ10gPSBub3RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHF1YXJ0ZXJseTtcbn1cblxuY2xhc3MgWWVhcmx5Tm90ZXNGb2xkZXJNaXNzaW5nRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gbWltaWNzIHRoZSBiZWhhdmlvciBvZiB0aGUgZGFpbHktbm90ZXMgcGx1Z2luXG4gKiBzbyBpdCB3aWxsIHJlcGxhY2Uge3tkYXRlfX0sIHt7dGl0bGV9fSwgYW5kIHt7dGltZX19IHdpdGggdGhlXG4gKiBmb3JtYXR0ZWQgdGltZXN0YW1wLlxuICpcbiAqIE5vdGU6IGl0IGhhcyBhbiBhZGRlZCBib251cyB0aGF0IGl0J3Mgbm90ICd0b2RheScgc3BlY2lmaWMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVllYXJseU5vdGUoZGF0ZSkge1xuICAgIGNvbnN0IHsgdmF1bHQgfSA9IHdpbmRvdy5hcHA7XG4gICAgY29uc3QgeyB0ZW1wbGF0ZSwgZm9ybWF0LCBmb2xkZXIgfSA9IGdldFllYXJseU5vdGVTZXR0aW5ncygpO1xuICAgIGNvbnN0IFt0ZW1wbGF0ZUNvbnRlbnRzLCBJRm9sZEluZm9dID0gYXdhaXQgZ2V0VGVtcGxhdGVJbmZvKHRlbXBsYXRlKTtcbiAgICBjb25zdCBmaWxlbmFtZSA9IGRhdGUuZm9ybWF0KGZvcm1hdCk7XG4gICAgY29uc3Qgbm9ybWFsaXplZFBhdGggPSBhd2FpdCBnZXROb3RlUGF0aChmb2xkZXIsIGZpbGVuYW1lKTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjcmVhdGVkRmlsZSA9IGF3YWl0IHZhdWx0LmNyZWF0ZShub3JtYWxpemVkUGF0aCwgdGVtcGxhdGVDb250ZW50c1xuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKihkYXRlfHRpbWUpXFxzKigoWystXVxcZCspKFt5cW13ZGhzXSkpP1xccyooOi4rPyk/fX0vZ2ksIChfLCBfdGltZU9yRGF0ZSwgY2FsYywgdGltZURlbHRhLCB1bml0LCBtb21lbnRGb3JtYXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IHdpbmRvdy5tb21lbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnREYXRlID0gZGF0ZS5jbG9uZSgpLnNldCh7XG4gICAgICAgICAgICAgICAgaG91cjogbm93LmdldChcImhvdXJcIiksXG4gICAgICAgICAgICAgICAgbWludXRlOiBub3cuZ2V0KFwibWludXRlXCIpLFxuICAgICAgICAgICAgICAgIHNlY29uZDogbm93LmdldChcInNlY29uZFwiKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGNhbGMpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZS5hZGQocGFyc2VJbnQodGltZURlbHRhLCAxMCksIHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vbWVudEZvcm1hdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZS5mb3JtYXQobW9tZW50Rm9ybWF0LnN1YnN0cmluZygxKS50cmltKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlLmZvcm1hdChmb3JtYXQpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKmRhdGVcXHMqfX0vZ2ksIGZpbGVuYW1lKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpbWVcXHMqfX0vZ2ksIHdpbmRvdy5tb21lbnQoKS5mb3JtYXQoXCJISDptbVwiKSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyp0aXRsZVxccyp9fS9naSwgZmlsZW5hbWUpKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgd2luZG93LmFwcC5mb2xkTWFuYWdlci5zYXZlKGNyZWF0ZWRGaWxlLCBJRm9sZEluZm8pO1xuICAgICAgICByZXR1cm4gY3JlYXRlZEZpbGU7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSBmaWxlOiAnJHtub3JtYWxpemVkUGF0aH0nYCwgZXJyKTtcbiAgICAgICAgbmV3IG9ic2lkaWFuLk5vdGljZShcIlVuYWJsZSB0byBjcmVhdGUgbmV3IGZpbGUuXCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFllYXJseU5vdGUoZGF0ZSwgeWVhcmx5Tm90ZXMpIHtcbiAgICByZXR1cm4geWVhcmx5Tm90ZXNbZ2V0RGF0ZVVJRChkYXRlLCBcInllYXJcIildID8/IG51bGw7XG59XG5mdW5jdGlvbiBnZXRBbGxZZWFybHlOb3RlcygpIHtcbiAgICBjb25zdCB5ZWFybHlOb3RlcyA9IHt9O1xuICAgIGlmICghYXBwSGFzWWVhcmx5Tm90ZXNQbHVnaW5Mb2FkZWQoKSkge1xuICAgICAgICByZXR1cm4geWVhcmx5Tm90ZXM7XG4gICAgfVxuICAgIGNvbnN0IHsgdmF1bHQgfSA9IHdpbmRvdy5hcHA7XG4gICAgY29uc3QgeyBmb2xkZXIgfSA9IGdldFllYXJseU5vdGVTZXR0aW5ncygpO1xuICAgIGNvbnN0IHllYXJseU5vdGVzRm9sZGVyID0gdmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG9ic2lkaWFuLm5vcm1hbGl6ZVBhdGgoZm9sZGVyKSk7XG4gICAgaWYgKCF5ZWFybHlOb3Rlc0ZvbGRlcikge1xuICAgICAgICB0aHJvdyBuZXcgWWVhcmx5Tm90ZXNGb2xkZXJNaXNzaW5nRXJyb3IoXCJGYWlsZWQgdG8gZmluZCB5ZWFybHkgbm90ZXMgZm9sZGVyXCIpO1xuICAgIH1cbiAgICBvYnNpZGlhbi5WYXVsdC5yZWN1cnNlQ2hpbGRyZW4oeWVhcmx5Tm90ZXNGb2xkZXIsIChub3RlKSA9PiB7XG4gICAgICAgIGlmIChub3RlIGluc3RhbmNlb2Ygb2JzaWRpYW4uVEZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBnZXREYXRlRnJvbUZpbGUobm90ZSwgXCJ5ZWFyXCIpO1xuICAgICAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlU3RyaW5nID0gZ2V0RGF0ZVVJRChkYXRlLCBcInllYXJcIik7XG4gICAgICAgICAgICAgICAgeWVhcmx5Tm90ZXNbZGF0ZVN0cmluZ10gPSBub3RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHllYXJseU5vdGVzO1xufVxuXG5mdW5jdGlvbiBhcHBIYXNEYWlseU5vdGVzUGx1Z2luTG9hZGVkKCkge1xuICAgIGNvbnN0IHsgYXBwIH0gPSB3aW5kb3c7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBkYWlseU5vdGVzUGx1Z2luID0gYXBwLmludGVybmFsUGx1Z2lucy5wbHVnaW5zW1wiZGFpbHktbm90ZXNcIl07XG4gICAgaWYgKGRhaWx5Tm90ZXNQbHVnaW4gJiYgZGFpbHlOb3Rlc1BsdWdpbi5lbmFibGVkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IHBlcmlvZGljTm90ZXMgPSBhcHAucGx1Z2lucy5nZXRQbHVnaW4oXCJwZXJpb2RpYy1ub3Rlc1wiKTtcbiAgICByZXR1cm4gcGVyaW9kaWNOb3RlcyAmJiBwZXJpb2RpY05vdGVzLnNldHRpbmdzPy5kYWlseT8uZW5hYmxlZDtcbn1cbi8qKlxuICogWFhYOiBcIldlZWtseSBOb3Rlc1wiIGxpdmUgaW4gZWl0aGVyIHRoZSBDYWxlbmRhciBwbHVnaW4gb3IgdGhlIHBlcmlvZGljLW5vdGVzIHBsdWdpbi5cbiAqIENoZWNrIGJvdGggdW50aWwgdGhlIHdlZWtseSBub3RlcyBmZWF0dXJlIGlzIHJlbW92ZWQgZnJvbSB0aGUgQ2FsZW5kYXIgcGx1Z2luLlxuICovXG5mdW5jdGlvbiBhcHBIYXNXZWVrbHlOb3Rlc1BsdWdpbkxvYWRlZCgpIHtcbiAgICBjb25zdCB7IGFwcCB9ID0gd2luZG93O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgaWYgKGFwcC5wbHVnaW5zLmdldFBsdWdpbihcImNhbGVuZGFyXCIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IHBlcmlvZGljTm90ZXMgPSBhcHAucGx1Z2lucy5nZXRQbHVnaW4oXCJwZXJpb2RpYy1ub3Rlc1wiKTtcbiAgICByZXR1cm4gcGVyaW9kaWNOb3RlcyAmJiBwZXJpb2RpY05vdGVzLnNldHRpbmdzPy53ZWVrbHk/LmVuYWJsZWQ7XG59XG5mdW5jdGlvbiBhcHBIYXNNb250aGx5Tm90ZXNQbHVnaW5Mb2FkZWQoKSB7XG4gICAgY29uc3QgeyBhcHAgfSA9IHdpbmRvdztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IHBlcmlvZGljTm90ZXMgPSBhcHAucGx1Z2lucy5nZXRQbHVnaW4oXCJwZXJpb2RpYy1ub3Rlc1wiKTtcbiAgICByZXR1cm4gcGVyaW9kaWNOb3RlcyAmJiBwZXJpb2RpY05vdGVzLnNldHRpbmdzPy5tb250aGx5Py5lbmFibGVkO1xufVxuZnVuY3Rpb24gYXBwSGFzUXVhcnRlcmx5Tm90ZXNQbHVnaW5Mb2FkZWQoKSB7XG4gICAgY29uc3QgeyBhcHAgfSA9IHdpbmRvdztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IHBlcmlvZGljTm90ZXMgPSBhcHAucGx1Z2lucy5nZXRQbHVnaW4oXCJwZXJpb2RpYy1ub3Rlc1wiKTtcbiAgICByZXR1cm4gcGVyaW9kaWNOb3RlcyAmJiBwZXJpb2RpY05vdGVzLnNldHRpbmdzPy5xdWFydGVybHk/LmVuYWJsZWQ7XG59XG5mdW5jdGlvbiBhcHBIYXNZZWFybHlOb3Rlc1BsdWdpbkxvYWRlZCgpIHtcbiAgICBjb25zdCB7IGFwcCB9ID0gd2luZG93O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcGVyaW9kaWNOb3RlcyA9IGFwcC5wbHVnaW5zLmdldFBsdWdpbihcInBlcmlvZGljLW5vdGVzXCIpO1xuICAgIHJldHVybiBwZXJpb2RpY05vdGVzICYmIHBlcmlvZGljTm90ZXMuc2V0dGluZ3M/LnllYXJseT8uZW5hYmxlZDtcbn1cbmZ1bmN0aW9uIGdldFBlcmlvZGljTm90ZVNldHRpbmdzKGdyYW51bGFyaXR5KSB7XG4gICAgY29uc3QgZ2V0U2V0dGluZ3MgPSB7XG4gICAgICAgIGRheTogZ2V0RGFpbHlOb3RlU2V0dGluZ3MsXG4gICAgICAgIHdlZWs6IGdldFdlZWtseU5vdGVTZXR0aW5ncyxcbiAgICAgICAgbW9udGg6IGdldE1vbnRobHlOb3RlU2V0dGluZ3MsXG4gICAgICAgIHF1YXJ0ZXI6IGdldFF1YXJ0ZXJseU5vdGVTZXR0aW5ncyxcbiAgICAgICAgeWVhcjogZ2V0WWVhcmx5Tm90ZVNldHRpbmdzLFxuICAgIH1bZ3JhbnVsYXJpdHldO1xuICAgIHJldHVybiBnZXRTZXR0aW5ncygpO1xufVxuZnVuY3Rpb24gY3JlYXRlUGVyaW9kaWNOb3RlKGdyYW51bGFyaXR5LCBkYXRlKSB7XG4gICAgY29uc3QgY3JlYXRlRm4gPSB7XG4gICAgICAgIGRheTogY3JlYXRlRGFpbHlOb3RlLFxuICAgICAgICBtb250aDogY3JlYXRlTW9udGhseU5vdGUsXG4gICAgICAgIHdlZWs6IGNyZWF0ZVdlZWtseU5vdGUsXG4gICAgfTtcbiAgICByZXR1cm4gY3JlYXRlRm5bZ3JhbnVsYXJpdHldKGRhdGUpO1xufVxuXG5leHBvcnRzLkRFRkFVTFRfREFJTFlfTk9URV9GT1JNQVQgPSBERUZBVUxUX0RBSUxZX05PVEVfRk9STUFUO1xuZXhwb3J0cy5ERUZBVUxUX01PTlRITFlfTk9URV9GT1JNQVQgPSBERUZBVUxUX01PTlRITFlfTk9URV9GT1JNQVQ7XG5leHBvcnRzLkRFRkFVTFRfUVVBUlRFUkxZX05PVEVfRk9STUFUID0gREVGQVVMVF9RVUFSVEVSTFlfTk9URV9GT1JNQVQ7XG5leHBvcnRzLkRFRkFVTFRfV0VFS0xZX05PVEVfRk9STUFUID0gREVGQVVMVF9XRUVLTFlfTk9URV9GT1JNQVQ7XG5leHBvcnRzLkRFRkFVTFRfWUVBUkxZX05PVEVfRk9STUFUID0gREVGQVVMVF9ZRUFSTFlfTk9URV9GT1JNQVQ7XG5leHBvcnRzLmFwcEhhc0RhaWx5Tm90ZXNQbHVnaW5Mb2FkZWQgPSBhcHBIYXNEYWlseU5vdGVzUGx1Z2luTG9hZGVkO1xuZXhwb3J0cy5hcHBIYXNNb250aGx5Tm90ZXNQbHVnaW5Mb2FkZWQgPSBhcHBIYXNNb250aGx5Tm90ZXNQbHVnaW5Mb2FkZWQ7XG5leHBvcnRzLmFwcEhhc1F1YXJ0ZXJseU5vdGVzUGx1Z2luTG9hZGVkID0gYXBwSGFzUXVhcnRlcmx5Tm90ZXNQbHVnaW5Mb2FkZWQ7XG5leHBvcnRzLmFwcEhhc1dlZWtseU5vdGVzUGx1Z2luTG9hZGVkID0gYXBwSGFzV2Vla2x5Tm90ZXNQbHVnaW5Mb2FkZWQ7XG5leHBvcnRzLmFwcEhhc1llYXJseU5vdGVzUGx1Z2luTG9hZGVkID0gYXBwSGFzWWVhcmx5Tm90ZXNQbHVnaW5Mb2FkZWQ7XG5leHBvcnRzLmNyZWF0ZURhaWx5Tm90ZSA9IGNyZWF0ZURhaWx5Tm90ZTtcbmV4cG9ydHMuY3JlYXRlTW9udGhseU5vdGUgPSBjcmVhdGVNb250aGx5Tm90ZTtcbmV4cG9ydHMuY3JlYXRlUGVyaW9kaWNOb3RlID0gY3JlYXRlUGVyaW9kaWNOb3RlO1xuZXhwb3J0cy5jcmVhdGVRdWFydGVybHlOb3RlID0gY3JlYXRlUXVhcnRlcmx5Tm90ZTtcbmV4cG9ydHMuY3JlYXRlV2Vla2x5Tm90ZSA9IGNyZWF0ZVdlZWtseU5vdGU7XG5leHBvcnRzLmNyZWF0ZVllYXJseU5vdGUgPSBjcmVhdGVZZWFybHlOb3RlO1xuZXhwb3J0cy5nZXRBbGxEYWlseU5vdGVzID0gZ2V0QWxsRGFpbHlOb3RlcztcbmV4cG9ydHMuZ2V0QWxsTW9udGhseU5vdGVzID0gZ2V0QWxsTW9udGhseU5vdGVzO1xuZXhwb3J0cy5nZXRBbGxRdWFydGVybHlOb3RlcyA9IGdldEFsbFF1YXJ0ZXJseU5vdGVzO1xuZXhwb3J0cy5nZXRBbGxXZWVrbHlOb3RlcyA9IGdldEFsbFdlZWtseU5vdGVzO1xuZXhwb3J0cy5nZXRBbGxZZWFybHlOb3RlcyA9IGdldEFsbFllYXJseU5vdGVzO1xuZXhwb3J0cy5nZXREYWlseU5vdGUgPSBnZXREYWlseU5vdGU7XG5leHBvcnRzLmdldERhaWx5Tm90ZVNldHRpbmdzID0gZ2V0RGFpbHlOb3RlU2V0dGluZ3M7XG5leHBvcnRzLmdldERhdGVGcm9tRmlsZSA9IGdldERhdGVGcm9tRmlsZTtcbmV4cG9ydHMuZ2V0RGF0ZUZyb21QYXRoID0gZ2V0RGF0ZUZyb21QYXRoO1xuZXhwb3J0cy5nZXREYXRlVUlEID0gZ2V0RGF0ZVVJRDtcbmV4cG9ydHMuZ2V0TW9udGhseU5vdGUgPSBnZXRNb250aGx5Tm90ZTtcbmV4cG9ydHMuZ2V0TW9udGhseU5vdGVTZXR0aW5ncyA9IGdldE1vbnRobHlOb3RlU2V0dGluZ3M7XG5leHBvcnRzLmdldFBlcmlvZGljTm90ZVNldHRpbmdzID0gZ2V0UGVyaW9kaWNOb3RlU2V0dGluZ3M7XG5leHBvcnRzLmdldFF1YXJ0ZXJseU5vdGUgPSBnZXRRdWFydGVybHlOb3RlO1xuZXhwb3J0cy5nZXRRdWFydGVybHlOb3RlU2V0dGluZ3MgPSBnZXRRdWFydGVybHlOb3RlU2V0dGluZ3M7XG5leHBvcnRzLmdldFRlbXBsYXRlSW5mbyA9IGdldFRlbXBsYXRlSW5mbztcbmV4cG9ydHMuZ2V0V2Vla2x5Tm90ZSA9IGdldFdlZWtseU5vdGU7XG5leHBvcnRzLmdldFdlZWtseU5vdGVTZXR0aW5ncyA9IGdldFdlZWtseU5vdGVTZXR0aW5ncztcbmV4cG9ydHMuZ2V0WWVhcmx5Tm90ZSA9IGdldFllYXJseU5vdGU7XG5leHBvcnRzLmdldFllYXJseU5vdGVTZXR0aW5ncyA9IGdldFllYXJseU5vdGVTZXR0aW5ncztcbiIsICJpbXBvcnQgeyBQbHVnaW4gfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgQnJhdFNldHRpbmdzVGFiIH0gZnJvbSBcIi4vdWkvU2V0dGluZ3NUYWJcIjtcclxuaW1wb3J0IHsgU2V0dGluZ3MsIERFRkFVTFRfU0VUVElOR1MgfSBmcm9tIFwiLi91aS9zZXR0aW5nc1wiO1xyXG5pbXBvcnQgQmV0YVBsdWdpbnMgZnJvbSBcIi4vZmVhdHVyZXMvQmV0YVBsdWdpbnNcIjtcclxuaW1wb3J0IHsgYWRkSWNvbnMgfSBmcm9tIFwiLi91aS9pY29uc1wiO1xyXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwiLi91dGlscy9sb2dnaW5nXCI7XHJcbmltcG9ydCBQbHVnaW5Db21tYW5kcyBmcm9tIFwiLi91aS9QbHVnaW5Db21tYW5kc1wiO1xyXG5pbXBvcnQgeyB0aGVtZXNlQ2hlY2tBbmRVcGRhdGVzIH0gZnJvbSBcIi4vZmVhdHVyZXMvdGhlbWVzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaGVQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdGFwcE5hbWUgPSBcIk9ic2lkaWFuNDIgLSBCZXRhIFJldmlld2VyJ3MgQXV0by11cGRhdGUgVG9vbCAoQlJBVClcIjtcclxuXHRhcHBJRCA9IFwib2JzaWRpYW40Mi1icmF0XCI7XHJcblx0c2V0dGluZ3M6IFNldHRpbmdzO1xyXG5cdGJldGFQbHVnaW5zOiBCZXRhUGx1Z2lucztcclxuXHRyaWJib25JY29uOiBIVE1MRWxlbWVudDtcclxuXHRjb21tYW5kczogUGx1Z2luQ29tbWFuZHM7XHJcblxyXG5cdGFzeW5jIG9ubG9hZCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuXHRcdGNvbnNvbGUubG9nKFwibG9hZGluZyBPYnNpZGlhbjQyIC0gQlJBVFwiKTtcclxuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IEJyYXRTZXR0aW5nc1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG5cclxuXHRcdHRoaXMuYmV0YVBsdWdpbnMgPSBuZXcgQmV0YVBsdWdpbnModGhpcyk7XHJcblx0XHR0aGlzLmNvbW1hbmRzID0gbmV3IFBsdWdpbkNvbW1hbmRzKHRoaXMpO1xyXG5cclxuXHRcdGFkZEljb25zKCk7XHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5yaWJib25JY29uRW5hYmxlZCkgdGhpcy5zaG93UmliYm9uQnV0dG9uKCk7XHJcblxyXG5cdFx0dGhpcy5hcHAud29ya3NwYWNlLm9uTGF5b3V0UmVhZHkoKCk6IHZvaWQgPT4geyAvLyBsZXQgb2JzaWRpYW4gbG9hZCBhbmQgY2FsbSBkb3duIGJlZm9yZSBjaGVja1xyXG5cdFx0XHRpZiAodGhpcy5zZXR0aW5ncy51cGRhdGVBdFN0YXJ0dXApIHsgXHJcblx0XHRcdFx0c2V0VGltZW91dChhc3luYyAoKSA9PiB7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLmJldGFQbHVnaW5zLmNoZWNrRm9yVXBkYXRlc0FuZEluc3RhbGxVcGRhdGVzKGZhbHNlKVxyXG5cdFx0XHRcdH0sIDYwMDAwKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAodGhpcy5zZXR0aW5ncy51cGRhdGVUaGVtZXNBdFN0YXJ0dXApIHsgXHJcblx0XHRcdFx0c2V0VGltZW91dChhc3luYyAoKSA9PiB7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGVtZXNlQ2hlY2tBbmRVcGRhdGVzKHRoaXMsIGZhbHNlKTtcclxuXHRcdFx0XHR9LCAxMjAwMDApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHNob3dSaWJib25CdXR0b24oKTogdm9pZCB7IHRoaXMucmliYm9uSWNvbiA9IHRoaXMuYWRkUmliYm9uSWNvbihcIkJyYXRJY29uXCIsIFwiQlJBVFwiLCBhc3luYyAoKSA9PiB0aGlzLmNvbW1hbmRzLnJpYmJvbkRpc3BsYXlDb21tYW5kcygpKSB9XHJcblxyXG5cdGxvZyh0ZXh0VG9Mb2c6IHN0cmluZywgdmVyYm9zZSA9IGZhbHNlKTogdm9pZCB7IGxvZ2dlcih0aGlzLCB0ZXh0VG9Mb2csIHZlcmJvc2UpIH1cclxuXHRcclxuXHRvbnVubG9hZCgpOiB2b2lkIHsgY29uc29sZS5sb2coXCJ1bmxvYWRpbmcgXCIgKyB0aGlzLmFwcE5hbWUpIH1cclxuXHJcblx0YXN5bmMgbG9hZFNldHRpbmdzKCk6IFByb21pc2U8dm9pZD4geyB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKSB9XHJcblxyXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpOiBQcm9taXNlPHZvaWQ+IHsgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKSB9XHJcbn0iLCAiaW1wb3J0IHsgQXBwLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBUb2dnbGVDb21wb25lbnQsIEJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgdGhlbWVzRGVsZXRlIH0gZnJvbSAnLi4vZmVhdHVyZXMvdGhlbWVzJztcclxuaW1wb3J0IFRoZVBsdWdpbiBmcm9tICcuLi9tYWluJztcclxuaW1wb3J0IEFkZE5ld1RoZW1lIGZyb20gJy4vQWRkTmV3VGhlbWUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJyYXRTZXR0aW5nc1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG5cdHBsdWdpbjogVGhlUGx1Z2luO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBUaGVQbHVnaW4pIHtcclxuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG5cdH1cclxuXHJcblx0ZGlzcGxheSgpOiB2b2lkIHtcclxuXHRcdGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XHJcblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xyXG5cclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogdGhpcy5wbHVnaW4uYXBwTmFtZSB9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ0F1dG8tdXBkYXRlIHBsdWdpbnMgYXQgc3RhcnR1cCcpXHJcblx0XHRcdC5zZXREZXNjKCdJZiBlbmFibGVkIGFsbCBiZXRhIHBsdWdpbnMgd2lsbCBiZSBjaGVja2VkIGZvciB1cGRhdGVzIGVhY2ggdGltZSBPYnNpZGlhbiBzdGFydHMuJylcclxuXHRcdFx0LmFkZFRvZ2dsZSgoY2I6IFRvZ2dsZUNvbXBvbmVudCkgPT4ge1xyXG5cdFx0XHRcdGNiLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnVwZGF0ZUF0U3RhcnR1cCk7XHJcblx0XHRcdFx0Y2Iub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBib29sZWFuKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy51cGRhdGVBdFN0YXJ0dXAgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KVxyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnQXV0by11cGRhdGUgdGhlbWVzIGF0IHN0YXJ0dXAnKVxyXG5cdFx0XHQuc2V0RGVzYygnSWYgZW5hYmxlZCBhbGwgYmV0YSB0aGVtZXMgd2lsbCBiZSBjaGVja2VkIGZvciB1cGRhdGVzIGVhY2ggdGltZSBPYnNpZGlhbiBzdGFydHMuJylcclxuXHRcdFx0LmFkZFRvZ2dsZSgoY2I6IFRvZ2dsZUNvbXBvbmVudCkgPT4ge1xyXG5cdFx0XHRcdGNiLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnVwZGF0ZVRoZW1lc0F0U3RhcnR1cCk7XHJcblx0XHRcdFx0Y2Iub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBib29sZWFuKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy51cGRhdGVUaGVtZXNBdFN0YXJ0dXAgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KVxyXG5cclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1JpYmJvbiBCdXR0b24nKVxyXG5cdFx0XHQuc2V0RGVzYygnVG9nZ2xlIHJpYmJvbiBidXR0b24gb2ZmIGFuZCBvbi4nKVxyXG5cdFx0XHQuYWRkVG9nZ2xlKChjYjogVG9nZ2xlQ29tcG9uZW50KSA9PiB7XHJcblx0XHRcdFx0Y2Iuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucmliYm9uSWNvbkVuYWJsZWQpO1xyXG5cdFx0XHRcdGNiLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYm9vbGVhbikgPT4ge1xyXG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucmliYm9uSWNvbkVuYWJsZWQgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5yaWJib25JY29uRW5hYmxlZCA9PT0gZmFsc2UpXHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnJpYmJvbkljb24ucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNob3dSaWJib25CdXR0b24oKTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KVx0XHRcdFxyXG5cclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaHJcIik7XHJcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbChcImgyXCIsIHsgdGV4dDogXCJCZXRhIFBsdWdpbiBMaXN0XCIgfSk7XHJcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbChcImRpdlwiLCB7IHRleHQ6IGBUaGUgZm9sbG93aW5nIGlzIGEgbGlzdCBvZiBiZXRhIHBsdWdpbnMgYWRkZWQgdmlhIHRoZSBjb21tYW5kIHBhbGV0dGUgXCJBZGQgYSBiZXRhIHBsdWdpbiBmb3IgdGVzdGluZ1wiLiBgIH0pO1xyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoXCJwXCIpO1xyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoXCJkaXZcIiwgeyB0ZXh0OiBgQ2xpY2sgdGhlIHggYnV0dG9uIG5leHQgdG8gYSBwbHVnaW4gdG8gcmVtb3ZlIGl0IGZyb20gdGhlIGxpc3QuYCB9KTtcclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwicFwiKTtcclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwic3BhblwiKVxyXG5cdFx0XHQuY3JlYXRlRWwoXCJiXCIsIHsgdGV4dDogXCJOb3RlOiBcIiB9KVxyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlU3Bhbih7IHRleHQ6IFwiVGhpcyBkb2VzIG5vdCBkZWxldGUgdGhlIHBsdWdpbiwgdGhpcyBzaG91bGQgYmUgZG9uZSBmcm9tIHRoZSAgQ29tbXVuaXR5IFBsdWdpbnMgdGFiIGluIFNldHRpbmdzLlwiIH0pO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuYWRkQnV0dG9uKChjYjogQnV0dG9uQ29tcG9uZW50KT0+e1xyXG5cdFx0XHRcdGNiLnNldEJ1dHRvblRleHQoXCJBZGQgQmV0YSBwbHVnaW5cIilcclxuXHRcdFx0XHRjYi5vbkNsaWNrKGFzeW5jICgpPT57XHJcblx0XHRcdFx0XHQvLyBAdHMtaWdub3JlXHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5hcHAuc2V0dGluZy5jbG9zZSgpO1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uYmV0YVBsdWdpbnMuZGlzcGxheUFkZE5ld1BsdWdpbk1vZGFsKHRydWUpO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdGZvciAoY29uc3QgYnAgb2YgdGhpcy5wbHVnaW4uc2V0dGluZ3MucGx1Z2luTGlzdCkge1xyXG5cdFx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0XHQuc2V0TmFtZShicClcclxuXHRcdFx0XHQuYWRkQnV0dG9uKChidG46IEJ1dHRvbkNvbXBvbmVudCkgPT4ge1xyXG5cdFx0XHRcdFx0YnRuLnNldEljb24oXCJjcm9zc1wiKTtcclxuXHRcdFx0XHRcdGJ0bi5zZXRUb29sdGlwKFwiRGVsZXRlIHRoaXMgYmV0YSBwbHVnaW5cIik7XHJcblx0XHRcdFx0XHRidG4ub25DbGljayhhc3luYyAoKSA9PiB7XHJcblx0XHRcdFx0XHRcdC8vIGF3YWl0IHRoaXMucGx1Z2luLmJldGFQbHVnaW5zLmRlbGV0ZVBsdWdpbihicCk7XHJcblx0XHRcdFx0XHRcdGlmIChidG4uYnV0dG9uRWwudGV4dENvbnRlbnQgPT09IFwiXCIpXHJcblx0XHRcdFx0XHRcdFx0YnRuLnNldEJ1dHRvblRleHQoXCJDbGljayBvbmNlIG1vcmUgdG8gY29uZmlybSByZW1vdmFsXCIpO1xyXG5cdFx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRidG4uYnV0dG9uRWwucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLmJldGFQbHVnaW5zLmRlbGV0ZVBsdWdpbihicClcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSlcclxuXHRcdH1cclxuXHJcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbChcImhyXCIpO1xyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoXCJoMlwiLCB7IHRleHQ6IFwiQmV0YSBUaGVtZXMgTGlzdFwiIH0pO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuYWRkQnV0dG9uKChjYjogQnV0dG9uQ29tcG9uZW50KT0+e1xyXG5cdFx0XHRcdGNiLnNldEJ1dHRvblRleHQoXCJBZGQgQmV0YSBUaGVtZVwiKVxyXG5cdFx0XHRcdGNiLm9uQ2xpY2soYXN5bmMgKCk9PntcclxuXHRcdFx0XHRcdC8vIEB0cy1pZ25vcmVcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLmFwcC5zZXR0aW5nLmNsb3NlKCk7XHJcblx0XHRcdFx0XHQobmV3IEFkZE5ld1RoZW1lKHRoaXMucGx1Z2luKSkub3BlbigpO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH0pO1x0XHRcclxuXHJcblxyXG5cdFx0Zm9yIChjb25zdCBicCBvZiB0aGlzLnBsdWdpbi5zZXR0aW5ncy50aGVtZXNMaXN0KSB7XHJcblx0XHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHRcdC5zZXROYW1lKGJwLnJlcG8pXHJcblx0XHRcdFx0LmFkZEJ1dHRvbigoYnRuOiBCdXR0b25Db21wb25lbnQpID0+IHtcclxuXHRcdFx0XHRcdGJ0bi5zZXRJY29uKFwiY3Jvc3NcIik7XHJcblx0XHRcdFx0XHRidG4uc2V0VG9vbHRpcChcIkRlbGV0ZSB0aGlzIGJldGEgdGhlbWVcIik7XHJcblx0XHRcdFx0XHRidG4ub25DbGljayhhc3luYyAoKSA9PiB7XHJcblx0XHRcdFx0XHRcdGlmIChidG4uYnV0dG9uRWwudGV4dENvbnRlbnQgPT09IFwiXCIpXHJcblx0XHRcdFx0XHRcdFx0YnRuLnNldEJ1dHRvblRleHQoXCJDbGljayBvbmNlIG1vcmUgdG8gY29uZmlybSByZW1vdmFsXCIpO1xyXG5cdFx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRidG4uYnV0dG9uRWwucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0XHRcdGF3YWl0IHRoZW1lc0RlbGV0ZSh0aGlzLnBsdWdpbiwgYnAucmVwbyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0pXHJcblx0XHR9XHJcblxyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoXCJoclwiKTtcclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDJcIiwgeyB0ZXh0OiBcIk1vbml0b3JpbmdcIiB9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ0VuYWJsZSBOb3RpZmljYXRpb25zJylcclxuXHRcdFx0LnNldERlc2MoJ0JSQVQgd2lsbCBwcm92aWRlIHBvcHVwIG5vdGlmaWNhdGlvbnMgZm9yIGl0cyB2YXJpb3VzIGFjdGl2aXRpZXMuIFR1cm4gdGhpcyBvZmYgbWVhbnMgIG5vIG5vdGlmaWNhdGlvbnMgZnJvbSBCUkFULicpXHJcblx0XHRcdC5hZGRUb2dnbGUoKGNiOiBUb2dnbGVDb21wb25lbnQpID0+IHtcclxuXHRcdFx0XHRjYi5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub3RpZmljYXRpb25zRW5hYmxlZCk7XHJcblx0XHRcdFx0Y2Iub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBib29sZWFuKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub3RpZmljYXRpb25zRW5hYmxlZCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0pXHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKCdFbmFibGUgTG9nZ2luZycpXHJcblx0XHRcdC5zZXREZXNjKCdQbHVnaW4gdXBkYXRlcyB3aWxsIGJlIGxvZ2dlZCB0byBhIGZpbGUgaW4gdGhlIGxvZyBmaWxlLicpXHJcblx0XHRcdC5hZGRUb2dnbGUoKGNiOiBUb2dnbGVDb21wb25lbnQpID0+IHtcclxuXHRcdFx0XHRjYi5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5sb2dnaW5nRW5hYmxlZCk7XHJcblx0XHRcdFx0Y2Iub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBib29sZWFuKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5sb2dnaW5nRW5hYmxlZCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0pXHJcblxyXG5cdFx0bmV3IFNldHRpbmcodGhpcy5jb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJCUkFUIExvZyBGaWxlIExvY2F0aW9uXCIpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKFwiTG9ncyB3aWxsIGJlIHNhdmVkIHRvIHRoaXMgZmlsZS4gRG9uJ3QgYWRkIC5tZCB0byB0aGUgZmlsZSBuYW1lLlwiKVxyXG4gICAgICAgICAgICAuYWRkU2VhcmNoKChjYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2Iuc2V0UGxhY2Vob2xkZXIoXCJFeGFtcGxlOiBCUkFULWxvZ1wiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5sb2dnaW5nUGF0aClcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKG5ld19mb2xkZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubG9nZ2luZ1BhdGggPSBuZXdfZm9sZGVyO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHRcdFxyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnRW5hYmxlIFZlcmJvc2UgTG9nZ2luZycpXHJcblx0XHRcdC5zZXREZXNjKCdHZXQgYSBsb3QgIG1vcmUgaW5mb3JtYXRpb24gaW4gIHRoZSBsb2cuJylcclxuXHRcdFx0LmFkZFRvZ2dsZSgoY2I6IFRvZ2dsZUNvbXBvbmVudCkgPT4ge1xyXG5cdFx0XHRcdGNiLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmxvZ2dpbmdWZXJib3NlRW5hYmxlZCk7XHJcblx0XHRcdFx0Y2Iub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBib29sZWFuKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5sb2dnaW5nVmVyYm9zZUVuYWJsZWQgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KVxyXG5cclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ0RlYnVnZ2luZyBNb2RlJylcclxuXHRcdFx0LnNldERlc2MoJ0F0b21pYyBCb21iIGxldmVsIGNvbnNvbGUgbG9nZ2luZy4gQ2FuIGJlIHVzZWQgZm9yIHRyb3VibGVzaG90aW5nIGFuZCBkZXZlbG9wbWVudC4nKVxyXG5cdFx0XHQuYWRkVG9nZ2xlKChjYjogVG9nZ2xlQ29tcG9uZW50KSA9PiB7XHJcblx0XHRcdFx0Y2Iuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVidWdnaW5nTW9kZSk7XHJcblx0XHRcdFx0Y2Iub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBib29sZWFuKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWJ1Z2dpbmdNb2RlID0gdmFsdWU7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSlcdFx0XHRcclxuXHRcclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCB7IG5vcm1hbGl6ZVBhdGgsIE5vdGljZSB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgVGhlUGx1Z2luIGZyb20gXCIuLi9tYWluXCI7XHJcbmltcG9ydCB7IEdlbmVyaWNGdXp6eVN1Z2dlc3RlciwgU3VnZ2VzdGVySXRlbSB9IGZyb20gXCIuLi91aS9HZW5lcmljRnV6enlTdWdnZXN0ZXJcIjtcclxuaW1wb3J0IHsgdXBkYXRlQmV0YVRoZW1lTGFzdFVwZGF0ZURhdGUgfSBmcm9tIFwiLi4vdWkvc2V0dGluZ3NcIjtcclxuaW1wb3J0IHsgZ3JhYkNvbW1tdW5pdHlUaGVtZU9ic2lkaWFuQ3NzLCBncmFiQ29tbW11bml0eVRoZW1lc0xpc3QsIGdyYWJMYXN0Q29tbWl0RGF0ZUZvckFGaWxlIH0gZnJvbSBcIi4vZ2l0aHViVXRpbHNcIjtcclxuaW1wb3J0IHsgVG9hc3RNZXNzYWdlIH0gZnJvbSBcIi4uL3V0aWxzL25vdGlmaWNhdGlvbnNcIjtcclxuaW1wb3J0IHsgaXNDb25uZWN0ZWRUb0ludGVybmV0IH0gZnJvbSBcIi4uL3V0aWxzL2ludGVybmV0Y29ubmVjdGlvblwiO1xyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgcGF0aCB0byB0aGUgdGhlbWVzIGZvbGRlciBmbyBydGhpcyB2YXVsdFxyXG4gKlxyXG4gKiBAcGFyYW0gICB7VGhlUGx1Z2lufSAgcGx1Z2luICBUaFBsdWdpblxyXG4gKlxyXG4gKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgICAgICBwYXRoIHRvIHRoZW1lcyBmb2xkZXJcclxuICovXHJcbmV4cG9ydCBjb25zdCB0aGVtZXNSb290UGF0aCA9IChwbHVnaW46IFRoZVBsdWdpbik6IHN0cmluZyA9PiB7XHJcbiAgICByZXR1cm4gbm9ybWFsaXplUGF0aChwbHVnaW4uYXBwLnZhdWx0LmNvbmZpZ0RpciArIFwiL3RoZW1lc1wiKSArIFwiL1wiO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEluc3RhbGxzIGEgdGhlbWUsIGluY2x1ZGluZyBkb3dubG9hZGluZyBhbmQgcmVnaXN0cmluZyBpdCB3aXRoIEJSQVRcclxuICpcclxuICogQHBhcmFtICAge1RoZVBsdWdpbn0gICAgICAgICAgIHBsdWdpbiAgICAgICAgICAgICAgIFRoZVBsdWdpblxyXG4gKiBAcGFyYW0gICB7c3RyaW5nfSAgICAgICAgICAgICAgY3NzR2l0aHViUmVwb3NpdG9yeSAgVGhlIHJlcG9zaXRvcnkgd2l0aCB0aGUgdGhlbWVcclxuICogQHBhcmFtICAge3VuZGVmaW5lZDxib29sZWFuPn0gIGNzc0ZpbGVOYW1lICAgICAgICAgIG5hbWUgb2YgdGhlIGNzcyBmaWxlIHRoYXQgd2lsbCBiZSBzYXZlZCB0byB0aGUgdGhlbWVzIGZvbGRlciBpbnRoZSB2YXVsdFxyXG4gKlxyXG4gKiBAcmV0dXJuICB7UHJvbWlzZTxib29sZWFuPn0gICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSBmb3Igc3VjY2Nlc3NcclxuICovXHJcbmV4cG9ydCBjb25zdCB0aGVtZUluc3RhbGxUaGVtZSA9IGFzeW5jIChwbHVnaW46IFRoZVBsdWdpbiwgY3NzR2l0aHViUmVwb3NpdG9yeTogc3RyaW5nLCBjc3NGaWxlTmFtZSA9IFwiXCIpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcclxuICAgIGNvbnN0IHRoZW1lQ1NTID0gYXdhaXQgZ3JhYkNvbW1tdW5pdHlUaGVtZU9ic2lkaWFuQ3NzKGNzc0dpdGh1YlJlcG9zaXRvcnkpO1xyXG4gICAgaWYoIXRoZW1lQ1NTKSB7XHJcbiAgICAgICAgVG9hc3RNZXNzYWdlKHBsdWdpbixcIlRoZXJlIGlzIG5vIG9ic2lkaWFuLmNzcyBmaWxlIGluIHRoZSByb290IHBhdGggb2YgdGhpcyByZXBvc2l0b3J5LCBzbyB0aGVyZSBpcyBubyB0aGVtZSB0byBpbnN0YWxsLlwiKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGF3YWl0IHRoZW1lc1NhdmVUaGVtZShwbHVnaW4sIGNzc0ZpbGVOYW1lLCB0aGVtZUNTUyk7XHJcbiAgICBjb25zdCBtc2cgPSBgJHtjc3NGaWxlTmFtZX0gdGhlbWUgaW5zdGFsbGVkIGZyb20gJHtjc3NHaXRodWJSZXBvc2l0b3J5fS4gYDtcclxuICAgIHBsdWdpbi5sb2cobXNnICsgYFtUaGVtZSBJbmZvXShodHRwczovL2dpdGh1Yi5jb20vJHtjc3NHaXRodWJSZXBvc2l0b3J5fSlgLCBmYWxzZSk7XHJcbiAgICBUb2FzdE1lc3NhZ2UocGx1Z2luLGAke21zZ31gLDEwLCBhc3luYyAoKT0+eyB3aW5kb3cub3BlbihgaHR0cHM6Ly9naXRodWIuY29tLyR7Y3NzR2l0aHViUmVwb3NpdG9yeX1gKX0pO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZSAgICAgICAgICAgIFxyXG4gICAgICAgIHBsdWdpbi5hcHAuY3VzdG9tQ3NzLnNldFRoZW1lKGNzc0ZpbGVOYW1lKTtcclxuICAgIH0sIDUwMCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNhdmVzIHRoZSAgdGhlbWUgZmlsZSB0byB0aGUgdmF1bHRcclxuICpcclxuICogQHBhcmFtICAge1RoZVBsdWdpbn0gICAgICBwbHVnaW4gICAgICAgVGhlUGx1Z2luXHJcbiAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgICAgY3NzRmlsZU5hbWUgIGZpbGUgbmFtZSB0byBiZSB1c2VkIGluIHRoZSB0aGVtZXMgZm9sZGVyXHJcbiAqIEBwYXJhbSAgIHtzdHJpbmc8dm9pZD59ICAgY3NzVGV4dCAgICAgIHRoZSBjc3MgZmlsZSBjb250ZW50c1xyXG4gKlxyXG4gKiBAcmV0dXJuICB7UHJvbWlzZTx2b2lkPn0gICAgICAgICAgICAgICBcclxuICovXHJcbmV4cG9ydCBjb25zdCB0aGVtZXNTYXZlVGhlbWUgPSBhc3luYyAocGx1Z2luOiBUaGVQbHVnaW4sIGNzc0ZpbGVOYW1lOiBzdHJpbmcsIGNzc1RleHQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4gPT4ge1xyXG4gICAgY29uc3QgdGhlbWVzVGFyZ2V0Rm9sZGVyUGF0aCA9IHRoZW1lc1Jvb3RQYXRoKHBsdWdpbik7XHJcbiAgICBjb25zdCBhZGFwdGVyID0gcGx1Z2luLmFwcC52YXVsdC5hZGFwdGVyO1xyXG4gICAgaWYgKGF3YWl0IGFkYXB0ZXIuZXhpc3RzKHRoZW1lc1RhcmdldEZvbGRlclBhdGgpID09PSBmYWxzZSkgYXdhaXQgYWRhcHRlci5ta2Rpcih0aGVtZXNUYXJnZXRGb2xkZXJQYXRoKTtcclxuICAgIGF3YWl0IGFkYXB0ZXIud3JpdGUodGhlbWVzVGFyZ2V0Rm9sZGVyUGF0aCArIGNzc0ZpbGVOYW1lICsgXCIuY3NzXCIsIGNzc1RleHQpO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEluc3RhbGwgYSB0aGVtZSBmcm9tIHRoZSBjb21tdW5pdHkgbGlzdC4gdGhpcyBpcyBkb2luZyB0aGUgc2FtZSB0aGluZyBhcyB0aGUgYnVpbHQgaW4gdGhlbWUgaW5zdGFsbGVyIGluIG9ic2lkaWFuLCBidXQgdGhpcyBtYWtlcyBpdCBmYXN0IHRvIGRvIHRocm91Z2ggY29tbWFuZCBwYWxldHRlXHJcbiAqXHJcbiAqIEBwYXJhbSAgIHtUaGVQbHVnaW48dm9pZD59ICBwbHVnaW4gIFRoZVBsdWdpblxyXG4gKlxyXG4gKiBAcmV0dXJuICB7fSAgICAgICAgICAgIFtyZXR1cm4gZGVzY3JpcHRpb25dXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdGhlbWVzSW5zdGFsbEZyb21Db21tdW5pdHlMaXN0ID0gYXN5bmMgKHBsdWdpbjogVGhlUGx1Z2luKTogUHJvbWlzZTx2b2lkPiA9PntcclxuICAgIGNvbnN0IGNvbW11bml0eVRoZW1lID0gYXdhaXQgZ3JhYkNvbW1tdW5pdHlUaGVtZXNMaXN0KCk7XHJcbiAgICBjb25zdCBjb21tdW5pdHlUaGVtZUxpc3Q6IFN1Z2dlc3Rlckl0ZW1bXSA9IE9iamVjdC52YWx1ZXMoY29tbXVuaXR5VGhlbWUpLm1hcCgocCkgPT4geyByZXR1cm4geyBkaXNwbGF5OiBgVGhlbWU6ICR7cC5uYW1lfSAgKCR7cC5yZXBvfSlgLCBpbmZvOiBwIH0gfSk7XHJcbiAgICBjb25zdCBnZnMgPSBuZXcgR2VuZXJpY0Z1enp5U3VnZ2VzdGVyKHBsdWdpbik7XHJcbiAgICBnZnMuc2V0U3VnZ2VzdGVyRGF0YShjb21tdW5pdHlUaGVtZUxpc3QpO1xyXG4gICAgYXdhaXQgZ2ZzLmRpc3BsYXkoYXN5bmMgKHJlc3VsdHMpID0+IHtcclxuICAgICAgICBhd2FpdCB0aGVtZUluc3RhbGxUaGVtZShwbHVnaW4sIHJlc3VsdHMuaW5mby5yZXBvLCByZXN1bHRzLmluZm8ubmFtZSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSBmaWxlIG5hbWUgZm9yIHRoZSB0aGVtZS4gSXQgaXMgYmFzZWQgb24gdGhlIGdpdGh1YiByZXBvc2l0b3J5IHRoZW1lIG5hbWVcclxuICpcclxuICogQHBhcmFtICAge3N0cmluZ30gIGNzc0dpdGh1YlJlcG9zaXRvcnkgIFtjc3NHaXRodWJSZXBvc2l0b3J5IGRlc2NyaXB0aW9uXVxyXG4gKlxyXG4gKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICAgW3JldHVybiBkZXNjcmlwdGlvbl1cclxuICovXHJcbmV4cG9ydCBjb25zdCB0aGVtZXNEZXJpdmVCZXRhTmFtZUZyb21SZXBvc2l0b3J5ID0gKGNzc0dpdGh1YlJlcG9zaXRvcnk6IHN0cmluZyk6IHN0cmluZyA9PiB7XHJcbiAgICBjb25zdCBiZXRhTmFtZSA9IFwiQlJBVC1cIiArIGNzc0dpdGh1YlJlcG9zaXRvcnkucmVwbGFjZShcIi9cIiwgXCItLS0tXCIpO1xyXG4gICAgcmV0dXJuIGJldGFOYW1lLnN1YnN0cigwLCAxMDApO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlbGV0ZXMgYSB0aGVtIGZyb20gdGhlIEJSQVQgbGlzdCBhbmQgYWxzbyB0aGUgcGh5c2ljYWwgdGhlbWUgY3NzIGZpbGUgaW4gdGhlIHZhdWx0XHJcbiAqXHJcbiAqIEBwYXJhbSAgIHtUaGVQbHVnaW59ICBwbHVnaW4gICAgICAgICAgICAgICBUaGVQbHVnaW5cclxuICogQHBhcmFtICAge3N0cmluZ30gICAgIGNzc0dpdGh1YlJlcG9zaXRvcnkgIFJlcG9zaXRvcnkgcGF0aFxyXG4gKlxyXG4gKiBAcmV0dXJuICB7dm9pZH1cclxuICovXHJcbmV4cG9ydCBjb25zdCB0aGVtZXNEZWxldGUgPSBhc3luYyAocGx1Z2luOiBUaGVQbHVnaW4sIGNzc0dpdGh1YlJlcG9zaXRvcnk6IHN0cmluZyk6IFByb21pc2U8dm9pZD4gPT4ge1xyXG4gICAgcGx1Z2luLnNldHRpbmdzLnRoZW1lc0xpc3QgPSBwbHVnaW4uc2V0dGluZ3MudGhlbWVzTGlzdC5maWx0ZXIoKHQpID0+IHQucmVwbyAhPSBjc3NHaXRodWJSZXBvc2l0b3J5KTtcclxuICAgIHBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgIGF3YWl0IHBsdWdpbi5hcHAudmF1bHQuYWRhcHRlci5yZW1vdmUodGhlbWVzUm9vdFBhdGgocGx1Z2luKSArIHRoZW1lc0Rlcml2ZUJldGFOYW1lRnJvbVJlcG9zaXRvcnkoY3NzR2l0aHViUmVwb3NpdG9yeSkgKyBcIi5jc3NcIik7XHJcbiAgICBjb25zdCBtc2cgPSBgUmVtb3ZlZCAke2Nzc0dpdGh1YlJlcG9zaXRvcnl9IGZyb20gQlJBVCB0aGVtZXMgbGlzdCBhbmQgZGVsZXRlZCBmcm9tIHZhdWx0YDtcclxuICAgIHBsdWdpbi5sb2cobXNnLCB0cnVlKTtcclxuICAgIFRvYXN0TWVzc2FnZShwbHVnaW4sIGAke21zZ31gKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyAgaWYgdGhlcmUgIGFyZSB0aGVtZSB1cGRhdGVzIGJhc2VkIG9uIHRoZSBjb21taXQgZGF0ZSBvZiB0aGUgb2JzaWRpYW4uY3NzIGZpbGUgb24gZ2l0aHViIGluIGNvbXBhcmlzb24gdG8gd2hhdCBpcyBzdG9yZWQgaW4gdGhlIEJSQVQgdGhlbWUgbGlzdFxyXG4gKlxyXG4gKiBAcGFyYW0gICB7VGhlUGx1Z2lufSAgICAgIHBsdWdpbiAgICBUaGVQbHVnaW5cclxuICogQHBhcmFtICAge2Jvb2xlYW48dm9pZD59ICBzaG93SW5mbyAgcHJvdmlkZSAgbm90aWNlcyBkdXJpbmcgdGhlIHVwZGF0ZSBwcm9jZXNcclxuICpcclxuICogQHJldHVybiAge1Byb21pc2U8dm9pZD59ICAgICAgICAgICAgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdGhlbWVzZUNoZWNrQW5kVXBkYXRlcyA9IGFzeW5jIChwbHVnaW46IFRoZVBsdWdpbiwgc2hvd0luZm86Ym9vbGVhbik6IFByb21pc2U8dm9pZD4gPT4ge1xyXG4gICAgaWYoYXdhaXQgaXNDb25uZWN0ZWRUb0ludGVybmV0KCk9PT1mYWxzZSkgeyBcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkJSQVQ6IE5vIGludGVybmV0IGRldGVjdGVkLlwiKSBcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgbmV3Tm90aWNlOiBOb3RpY2U7XHJcbiAgICBjb25zdCBtc2cxID0gYENoZWNraW5nIGZvciBiZXRhIHRoZW1lIHVwZGF0ZXMgU1RBUlRFRGA7XHJcbiAgICBwbHVnaW4ubG9nKG1zZzEsIHRydWUpO1xyXG4gICAgaWYgKHNob3dJbmZvICYmIHBsdWdpbi5zZXR0aW5ncy5ub3RpZmljYXRpb25zRW5hYmxlZCkgbmV3Tm90aWNlID0gbmV3IE5vdGljZShgQlJBVFxcbiR7bXNnMX1gLCAzMDAwMCk7XHJcbiAgICBmb3IoY29uc3QgdCBvZiBwbHVnaW4uc2V0dGluZ3MudGhlbWVzTGlzdCkge1xyXG4gICAgICAgIGNvbnN0IGxhc3RVcGRhdGVPbmxpbmUgPSBhd2FpdCBncmFiTGFzdENvbW1pdERhdGVGb3JBRmlsZSh0LnJlcG8sIFwib2JzaWRpYW4uY3NzXCIpO1xyXG4gICAgICAgIGlmKGxhc3RVcGRhdGVPbmxpbmUhPT10Lmxhc3RVcGRhdGUpIFxyXG4gICAgICAgICAgICBhd2FpdCB0aGVtZVVwZGF0ZVRoZW1lKHBsdWdpbiwgdC5yZXBvLCB0Lmxhc3RVcGRhdGUsIGxhc3RVcGRhdGVPbmxpbmUpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbXNnMiA9IGBDaGVja2luZyBmb3IgYmV0YSB0aGVtZSB1cGRhdGVzIENPTVBMRVRFRGA7XHJcbiAgICBwbHVnaW4ubG9nKG1zZzIsIHRydWUpO1xyXG4gICAgaWYgKHNob3dJbmZvKSB7XHJcbiAgICAgICAgaWYocGx1Z2luLnNldHRpbmdzLm5vdGlmaWNhdGlvbnNFbmFibGVkKSBuZXdOb3RpY2UuaGlkZSgpO1xyXG4gICAgICAgIFRvYXN0TWVzc2FnZShwbHVnaW4sIG1zZzIpO1xyXG4gICAgfVxyXG59IFxyXG5cclxuLyoqXHJcbiAqIFVwZGF0ZXMgYSB0aGVtZSBhbHJlYWR5IHJlZ2lzdGVyZWQgIHdpdGggQlJBVFxyXG4gKlxyXG4gKiBAcGFyYW0gICB7VGhlUGx1Z2lufSAgICAgICAgICAgcGx1Z2luICAgICAgICAgICAgICAgVGhlUGx1Z2luXHJcbiAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgICAgICAgICBjc3NHaXRodWJSZXBvc2l0b3J5ICBSZXBvc2l0b3J5IHBhdGhcclxuICogQHBhcmFtICAge1t0eXBlXX0gICAgICAgICAgICAgIG9sZEZpbGVEYXRlICAgICAgICAgIE9sZCBmaWxlIGRhdGUgIGZyb20gdGhlIEJSQVQgdGhlbWUgbGlzdFxyXG4gKiBAcGFyYW0gICB7dW5kZWZpbmVkPGJvb2xlYW4+fSAgbmV3RmlsZURhdGUgICAgICAgICAgbmV3IGRhdGUgdG8gdXNlIGZvciB0aGlzIHVwZGF0ZVxyXG4gKlxyXG4gKiBAcmV0dXJuICB7UHJvbWlzZTxib29sZWFuPn0gICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSBpZiBzdWNjZWVkc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHRoZW1lVXBkYXRlVGhlbWUgPSBhc3luYyAocGx1Z2luOiBUaGVQbHVnaW4sIGNzc0dpdGh1YlJlcG9zaXRvcnk6IHN0cmluZywgb2xkRmlsZURhdGUgPSBcIlwiLCBuZXdGaWxlRGF0ZSA9IFwiXCIpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcclxuICAgIGNvbnN0IHRoZW1lQ1NTID0gYXdhaXQgZ3JhYkNvbW1tdW5pdHlUaGVtZU9ic2lkaWFuQ3NzKGNzc0dpdGh1YlJlcG9zaXRvcnkpO1xyXG4gICAgaWYoIXRoZW1lQ1NTKSB7XHJcbiAgICAgICAgVG9hc3RNZXNzYWdlKHBsdWdpbiwgXCJUaGVyZSBpcyBubyBvYnNpZGlhbi5jc3MgZmlsZSBpbiB0aGUgcm9vdCBwYXRoIG9mIHRoZSAke2Nzc0dpdGh1YlJlcG9zaXRvcnl9IHJlcG9zaXRvcnksIHNvIHRoaXMgdGhlbWUgY2Fubm90IGJlIHVwZGF0ZWQuXCIpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY3NzRmlsZU5hbWUgPSB0aGVtZXNEZXJpdmVCZXRhTmFtZUZyb21SZXBvc2l0b3J5KGNzc0dpdGh1YlJlcG9zaXRvcnkpO1xyXG4gICAgYXdhaXQgdGhlbWVzU2F2ZVRoZW1lKHBsdWdpbiwgY3NzRmlsZU5hbWUsIHRoZW1lQ1NTKTtcclxuICAgIHVwZGF0ZUJldGFUaGVtZUxhc3RVcGRhdGVEYXRlKHBsdWdpbiwgY3NzR2l0aHViUmVwb3NpdG9yeSwgbmV3RmlsZURhdGUpO1xyXG4gICAgY29uc3QgbXNnID0gYCR7Y3NzRmlsZU5hbWV9IHRoZW1lIHVwZGF0ZWQgZnJvbSAke2Nzc0dpdGh1YlJlcG9zaXRvcnl9LiBGcm9tIGRhdGU6ICR7b2xkRmlsZURhdGV9IHRvICR7bmV3RmlsZURhdGV9IGA7XHJcbiAgICBwbHVnaW4ubG9nKG1zZyArIGBbVGhlbWUgSW5mb10oaHR0cHM6Ly9naXRodWIuY29tLyR7Y3NzR2l0aHViUmVwb3NpdG9yeX0pYCwgZmFsc2UpO1xyXG4gICAgVG9hc3RNZXNzYWdlKHBsdWdpbiwgYCR7bXNnfWAsIDIwLCBhc3luYyAoKT0+e3dpbmRvdy5vcGVuKGBodHRwczovL2dpdGh1Yi5jb20vJHtjc3NHaXRodWJSZXBvc2l0b3J5fWApfSAgICk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufSIsICJpbXBvcnQgeyBGdXp6eVN1Z2dlc3RNb2RhbCwgRnV6enlNYXRjaCB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IFRoZVBsdWdpbiBmcm9tICcuLi9tYWluJztcclxuXHJcbi8qKlxyXG4gKiBTaW1wbGUgaW50ZXJmYWNlIGZvciB3aGF0IHNob3VsZCBiZSBkaXNwbGF5ZWQgYW5kIHN0b3JlZCBmb3Igc3VnZ2VzdGVyXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFN1Z2dlc3Rlckl0ZW0ge1xyXG4gICAgZGlzcGxheTogc3RyaW5nLCAgICAgICAgLy8gZGlzcGxheWVkIHRvIHVzZXJcclxuICAgIGluZm86IGFueSAgICAgICAgICAgICAgIC8vIHN1cHBsbWVudGFsIGluZm8gZm9yIHRoZSBjYWxsYmFja1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJpYyBzdWdnZXN0ZXIgZm9yIHF1aWNrIHJldXNlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgR2VuZXJpY0Z1enp5U3VnZ2VzdGVyIGV4dGVuZHMgRnV6enlTdWdnZXN0TW9kYWw8U3VnZ2VzdGVySXRlbT57XHJcbiAgICBkYXRhOiBTdWdnZXN0ZXJJdGVtW107XHJcbiAgICBjYWxsYmFja0Z1bmN0aW9uOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBUaGVQbHVnaW4pIHtcclxuICAgICAgICBzdXBlcihwbHVnaW4uYXBwKTtcclxuICAgICAgICB0aGlzLnNjb3BlLnJlZ2lzdGVyKFtcIlNoaWZ0XCJdLCBcIkVudGVyXCIsIGV2dCA9PiB0aGlzLmVudGVyVHJpZ2dlcihldnQpKTtcclxuICAgICAgICB0aGlzLnNjb3BlLnJlZ2lzdGVyKFtcIkN0cmxcIl0sIFwiRW50ZXJcIiwgZXZ0ID0+IHRoaXMuZW50ZXJUcmlnZ2VyKGV2dCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFN1Z2dlc3RlckRhdGEoc3VnZ2VzdGVyRGF0YTogQXJyYXk8U3VnZ2VzdGVySXRlbT4pOiB2b2lkIHsgdGhpcy5kYXRhID0gc3VnZ2VzdGVyRGF0YSB9XHJcblxyXG4gICAgYXN5bmMgZGlzcGxheShjYWxsQmFjazogKGl0ZW06IFN1Z2dlc3Rlckl0ZW0sIGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpID0+IHZvaWQpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tGdW5jdGlvbiA9IGNhbGxCYWNrO1xyXG4gICAgICAgIHRoaXMub3BlbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEl0ZW1zKCk6IFN1Z2dlc3Rlckl0ZW1bXSB7IHJldHVybiB0aGlzLmRhdGEgfVxyXG5cclxuICAgIGdldEl0ZW1UZXh0KGl0ZW06IFN1Z2dlc3Rlckl0ZW0pOiBzdHJpbmcgeyByZXR1cm4gaXRlbS5kaXNwbGF5IH1cclxuXHJcbiAgICBvbkNob29zZUl0ZW0oKTogdm9pZCB7IHJldHVybiB9IC8vIHJlcXVpcmVkIGJ5IFRTLCBidXQgbm90IHVzaW5nXHJcblxyXG4gICAgcmVuZGVyU3VnZ2VzdGlvbihpdGVtOiBGdXp6eU1hdGNoPFN1Z2dlc3Rlckl0ZW0+LCBlbDogSFRNTEVsZW1lbnQpOiB2b2lkIHsgZWwuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogaXRlbS5pdGVtLmRpc3BsYXkgfSkgfVxyXG5cclxuICAgIGVudGVyVHJpZ2dlcihldnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzZWxlY3RlZFRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnN1Z2dlc3Rpb24taXRlbS5pcy1zZWxlY3RlZCBkaXZcIikudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZGF0YS5maW5kKGkgPT4gaS5kaXNwbGF5ID09PSBzZWxlY3RlZFRleHQpO1xyXG4gICAgICAgIGlmIChpdGVtKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW52b2tlQ2FsbGJhY2soaXRlbSwgZXZ0KTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkNob29zZVN1Z2dlc3Rpb24oaXRlbTogRnV6enlNYXRjaDxTdWdnZXN0ZXJJdGVtPiwgZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCk6IHZvaWQgeyB0aGlzLmludm9rZUNhbGxiYWNrKGl0ZW0uaXRlbSwgZXZ0KSB9XHJcblxyXG4gICAgaW52b2tlQ2FsbGJhY2soaXRlbTogU3VnZ2VzdGVySXRlbSwgZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCk6IHZvaWQgeyB0aGlzLmNhbGxiYWNrRnVuY3Rpb24oaXRlbSwgZXZ0KSB9XHJcbn1cclxuIiwgImltcG9ydCB7IFBsdWdpbk1hbmlmZXN0LCByZXF1ZXN0IH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcblxyXG5jb25zdCBHSVRIVUJfUkFXX1VTRVJDT05URU5UX1BBVEggPSBcImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9cIjtcclxuXHJcbi8qKlxyXG4gKiBwdWxscyBmcm9tIGdpdGh1YiBhIHJlbGVhc2UgZmlsZSBieSBpdHMgdmVyc2lvbiBudW1iZXJcclxuICpcclxuICogQHBhcmFtICAge3N0cmluZ30gICAgICAgICAgIHJlcG9zaXRvcnkgIHBhdGggdG8gR2l0SHViIHJlcG9zaXRvcnkgaW4gZm9ybWF0IFVTRVJOQU1FL3JlcG9zaXRvcnlcclxuICogQHBhcmFtICAge3N0cmluZ30gICAgICAgICAgIHZlcnNpb24gICAgIHZlcnNpb24gb2YgcmVsZWFzZSB0byByZXRyaXZlXHJcbiAqIEBwYXJhbSAgIHtzdHJpbmc8c3RyaW5nPn0gICBmaWxlTmFtZSAgICBuYW1lIG9mIGZpbGUgdG8gcmV0cmlldmUgZnJvbSByZWxlYXNlXHJcbiAqXHJcbiAqIEByZXR1cm4gIHtQcm9taXNlPHN0cmluZz59ICAgICAgICAgICAgICBjb250ZW50cyBvZiBmaWxlIGFzIHN0cmluZyBmcm9tIHRoZSByZXBvc2l0b3J5J3MgcmVsZWFzZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdyYWJSZWxlYXNlRmlsZUZyb21SZXBvc2l0b3J5ID0gYXN5bmMgKHJlcG9zaXRvcnk6IHN0cmluZywgdmVyc2lvbjogc3RyaW5nLCBmaWxlTmFtZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcclxuICAgIGNvbnN0IFVSTCA9IGBodHRwczovL2dpdGh1Yi5jb20vJHtyZXBvc2l0b3J5fS9yZWxlYXNlcy9kb3dubG9hZC8ke3ZlcnNpb259LyR7ZmlsZU5hbWV9YDtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZG93bmxvYWQgPSBhd2FpdCByZXF1ZXN0KHsgdXJsOiBVUkwgfSk7XHJcbiAgICAgICAgcmV0dXJuICgoZG93bmxvYWQgPT09IFwiTm90IEZvdW5kXCIgfHwgZG93bmxvYWQgPT09IGB7XCJlcnJvclwiOlwiTm90IEZvdW5kXCJ9YCkgPyBudWxsIDogZG93bmxvYWQpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yIGluIGdyYWJSZWxlYXNlRmlsZUZyb21SZXBvc2l0b3J5XCIsIFVSTCwgZXJyb3IpXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBncmFicyB0aGUgbWFuaWZlc3QuanNvbiBmcm9tIHRoZSByZXBvc2l0b3J5LiByb290TWFuaWZlc3QgLSBpZiB0cnVlIGdyYWJzIG1hbmlmZXN0Lmpzb24gaWYgZmFsc2UgZ3JhYnMgbWFuaWZlc3QtYmV0YS5qc29uXHJcbiAqXHJcbiAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgcmVwb3NpdG9yeVBhdGggIHBhdGggdG8gR2l0SHViIHJlcG9zaXRvcnkgaW4gZm9ybWF0IFVTRVJOQU1FL3JlcG9zaXRvcnlcclxuICogQHBhcmFtICAge1t0eXBlXX0gICAgICAgICAgICAgICAgICAgICByb290TWFuaWZlc3QgICAgaWYgdHJ1ZSBncmFicyBtYW5pZmVzdC5qc29uIGlmIGZhbHNlIGdyYWJzIG1hbmlmZXN0LWJldGEuanNvblxyXG4gKlxyXG4gKiBAcmV0dXJuICB7UHJvbWlzZTxQbHVnaW5NYW5pZmVzdD59ICAgICAgICAgICAgICAgICAgICByZXR1cm5zIG1hbmlmZXN0IGZpbGUgZm9yICBhIHBsdWdpblxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdyYWJNYW5pZmVzdEpzb25Gcm9tUmVwb3NpdG9yeSA9IGFzeW5jIChyZXBvc2l0b3J5UGF0aDogc3RyaW5nLCByb290TWFuaWZlc3QgPSB0cnVlKTogUHJvbWlzZTxQbHVnaW5NYW5pZmVzdD4gPT4ge1xyXG4gICAgY29uc3QgbWFuaWZlc3RKc29uUGF0aCA9IEdJVEhVQl9SQVdfVVNFUkNPTlRFTlRfUEFUSCArIHJlcG9zaXRvcnlQYXRoICtcclxuICAgICAgICAocm9vdE1hbmlmZXN0ID09PSB0cnVlID8gXCIvSEVBRC9tYW5pZmVzdC5qc29uXCIgOiBcIi9IRUFEL21hbmlmZXN0LWJldGEuanNvblwiKTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KHsgdXJsOiBtYW5pZmVzdEpzb25QYXRoIH0pO1xyXG4gICAgICAgIHJldHVybiAocmVzcG9uc2UgPT09IFwiNDA0OiBOb3QgRm91bmRcIiA/IG51bGwgOiBhd2FpdCBKU09OLnBhcnNlKHJlc3BvbnNlKSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBlcnJvciBpbiBncmFiTWFuaWZlc3RKc29uRnJvbVJlcG9zaXRvcnkgZm9yICR7bWFuaWZlc3RKc29uUGF0aH1gLCBlcnJvcik7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY29uc3QgZ3JhYkNvbW1tdW5pdHlQbHVnaW5MaXN0ID0gYXN5bmMgKCk6IFByb21pc2U8SlNPTj4gPT4ge1xyXG4gICAgY29uc3QgcGx1Z2luTGlzdFVSTCA9IGBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vb2JzaWRpYW5tZC9vYnNpZGlhbi1yZWxlYXNlcy9IRUFEL2NvbW11bml0eS1wbHVnaW5zLmpzb25gO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoeyB1cmw6IHBsdWdpbkxpc3RVUkwgfSk7XHJcbiAgICAgICAgcmV0dXJuIChyZXNwb25zZSA9PT0gXCI0MDQ6IE5vdCBGb3VuZFwiID8gbnVsbCA6IGF3YWl0IEpTT04ucGFyc2UocmVzcG9uc2UpKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciBpbiBncmFiQ29tbW11bml0eVBsdWdpbkxpc3RcIiwgZXJyb3IpXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBncmFiQ29tbW11bml0eVRoZW1lc0xpc3QgPSBhc3luYyAoKTogUHJvbWlzZTxKU09OPiA9PiB7XHJcbiAgICBjb25zdCB0aGVtZXNVUkwgPSBgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29ic2lkaWFubWQvb2JzaWRpYW4tcmVsZWFzZXMvSEVBRC9jb21tdW5pdHktY3NzLXRoZW1lcy5qc29uYDtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KHsgdXJsOiB0aGVtZXNVUkwgfSk7XHJcbiAgICAgICAgcmV0dXJuIChyZXNwb25zZSA9PT0gXCI0MDQ6IE5vdCBGb3VuZFwiID8gbnVsbCA6IGF3YWl0IEpTT04ucGFyc2UocmVzcG9uc2UpKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciBpbiBncmFiQ29tbW11bml0eVRoZW1lc0xpc3RcIiwgZXJyb3IpXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY29uc3QgZ3JhYkNvbW1tdW5pdHlUaGVtZU9ic2lkaWFuQ3NzID0gYXN5bmMgKHJlcG9zaXRvcnlQYXRoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4gPT4ge1xyXG4gICAgY29uc3QgdGhlbWVzVVJMID0gYGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS8ke3JlcG9zaXRvcnlQYXRofS9IRUFEL29ic2lkaWFuLmNzc2A7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdCh7IHVybDogdGhlbWVzVVJMIH0pO1xyXG4gICAgICAgIHJldHVybiAocmVzcG9uc2UgPT09IFwiNDA0OiBOb3QgRm91bmRcIiA/IG51bGwgOiByZXNwb25zZSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3IgaW4gZ3JhYkNvbW1tdW5pdHlUaGVtZXNMaXN0XCIsIGVycm9yKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ3JhYkxhc3RDb21taXRJbmZvRm9yQUZpbGUgPSBhc3luYyAocmVwb3NpdG9yeVBhdGg6IHN0cmluZywgcGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcclxuICAgIGNvbnN0IHVybCA9IGBodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zLyR7cmVwb3NpdG9yeVBhdGh9L2NvbW1pdHM/cGF0aD0ke3BhdGh9JnBhZ2U9MSZwZXJfcGFnZT0xYDtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KHsgdXJsOiB1cmwgfSk7XHJcbiAgICAgICAgcmV0dXJuIChyZXNwb25zZSA9PT0gXCI0MDQ6IE5vdCBGb3VuZFwiID8gbnVsbCA6IEpTT04ucGFyc2UocmVzcG9uc2UpKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciBpbiBncmFiQ29tbW11bml0eVRoZW1lc0xpc3RcIiwgZXJyb3IpXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBncmFiTGFzdENvbW1pdERhdGVGb3JBRmlsZSA9IGFzeW5jIChyZXBvc2l0b3J5UGF0aDogc3RyaW5nLCBwYXRoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4gPT4ge1xyXG4gICAgY29uc3QgdGVzdCA9IGF3YWl0IGdyYWJMYXN0Q29tbWl0SW5mb0ZvckFGaWxlKHJlcG9zaXRvcnlQYXRoLCBwYXRoKTtcclxuICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgaWYodGVzdFswXS5jb21taXQuY29tbWl0dGVyLmRhdGUpe1xyXG4gICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgIHJldHVybiB0ZXN0WzBdLmNvbW1pdC5jb21taXR0ZXIuZGF0ZVxyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG59XHJcbiIsICJpbXBvcnQgeyBncmFiTGFzdENvbW1pdERhdGVGb3JBRmlsZSB9IGZyb20gXCIuLi9mZWF0dXJlcy9naXRodWJVdGlsc1wiO1xyXG5pbXBvcnQgVGhlUGx1Z2luIGZyb20gXCIuLi9tYWluXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRoZW1lSW5mb3JhbXRpb24ge1xyXG4gICAgcmVwbzogc3RyaW5nO1xyXG4gICAgbGFzdFVwZGF0ZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNldHRpbmdzIHtcclxuICAgIHBsdWdpbkxpc3Q6IHN0cmluZ1tdO1xyXG4gICAgdGhlbWVzTGlzdDogVGhlbWVJbmZvcmFtdGlvbltdO1xyXG4gICAgdXBkYXRlQXRTdGFydHVwOiBib29sZWFuO1xyXG4gICAgdXBkYXRlVGhlbWVzQXRTdGFydHVwOiAgYm9vbGVhbjtcclxuICAgIHJpYmJvbkljb25FbmFibGVkOiBib29sZWFuO1xyXG4gICAgbG9nZ2luZ0VuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBsb2dnaW5nUGF0aDogc3RyaW5nO1xyXG4gICAgbG9nZ2luZ1ZlcmJvc2VFbmFibGVkOiBib29sZWFuO1xyXG4gICAgZGVidWdnaW5nTW9kZTogYm9vbGVhbjtcclxuICAgIG5vdGlmaWNhdGlvbnNFbmFibGVkOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogU2V0dGluZ3MgPSB7XHJcbiAgICBwbHVnaW5MaXN0OiBbXSxcclxuICAgIHRoZW1lc0xpc3Q6IFtdLFxyXG4gICAgdXBkYXRlQXRTdGFydHVwOiBmYWxzZSxcclxuICAgIHVwZGF0ZVRoZW1lc0F0U3RhcnR1cDogZmFsc2UsXHJcbiAgICByaWJib25JY29uRW5hYmxlZDogdHJ1ZSxcclxuICAgIGxvZ2dpbmdFbmFibGVkOiBmYWxzZSxcclxuICAgIGxvZ2dpbmdQYXRoOiBcIkJSQVQtbG9nXCIsXHJcbiAgICBsb2dnaW5nVmVyYm9zZUVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgZGVidWdnaW5nTW9kZTogdHJ1ZSxcclxuICAgIG5vdGlmaWNhdGlvbnNFbmFibGVkOiB0cnVlXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIGEgcGx1Z2luIGZvciBiZXRhIHRlc3RpbmcgdG8gdGhlIGRhdGEuanNvbiBmaWxlIG9mIHRoaXMgIHBsdWdpblxyXG4gKlxyXG4gKiBAcGFyYW0gICB7VGhlUGx1Z2lufSAgICAgIHBsdWdpbiAgICAgICAgIFxyXG4gKiBAcGFyYW0gICB7c3RyaW5nPHZvaWQ+fSAgIHJlcG9zaXRvcnlQYXRoICBwYXRoIHRvIHRoZSBHaXRIdWIgcmVwb3NpdG9yeVxyXG4gKlxyXG4gKiBAcmV0dXJuICB7UHJvbWlzZTx2b2lkPn0gICAgICAgICAgICAgICAgICBcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRCZXRhUGx1Z2luVG9MaXN0KHBsdWdpbjogVGhlUGx1Z2luLCByZXBvc2l0b3J5UGF0aDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBpZiAoIXBsdWdpbi5zZXR0aW5ncy5wbHVnaW5MaXN0LmNvbnRhaW5zKHJlcG9zaXRvcnlQYXRoKSkge1xyXG4gICAgICAgIHBsdWdpbi5zZXR0aW5ncy5wbHVnaW5MaXN0LnVuc2hpZnQocmVwb3NpdG9yeVBhdGgpO1xyXG4gICAgICAgIHBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmICBhICBwbHVnaW4gIGlzIGluIGRhdGEuanNvblxyXG4gKlxyXG4gKiBAcGFyYW0gICB7VGhlUGx1Z2lufSAgICAgICAgIHBsdWdpbiAgICAgICAgICBcclxuICogQHBhcmFtICAge3N0cmluZzxib29sZWFuPn0gICByZXBvc2l0b3J5UGF0aCAgcGF0aCB0byB0aGUgR2l0SHViIHJlcG9zaXRvcnlcclxuICpcclxuICogQHJldHVybiAge1Byb21pc2U8Ym9vbGVhbj59ICB0cnVlIGlmIGV4aXN0cyAgICAgIFxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4aXN0QmV0YVBsdWdpbkluTGlzdChwbHVnaW46IFRoZVBsdWdpbiwgcmVwb3NpdG9yeVBhdGg6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuIHBsdWdpbi5zZXR0aW5ncy5wbHVnaW5MaXN0LmNvbnRhaW5zKHJlcG9zaXRvcnlQYXRoKTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBBZGRzIGEgdGhlbWUgZm9yIGJldGEgdGVzdGluZyB0byB0aGUgZGF0YS5qc29uIGZpbGUgb2YgdGhpcyAgcGx1Z2luXHJcbiAqXHJcbiAqIEBwYXJhbSAgIHtUaGVQbHVnaW59ICAgICAgcGx1Z2luICAgICAgICAgXHJcbiAqIEBwYXJhbSAgIHtzdHJpbmc8dm9pZD59ICAgcmVwb3NpdG9yeVBhdGggIHBhdGggdG8gdGhlIEdpdEh1YiByZXBvc2l0b3J5XHJcbiAqXHJcbiAqIEByZXR1cm4gIHtQcm9taXNlPHZvaWQ+fSAgICAgICAgICAgICAgICAgIFxyXG4gKi9cclxuIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRCZXRhVGhlbWVUb0xpc3QocGx1Z2luOiBUaGVQbHVnaW4sIHJlcG9zaXRvcnlQYXRoOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICBjb25zdCBuZXdUaGVtZTogVGhlbWVJbmZvcmFtdGlvbiA9IHsgXHJcbiAgICAgICAgIHJlcG86IHJlcG9zaXRvcnlQYXRoLCBcclxuICAgICAgICAgbGFzdFVwZGF0ZTogYXdhaXQgZ3JhYkxhc3RDb21taXREYXRlRm9yQUZpbGUocmVwb3NpdG9yeVBhdGgsIFwib2JzaWRpYW4uY3NzXCIpXHJcbiAgICB9XHJcbiAgICBwbHVnaW4uc2V0dGluZ3MudGhlbWVzTGlzdC51bnNoaWZ0KG5ld1RoZW1lKTtcclxuICAgIHBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIGEgIHRoZW1lICBpcyBpbiBkYXRhLmpzb25cclxuICpcclxuICogQHBhcmFtICAge1RoZVBsdWdpbn0gICAgICAgICBwbHVnaW4gICAgICAgICAgXHJcbiAqIEBwYXJhbSAgIHtzdHJpbmc8Ym9vbGVhbj59ICAgcmVwb3NpdG9yeVBhdGggIHBhdGggdG8gdGhlIEdpdEh1YiByZXBvc2l0b3J5XHJcbiAqXHJcbiAqIEByZXR1cm4gIHtQcm9taXNlPGJvb2xlYW4+fSAgdHJ1ZSBpZiBleGlzdHMgICAgICBcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGlzdEJldGFUaGVtZWluSW5MaXN0KHBsdWdpbjogVGhlUGx1Z2luLCByZXBvc2l0b3J5UGF0aDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICBjb25zdCB0ZXN0SWZUaGVtRXhpc3RzID0gcGx1Z2luLnNldHRpbmdzLnRoZW1lc0xpc3QuZmluZCh0PT4gdC5yZXBvID09PSByZXBvc2l0b3J5UGF0aCk7XHJcbiAgICByZXR1cm4gdGVzdElmVGhlbUV4aXN0cyA/IHRydWUgOiBmYWxzZTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBVcGRhdGUgdGhlIGxhc3RVcGF0ZSBmaWVsZCBmb3IgdGhlIHRoZW1lXHJcbiAqXHJcbiAqIEBwYXJhbSAgIHtUaGVQbHVnaW59ICAgICAgICAgcGx1Z2luICAgICAgICAgIFxyXG4gKiBAcGFyYW0gICB7c3RyaW5nPGJvb2xlYW4+fSAgIHJlcG9zaXRvcnlQYXRoICBwYXRoIHRvIHRoZSBHaXRIdWIgcmVwb3NpdG9yeVxyXG4gKiBAcGFyYW0gICB7c3RyaW5nPG5ld0RhdGU+fSAgIG5ld0RhdGUgIGxhc3QgdXBkYXRlIGZvciB0aGlzIHRoZW1lXHJcbiAqXHJcbiAqIEByZXR1cm4gIHtQcm9taXNlPGJvb2xlYW4+fSAgdHJ1ZSBpZiBleGlzdHMgICAgICBcclxuICovXHJcbiBleHBvcnQgZnVuY3Rpb24gdXBkYXRlQmV0YVRoZW1lTGFzdFVwZGF0ZURhdGUocGx1Z2luOiBUaGVQbHVnaW4sIHJlcG9zaXRvcnlQYXRoOiBzdHJpbmcsIG5ld0RhdGU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgcGx1Z2luLnNldHRpbmdzLnRoZW1lc0xpc3QuZm9yRWFjaCh0PT57XHJcbiAgICAgICAgaWYodC5yZXBvID09PSByZXBvc2l0b3J5UGF0aCkge1xyXG4gICAgICAgICAgICB0Lmxhc3RVcGRhdGUgPSBuZXdEYXRlO1xyXG4gICAgICAgICAgICBwbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxufVxyXG5cclxuIiwgImltcG9ydCB7IE5vdGljZSB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgVGhlUGx1Z2luIGZyb20gXCIuLi9tYWluXCI7XHJcblxyXG4vKipcclxuICogRGlzcGxheXMgYSBub3RpY2UgdG8gdGhlIHVzZXJcclxuICpcclxuICogQHBhcmFtICAge1RoZVBsdWdpbn0gIHBsdWdpbiAgICAgICAgICAgIFBsdWdpbiBvYmplY3RcclxuICogQHBhcmFtICAge3N0cmluZ30gICAgIG1zZyAgICAgICAgICAgICAgIHRleHQgdG8gZGlzcGxheSB0byB0aGUgdXNlclxyXG4gKiBAcGFyYW0gICB7W3R5cGVdfSAgICAgdmVyYm9zZUxvZ2dpbmdPbiAgVHJ1ZSBpZiBzaG91bGQgb25seSBiZSBsb2dnZWQgaWYgdmVyYm9zZSBsb2dnaW5nIGlzIGVuYWJsZWRcclxuICpcclxuICogQHJldHVybiAge3ZvaWR9ICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIFRvYXN0TWVzc2FnZShwbHVnaW46IFRoZVBsdWdpbiwgbXNnOiBzdHJpbmcsIHRpbWVvdXRJblNlY29uZHMgPSAxMCwgY29udGV4dE1lbnVDYWxsYmFjayA9IG51bGwpOiB2b2lkIHtcclxuICAgIGlmKHBsdWdpbi5zZXR0aW5ncy5ub3RpZmljYXRpb25zRW5hYmxlZD09PWZhbHNlKSByZXR1cm47XHJcbiAgICBjb25zdCBhZGRpdGlvbmFsSW5mbyA9IGNvbnRleHRNZW51Q2FsbGJhY2sgPyBcIihjbGljaz1kaXNtaXNzLCByaWdodC1jbGljaz1JbmZvKVwiIDogXCJcIjtcclxuICAgIGNvbnN0IG5ld05vdGljZTogTm90aWNlID0gbmV3IE5vdGljZShgQlJBVFxcbiR7bXNnfVxcbiR7YWRkaXRpb25hbEluZm99YCwgdGltZW91dEluU2Vjb25kcyoxMDAwKTtcclxuICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgaWYoY29udGV4dE1lbnVDYWxsYmFjaykgbmV3Tm90aWNlLm5vdGljZUVsLm9uY29udGV4dG1lbnUgPSBhc3luYyAoKSA9PiB7IGNvbnRleHRNZW51Q2FsbGJhY2soKSB9O1xyXG59IiwgIlxyXG4vKipcclxuICogVGVzdHMgaWYgdGhlcmUgaXMgYW4gaW50ZXJuZXQgY29ubmVjdGlvblxyXG4gKiBAcmV0dXJucyB0cnVlIGlmIGNvbm5lY3RlZCwgZmFsc2UgaWYgbm8gaW50ZXJuZXRcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpc0Nvbm5lY3RlZFRvSW50ZXJuZXQoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IG9ubGluZSA9IGF3YWl0IGZldGNoKFwiaHR0cHM6Ly9vYnNpZGlhbi5tZC8/XCIgKyBNYXRoLnJhbmRvbSgpKTtcclxuICAgICAgICByZXR1cm4gb25saW5lLnN0YXR1cyA+PSAyMDAgJiYgb25saW5lLnN0YXR1cyA8IDMwMDtcclxuICAgIH0gY2F0Y2goZXJyKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB7IE1vZGFsLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyB0aGVtZUluc3RhbGxUaGVtZSwgdGhlbWVzRGVyaXZlQmV0YU5hbWVGcm9tUmVwb3NpdG9yeSB9IGZyb20gJy4uL2ZlYXR1cmVzL3RoZW1lcyc7XHJcbmltcG9ydCBUaGVQbHVnaW4gZnJvbSAnLi4vbWFpbic7XHJcbmltcG9ydCB7IFRvYXN0TWVzc2FnZSB9IGZyb20gJy4uL3V0aWxzL25vdGlmaWNhdGlvbnMnO1xyXG5pbXBvcnQgeyBhZGRCZXRhVGhlbWVUb0xpc3QsIGV4aXN0QmV0YVRoZW1laW5Jbkxpc3QgfSBmcm9tICcuL3NldHRpbmdzJztcclxuXHJcbi8qKlxyXG4gKiBBZGQgYSBiZXRhIHRoZW1lIHRvIHRoZSBsaXN0IG9mIHBsdWdpbnMgYmVpbmcgdHJhY2tlZCBhbmQgdXBkYXRlZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWRkTmV3VGhlbWUgZXh0ZW5kcyBNb2RhbCB7XHJcbiAgICBwbHVnaW46IFRoZVBsdWdpbjtcclxuICAgIGFkZHJlc3M6IHN0cmluZztcclxuICAgIG9wZW5TZXR0aW5nc1RhYkFmdGVyd2FyZHM6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBUaGVQbHVnaW4sIG9wZW5TZXR0aW5nc1RhYkFmdGVyd2FyZHMgPSBmYWxzZSkge1xyXG4gICAgICAgIHN1cGVyKHBsdWdpbi5hcHApO1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5vcGVuU2V0dGluZ3NUYWJBZnRlcndhcmRzID0gb3BlblNldHRpbmdzVGFiQWZ0ZXJ3YXJkcztcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzdWJtaXRGb3JtKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGlmICh0aGlzLmFkZHJlc3MgPT09IFwiXCIpIHJldHVybjtcclxuICAgICAgICBjb25zdCBzY3J1YmJlZEFkZHJlc3MgPSB0aGlzLmFkZHJlc3MucmVwbGFjZShcImh0dHBzOi8vZ2l0aHViLmNvbS9cIiwgXCJcIik7XHJcbiAgICAgICAgaWYgKGF3YWl0IGV4aXN0QmV0YVRoZW1laW5Jbkxpc3QodGhpcy5wbHVnaW4sIHNjcnViYmVkQWRkcmVzcykpIHtcclxuICAgICAgICAgICAgVG9hc3RNZXNzYWdlKHRoaXMucGx1Z2luLCBgVGhpcyBwbHVnaW4gaXMgYWxyZWFkeSBpbiB0aGUgbGlzdCBmb3IgYmV0YSB0ZXN0aW5nYCwgMTApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGF3YWl0IHRoZW1lSW5zdGFsbFRoZW1lKHRoaXMucGx1Z2luLCBzY3J1YmJlZEFkZHJlc3MsIHRoZW1lc0Rlcml2ZUJldGFOYW1lRnJvbVJlcG9zaXRvcnkoc2NydWJiZWRBZGRyZXNzKSkpIHtcclxuICAgICAgICAgICAgYXdhaXQgYWRkQmV0YVRoZW1lVG9MaXN0KHRoaXMucGx1Z2luLCBzY3J1YmJlZEFkZHJlc3MpO1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7ICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbk9wZW4oKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoJ2g0JywgeyB0ZXh0OiBcIkdpdGh1YiByZXBvc2l0b3J5IGZvciBiZXRhIHRoZW1lOlwiIH0pO1xyXG4gICAgICAgIHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKCdmb3JtJywge30sIChmb3JtRWwpID0+IHtcclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoZm9ybUVsKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHRFbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRFbC5zZXRQbGFjZWhvbGRlcignUmVwb3NpdG9yeSAoZXhhbXBsZTogR2l0dWJVc2VyTmFtZS9yZXBvc2l0b3J5LW5hbWUnKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0RWwub25DaGFuZ2UoKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkcmVzcyA9IHZhbHVlLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0RWwuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgYXN5bmMgKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInICYmIHRoaXMuYWRkcmVzcyAhPT0gJyAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnN1Ym1pdEZvcm0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRFbC5pbnB1dEVsLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2V0dGluZy1pdGVtLWluZm9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aXRsZSkgdGl0bGUucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRFbC5pbnB1dEVsLmZvY3VzKClcclxuICAgICAgICAgICAgICAgICAgICB9LCAxMCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGZvcm1FbC5jcmVhdGVEaXYoJ21vZGFsLWJ1dHRvbi1jb250YWluZXInLCAoYnV0dG9uQ29udGFpbmVyRWwpID0+IHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbkNvbnRhaW5lckVsXHJcbiAgICAgICAgICAgICAgICAgICAgLmNyZWF0ZUVsKCdidXR0b24nLCB7IGF0dHI6IHsgdHlwZTogJ2J1dHRvbicgfSwgdGV4dDogJ05ldmVyIG1pbmQnIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5jbG9zZSgpKTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbkNvbnRhaW5lckVsLmNyZWF0ZUVsKCdidXR0b24nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cjogeyB0eXBlOiAnc3VibWl0JyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNsczogJ21vZC1jdGEnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdBZGQgVGhlbWUnLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gaW52b2tlZCB3aGVuIGJ1dHRvbiBpcyBjbGlja2VkLiBcclxuICAgICAgICAgICAgZm9ybUVsLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGFzeW5jIChlOiBFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWRkcmVzcyAhPT0gJycpIGF3YWl0IHRoaXMuc3VibWl0Rm9ybSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBvbkNsb3NlKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGlmICh0aGlzLm9wZW5TZXR0aW5nc1RhYkFmdGVyd2FyZHMpIHtcclxuICAgICAgICAgICAgYXdhaXQgKHRoaXMucGx1Z2luIGFzIGFueSkuYXBwLnNldHRpbmcub3BlbigpO1xyXG4gICAgICAgICAgICBhd2FpdCAodGhpcy5wbHVnaW4gYXMgYW55KS5hcHAuc2V0dGluZy5vcGVuVGFiQnlJZChcIm9ic2lkaWFuNDItYnJhdFwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59IiwgImltcG9ydCB7IE1vZGFsLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgQmV0YVBsdWdpbnMgZnJvbSAnLi4vZmVhdHVyZXMvQmV0YVBsdWdpbnMnO1xyXG5pbXBvcnQgVGhlUGx1Z2luIGZyb20gJy4uL21haW4nO1xyXG5pbXBvcnQgeyBUb2FzdE1lc3NhZ2UgfSBmcm9tICcuLi91dGlscy9ub3RpZmljYXRpb25zJztcclxuaW1wb3J0IHsgZXhpc3RCZXRhUGx1Z2luSW5MaXN0IH0gZnJvbSAnLi9zZXR0aW5ncyc7XHJcblxyXG4vKipcclxuICogQWRkIGEgYmV0YSBwbHVnaW4gdG8gdGhlIGxpc3Qgb2YgcGx1Z2lucyBiZWluZyB0cmFja2VkIGFuZCB1cGRhdGVkXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBZGROZXdQbHVnaW5Nb2RhbCBleHRlbmRzIE1vZGFsIHtcclxuICAgIHBsdWdpbjogVGhlUGx1Z2luO1xyXG4gICAgYmV0YVBsdWdpbnM6IEJldGFQbHVnaW5zO1xyXG4gICAgYWRkcmVzczogc3RyaW5nO1xyXG4gICAgb3BlblNldHRpbmdzVGFiQWZ0ZXJ3YXJkczogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IFRoZVBsdWdpbiwgYmV0YVBsdWdpbnM6IEJldGFQbHVnaW5zLCBvcGVuU2V0dGluZ3NUYWJBZnRlcndhcmRzID0gZmFsc2UpIHtcclxuICAgICAgICBzdXBlcihwbHVnaW4uYXBwKTtcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgICAgICB0aGlzLmJldGFQbHVnaW5zID0gYmV0YVBsdWdpbnM7XHJcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gXCJcIjtcclxuICAgICAgICB0aGlzLm9wZW5TZXR0aW5nc1RhYkFmdGVyd2FyZHMgPSBvcGVuU2V0dGluZ3NUYWJBZnRlcndhcmRzO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHN1Ym1pdEZvcm0oKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgaWYgKHRoaXMuYWRkcmVzcyA9PT0gXCJcIikgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IHNjcnViYmVkQWRkcmVzcyA9IHRoaXMuYWRkcmVzcy5yZXBsYWNlKFwiaHR0cHM6Ly9naXRodWIuY29tL1wiLFwiXCIpO1xyXG4gICAgICAgIGlmIChhd2FpdCBleGlzdEJldGFQbHVnaW5Jbkxpc3QodGhpcy5wbHVnaW4sIHNjcnViYmVkQWRkcmVzcykpIHtcclxuICAgICAgICAgICAgVG9hc3RNZXNzYWdlKHRoaXMucGx1Z2luLCBgVGhpcyBwbHVnaW4gaXMgYWxyZWFkeSBpbiB0aGUgbGlzdCBmb3IgYmV0YSB0ZXN0aW5nYCwgMTApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuYmV0YVBsdWdpbnMuYWRkUGx1Z2luKHNjcnViYmVkQWRkcmVzcyk7XHJcbiAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uT3BlbigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6IFwiR2l0aHViIHJlcG9zaXRvcnkgZm9yIGJldGEgcGx1Z2luOlwiIH0pO1xyXG4gICAgICAgIHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKCdmb3JtJywge30sIChmb3JtRWwpID0+IHtcclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoZm9ybUVsKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHRFbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRFbC5zZXRQbGFjZWhvbGRlcignUmVwb3NpdG9yeSAoZXhhbXBsZTogVGZUSGFja2VyL29ic2lkaWFuLWJyYXQnKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0RWwub25DaGFuZ2UoKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkcmVzcyA9IHZhbHVlLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0RWwuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgYXN5bmMgKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInICYmIHRoaXMuYWRkcmVzcyAhPT0gJyAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnN1Ym1pdEZvcm0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRFbC5pbnB1dEVsLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2V0dGluZy1pdGVtLWluZm9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aXRsZSkgdGl0bGUucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRFbC5pbnB1dEVsLmZvY3VzKClcclxuICAgICAgICAgICAgICAgICAgICB9LCAxMCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGZvcm1FbC5jcmVhdGVEaXYoJ21vZGFsLWJ1dHRvbi1jb250YWluZXInLCAoYnV0dG9uQ29udGFpbmVyRWwpID0+IHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbkNvbnRhaW5lckVsXHJcbiAgICAgICAgICAgICAgICAgICAgLmNyZWF0ZUVsKCdidXR0b24nLCB7IGF0dHI6IHsgdHlwZTogJ2J1dHRvbicgfSwgdGV4dDogJ05ldmVyIG1pbmQnIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5jbG9zZSgpKTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbkNvbnRhaW5lckVsLmNyZWF0ZUVsKCdidXR0b24nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cjogeyB0eXBlOiAnc3VibWl0JyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNsczogJ21vZC1jdGEnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdBZGQgUGx1Z2luJyxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIGludm9rZWQgd2hlbiBidXR0b24gaXMgY2xpY2tlZC4gXHJcbiAgICAgICAgICAgIGZvcm1FbC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBhc3luYyAoZTogRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFkZHJlc3MgIT09ICcnKSBhd2FpdCB0aGlzLnN1Ym1pdEZvcm0oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGFzeW5jIG9uQ2xvc2UoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgaWYodGhpcy5vcGVuU2V0dGluZ3NUYWJBZnRlcndhcmRzKSB7XHJcbiAgICAgICAgICAgIGF3YWl0ICh0aGlzLnBsdWdpbiBhcyBhbnkpLmFwcC5zZXR0aW5nLm9wZW4oKTtcclxuICAgICAgICAgICAgYXdhaXQgKHRoaXMucGx1Z2luIGFzIGFueSkuYXBwLnNldHRpbmcub3BlblRhYkJ5SWQoXCJvYnNpZGlhbjQyLWJyYXRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxufSIsICJpbXBvcnQgVGhlUGx1Z2luIGZyb20gXCIuLi9tYWluXCI7XHJcbmltcG9ydCBBZGROZXdQbHVnaW5Nb2RhbCBmcm9tIFwiLi4vdWkvQWRkTmV3UGx1Z2luTW9kYWxcIjtcclxuaW1wb3J0IHsgZ3JhYk1hbmlmZXN0SnNvbkZyb21SZXBvc2l0b3J5LCBncmFiUmVsZWFzZUZpbGVGcm9tUmVwb3NpdG9yeSB9IGZyb20gXCIuL2dpdGh1YlV0aWxzXCI7XHJcbmltcG9ydCB7IG5vcm1hbGl6ZVBhdGgsIFBsdWdpbk1hbmlmZXN0LCBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgYWRkQmV0YVBsdWdpblRvTGlzdCB9IGZyb20gXCIuLi91aS9zZXR0aW5nc1wiO1xyXG5pbXBvcnQgeyBUb2FzdE1lc3NhZ2UgfSBmcm9tIFwiLi4vdXRpbHMvbm90aWZpY2F0aW9uc1wiO1xyXG5pbXBvcnQgeyBpc0Nvbm5lY3RlZFRvSW50ZXJuZXQgfSBmcm9tIFwiLi4vdXRpbHMvaW50ZXJuZXRjb25uZWN0aW9uXCI7XHJcblxyXG4vKipcclxuICogYWxsIHRoZSBmaWxlcyBuZWVkZWQgZm9yIGEgcGx1Z2luIGJhc2VkIG9uIHRoZSByZWxlYXNlIGZpbGVzIGFyZSBocmVcclxuICovXHJcbmludGVyZmFjZSBSZWxlYXNlRmlsZXMge1xyXG4gICAgbWFpbkpzOiBzdHJpbmc7XHJcbiAgICBtYW5pZmVzdDogc3RyaW5nO1xyXG4gICAgc3R5bGVzOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQcmltYXJ5IGhhbmRsZXIgZm9yIGFkZGluZywgdXBkYXRpbmcsIGRlbGV0aW5nIGJldGEgcGx1Z2lucyB0cmFja2VkIGJ5IHRoaXMgcGx1Z2luXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCZXRhUGx1Z2lucyB7XHJcbiAgICBwbHVnaW46IFRoZVBsdWdpbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IFRoZVBsdWdpbikge1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogb3BlbnMgdGhlIEFkZE5ld1BsdWdpbk1vZGFsIHRvIGdldCBpbmZvIGZvciAgYSBuZXcgYmV0YSBwbHVnaW5cclxuICAgICAqIEBwYXJhbSAgIHtib29sZWFufSAgIG9wZW5TZXR0aW5nc1RhYkFmdGVyd2FyZHMgd2lsbCBvcGVuIHNldHRpbmdzIHNjcmVlbiBhZnRlcndhcmRzLiBVc2VkIHdoZW4gdGhpcyBjb21tYW5kIGlzIGNhbGxlZCBmcm9tIHNldHRpbmdzIHRhYlxyXG4gICAgICogQHJldHVybiAgezxQcm9taXNlPjx2b2lkPn1cclxuICAgICAqL1xyXG4gICAgYXN5bmMgZGlzcGxheUFkZE5ld1BsdWdpbk1vZGFsKG9wZW5TZXR0aW5nc1RhYkFmdGVyd2FyZHMgPSBmYWxzZSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGNvbnN0IG5ld1BsdWdpbiA9IG5ldyBBZGROZXdQbHVnaW5Nb2RhbCh0aGlzLnBsdWdpbiwgdGhpcywgb3BlblNldHRpbmdzVGFiQWZ0ZXJ3YXJkcyk7XHJcbiAgICAgICAgbmV3UGx1Z2luLm9wZW4oKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFZhbGlkYXRlcyB0aGF0IGEgR2l0SHViIHJlcG9zaXRvcnkgaXMgcGx1Z2luXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtICAge3N0cmluZ30gICAgICAgICAgICAgICAgICAgICByZXBvc2l0b3J5UGF0aCAgIEdpdGh1YlVzZXIvUmVwb3NpdG9yeU5hbWUgKGV4YW1wbGU6IFRmVGhhY2tlci9vYnNpZGlhbjQyLWJyYXQpXHJcbiAgICAgKiBAcGFyYW0gICB7W3R5cGVdfSAgICAgICAgICAgICAgICAgICAgIGdldEJldGFNYW5pZmVzdCAgdGVzdCB0aGUgYmV0YSB2ZXJzaW9uIG9mIHRoZSBtYW5pZmVzdCwgbm90IGF0IHRoZSByb290XHJcbiAgICAgKiBAcGFyYW0gICB7W3R5cGVdfSAgICAgICAgICAgICAgICAgICAgIGZhbHNlICAgICAgICAgICAgW2ZhbHNlIGRlc2NyaXB0aW9uXVxyXG4gICAgICogQHBhcmFtICAge1t0eXBlXX0gICAgICAgICAgICAgICAgICAgICByZXBvcnRJc3N1ZXMgICAgICB3aWxsIGRpc3BsYXkgbm90aWNlcyBhcyBpdCBmaW5kcyBpc3N1ZXNcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuICB7UHJvbWlzZTxQbHVnaW5NYW5pZmVzdD59ICAgICAgICAgICAgICAgICAgICAgdGhlIG1hbmlmZXN0IGZpbGUgaWYgZm91bmQsIG9yIG51bGwgaWYgaXRzIGluY29tcGxldGVcclxuICAgICAqL1xyXG4gICAgYXN5bmMgdmFsaWRhdGVSZXBvc2l0b3J5KHJlcG9zaXRvcnlQYXRoOiBzdHJpbmcsIGdldEJldGFNYW5pZmVzdCA9IGZhbHNlLCByZXBvcnRJc3N1ZXMgPSBmYWxzZSk6IFByb21pc2U8UGx1Z2luTWFuaWZlc3Q+IHtcclxuICAgICAgICBjb25zdCBub3RpY2VUaW1lb3V0ID0gMTU7XHJcbiAgICAgICAgY29uc3QgbWFuaWZlc3RKc29uID0gYXdhaXQgZ3JhYk1hbmlmZXN0SnNvbkZyb21SZXBvc2l0b3J5KHJlcG9zaXRvcnlQYXRoLCAhZ2V0QmV0YU1hbmlmZXN0KTtcclxuICAgICAgICBpZiAoIW1hbmlmZXN0SnNvbikgeyAvLyB0aGlzIGlzIGEgcGx1Z2luIHdpdGggYSBtYW5pZmVzdCBqc29uLCB0cnkgdG8gc2VlIGlmIHRoZXJlIGlzIGEgYmV0YSB2ZXJzaW9uXHJcbiAgICAgICAgICAgIGlmIChyZXBvcnRJc3N1ZXMpIFRvYXN0TWVzc2FnZSh0aGlzLnBsdWdpbiwgYCR7cmVwb3NpdG9yeVBhdGh9XFxuVGhpcyBkb2VzIG5vdCBzZWVtIHRvIGJlIGFuIG9ic2lkaWFuIHBsdWdpbiwgYXMgdGhlcmUgaXMgbm8gbWFuaWZlc3QuanNvbiBmaWxlLmAsIG5vdGljZVRpbWVvdXQpO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVGVzdCB0aGF0IHRoZSBtYWluZmVzdCBoYXMgc29tZSBrZXkgZWxlbWVudHMsIGxpa2UgSUQgYW5kIHZlcnNpb25cclxuICAgICAgICBpZiAoIShcImlkXCIgaW4gbWFuaWZlc3RKc29uKSkgeyAvLyB0aGlzIGlzIGEgcGx1Z2luIHdpdGggYSBtYW5pZmVzdCBqc29uLCB0cnkgdG8gc2VlIGlmIHRoZXJlIGlzIGEgYmV0YSB2ZXJzaW9uXHJcbiAgICAgICAgICAgIGlmIChyZXBvcnRJc3N1ZXMpIFRvYXN0TWVzc2FnZSh0aGlzLnBsdWdpbixgJHtyZXBvc2l0b3J5UGF0aH1cXG5UaGUgcGx1Z2luIGlkIGF0dHJpYnV0ZSBmb3IgdGhlIHJlbGVhc2UgaXMgbWlzc2luZyBmcm9tIHRoZSBtYW5pZmVzdCBmaWxlYCwgbm90aWNlVGltZW91dCk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIShcInZlcnNpb25cIiBpbiBtYW5pZmVzdEpzb24pKSB7IC8vIHRoaXMgaXMgYSBwbHVnaW4gd2l0aCBhIG1hbmlmZXN0IGpzb24sIHRyeSB0byBzZWUgaWYgdGhlcmUgaXMgYSBiZXRhIHZlcnNpb25cclxuICAgICAgICAgICAgaWYgKHJlcG9ydElzc3VlcykgVG9hc3RNZXNzYWdlKHRoaXMucGx1Z2luLGAke3JlcG9zaXRvcnlQYXRofVxcblRoZSB2ZXJzaW9uIGF0dHJpYnV0ZSBmb3IgdGhlIHJlbGVhc2UgaXMgbWlzc2luZyBmcm9tIHRoZSBtYW5pZmVzdCBmaWxlYCwgbm90aWNlVGltZW91dCk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWFuaWZlc3RKc29uO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBhbGwgdGhlIHJlbGVzZSBmaWxlcyBiYXNlZCBvbiB0aGUgdmVyc2lvbiBudW1iZXIgaW4gdGhlIG1hbmlmZXN0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtICAge3N0cmluZ30gICAgICAgICAgICAgICAgICAgICAgICByZXBvc2l0b3J5UGF0aCAgcGF0aCB0byB0aGUgR2l0SHViIHJlcG9zaXRvcnlcclxuICAgICAqIEBwYXJhbSAgIHtQbHVnaW5NYW5pZmVzdDxSZWxlYXNlRmlsZXM+fSAgbWFuaWZlc3QgICAgICAgIG1hbmlmZXN0IGZpbGVcclxuICAgICAqIEBwYXJhbSAgIHtib29sZWFufSAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFuaWZlc3QgICAgIGdyYWIgdGhlIHJlbW90ZSBtYW5pZmVzdCBmaWxlXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiAge1Byb21pc2U8UmVsZWFzZUZpbGVzPn0gICAgICAgICAgICAgICAgICAgICAgICAgYWxsIHJlbGFzZSBmaWxlcyBhcyBzdHJpbmdzIGJhc2VkIG9uIHRoZSBSZWxlYXNlRmlsZXMgaW50ZXJhZmFjZVxyXG4gICAgICovXHJcbiAgICBhc3luYyBnZXRBbGxSZWxlYXNlRmlsZXMocmVwb3NpdG9yeVBhdGg6IHN0cmluZywgbWFuaWZlc3Q6IFBsdWdpbk1hbmlmZXN0LCBnZXRNYW5pZmVzdDogYm9vbGVhbik6IFByb21pc2U8UmVsZWFzZUZpbGVzPiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWFpbkpzOiBhd2FpdCBncmFiUmVsZWFzZUZpbGVGcm9tUmVwb3NpdG9yeShyZXBvc2l0b3J5UGF0aCwgbWFuaWZlc3QudmVyc2lvbiwgXCJtYWluLmpzXCIpLFxyXG4gICAgICAgICAgICBtYW5pZmVzdDogZ2V0TWFuaWZlc3QgPyBhd2FpdCBncmFiUmVsZWFzZUZpbGVGcm9tUmVwb3NpdG9yeShyZXBvc2l0b3J5UGF0aCwgbWFuaWZlc3QudmVyc2lvbiwgXCJtYW5pZmVzdC5qc29uXCIpIDogbnVsbCxcclxuICAgICAgICAgICAgc3R5bGVzOiBhd2FpdCBncmFiUmVsZWFzZUZpbGVGcm9tUmVwb3NpdG9yeShyZXBvc2l0b3J5UGF0aCwgbWFuaWZlc3QudmVyc2lvbiwgXCJzdHlsZXMuY3NzXCIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIHRoZSBwbHVnaW4gcmVsZWFzZSBmaWxlcyB0byB0aGUgbG9jYWwgb2JzaWRpYW4gLnBsdWdpbnMgZm9sZGVyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtICAge3N0cmluZ30gICAgICAgICAgICAgIGJldGFQbHVnaW5JRCAgdGhlIGlkIG9mIHRoZSBwbHVnaW4gKG5vdCB0aGUgcmVwb3NpdG9yeSBwYXRoKVxyXG4gICAgICogQHBhcmFtICAge1JlbGVhc2VGaWxlczx2b2lkPn0gIHJlbEZpbGVzICAgICAgcmVsZWFzZSBmaWxlIGFzIHN0cmluZ3MsIGJhc2VkIG9uIHRoZSBSZWxlYXNlRmlsZXMgaW50ZXJmYWNlXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiAge1Byb21pc2U8dm9pZD59ICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHdyaXRlUmVsZWFzZUZpbGVzVG9QbHVnaW5Gb2xkZXIoYmV0YVBsdWdpbklEOiBzdHJpbmcsIHJlbEZpbGVzOiBSZWxlYXNlRmlsZXMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBwbHVnaW5UYXJnZXRGb2xkZXJQYXRoID0gbm9ybWFsaXplUGF0aCh0aGlzLnBsdWdpbi5hcHAudmF1bHQuY29uZmlnRGlyICsgXCIvcGx1Z2lucy9cIiArIGJldGFQbHVnaW5JRCkgKyBcIi9cIjtcclxuICAgICAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmFkYXB0ZXI7XHJcbiAgICAgICAgaWYgKGF3YWl0IGFkYXB0ZXIuZXhpc3RzKHBsdWdpblRhcmdldEZvbGRlclBhdGgpID09PSBmYWxzZSB8fFxyXG4gICAgICAgICAgICAhKGF3YWl0IGFkYXB0ZXIuZXhpc3RzKHBsdWdpblRhcmdldEZvbGRlclBhdGggKyBcIm1hbmlmZXN0Lmpzb25cIikpKSB7XHJcbiAgICAgICAgICAgIC8vIGlmIHBsdWdpbiBmb2xkZXIgZG9lc250IGV4aXN0IG9yIG1hbmlmZXN0Lmpzb24gZG9lc24ndCBleGlzdCwgY3JlYXRlIGl0IGFuZCBzYXZlIHRoZSBwbHVnaW4gZmlsZXNcclxuICAgICAgICAgICAgYXdhaXQgYWRhcHRlci5ta2RpcihwbHVnaW5UYXJnZXRGb2xkZXJQYXRoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXdhaXQgYWRhcHRlci53cml0ZShwbHVnaW5UYXJnZXRGb2xkZXJQYXRoICsgXCJtYWluLmpzXCIsIHJlbEZpbGVzLm1haW5Kcyk7XHJcbiAgICAgICAgYXdhaXQgYWRhcHRlci53cml0ZShwbHVnaW5UYXJnZXRGb2xkZXJQYXRoICsgXCJtYW5pZmVzdC5qc29uXCIsIHJlbEZpbGVzLm1hbmlmZXN0KTtcclxuICAgICAgICBpZiAocmVsRmlsZXMuc3R5bGVzKSBhd2FpdCBhZGFwdGVyLndyaXRlKHBsdWdpblRhcmdldEZvbGRlclBhdGggKyBcInN0eWxlcy5jc3NcIiwgcmVsRmlsZXMuc3R5bGVzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByaW1hcnkgZnVuY3Rpb24gZm9yIGFkZGluZyBhIG5ldyBiZXRhIHBsdWdpbiB0byBvYnNpZGlhbi4gQWxzbyB0aGlzIGZ1bmN0aW9uIGlzIHVzZSBmb3IgdXBkYXRpbmdcclxuICAgICAqIGV4aXN0aW5nIHBsdWdpbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtICAge3N0cmluZ30gICAgICAgICAgICAgIHJlcG9zaXRvcnlQYXRoICAgICBwYXRoIHRvIEdpdEh1YiByZXBvc2l0b3J5IGZvcm1hdGVkIGFzIFVTRVJOQU1FL3JlcG9zaXRvcnlcclxuICAgICAqIEBwYXJhbSAgIHtib29sZWFufSAgICAgICAgICAgICB1cGRhdGVQbHVnaW5GaWxlcyAgdHJ1ZSBpZiB0aGlzIGlzIGp1c3QgYW4gdXBkYXRlIG5vdCBhbiBpbnN0YWxsXHJcbiAgICAgKiBAcGFyYW0gICB7Ym9vbGVhbn0gICAgICAgICAgICAgc2VlSWZVcGRhdGVkT25seSAgIGlmIHRydWUsIGFuZCB1cGRhdGVQbHVnaW5GaWxlcyB0cnVlLCB3aWxsIGp1c3QgY2hlY2sgZm9yIHVwZGF0ZXMsIGJ1dCBub3QgZG8gdGhlIHVwZGF0ZS4gd2lsbCByZXBvcnQgdG8gdXNlciB0aGF0IHRoZXJlIGlzIGEgbmV3IHBsdWdpblxyXG4gICAgICogQHBhcmFtICAge2Jvb2xlYW59ICAgICAgICAgICAgIHJlcG9ydElmTm90VXBkdGVkICBpZiB0cnVlLCByZXBvcnQgaWYgYW4gdXBkYXRlIGhhcyBub3Qgc3VjY2VkXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiAge1Byb21pc2U8Ym9vbGVhbj59ICAgICAgICAgICAgICAgICAgICAgICB0cnVlIGlmIHN1Y2NlZWRzXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGFkZFBsdWdpbihyZXBvc2l0b3J5UGF0aDogc3RyaW5nLCB1cGRhdGVQbHVnaW5GaWxlcyA9IGZhbHNlLCBzZWVJZlVwZGF0ZWRPbmx5ID0gZmFsc2UsIHJlcG9ydElmTm90VXBkdGVkID0gZmFsc2UpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICBjb25zdCBub3RpY2VUaW1lb3V0ID0gMTA7XHJcbiAgICAgICAgbGV0IHByaW1hcnlNYW5pZmVzdCA9IGF3YWl0IHRoaXMudmFsaWRhdGVSZXBvc2l0b3J5KHJlcG9zaXRvcnlQYXRoLCB0cnVlLCBmYWxzZSk7IC8vIGF0dGVtcHQgdG8gZ2V0IG1hbmlmZXN0LWJldGEuanNvblxyXG4gICAgICAgIGNvbnN0IHVzaW5nQmV0YU1hbmlmZXN0OiBib29sZWFuID0gcHJpbWFyeU1hbmlmZXN0ID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgIGlmICh1c2luZ0JldGFNYW5pZmVzdCA9PT0gZmFsc2UpXHJcbiAgICAgICAgICAgIHByaW1hcnlNYW5pZmVzdCA9IGF3YWl0IHRoaXMudmFsaWRhdGVSZXBvc2l0b3J5KHJlcG9zaXRvcnlQYXRoLCBmYWxzZSwgdHJ1ZSk7IC8vIGF0dGVtcHQgdG8gZ2V0IG1hbmlmZXN0Lmpzb25cclxuXHJcbiAgICAgICAgaWYgKHByaW1hcnlNYW5pZmVzdCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBtc2cgPSBgJHtyZXBvc2l0b3J5UGF0aH1cXG5BIG1hbmlmZXN0Lmpzb24gb3IgbWFuaWZlc3QtYmV0YS5qc29uIGZpbGUgZG9lcyBub3QgZXhpc3QgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoZSByZXBvc2l0b3J5LiBUaGlzIHBsdWdpbiBjYW5ub3QgYmUgaW5zdGFsbGVkLmA7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmxvZyhtc2csIHRydWUpO1xyXG4gICAgICAgICAgICBUb2FzdE1lc3NhZ2UodGhpcy5wbHVnaW4sIGAke21zZ31gLCBub3RpY2VUaW1lb3V0KTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFwcmltYXJ5TWFuaWZlc3QuaGFzT3duUHJvcGVydHkoJ3ZlcnNpb24nKSkge1xyXG4gICAgICAgICAgICBjb25zdCBtc2cgPSBgJHtyZXBvc2l0b3J5UGF0aH1cXG5UaGUgbWFuaWZlc3Qke3VzaW5nQmV0YU1hbmlmZXN0ID8gXCItYmV0YVwiIDogXCJcIn0uanNvbiBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGUgcmVwb3NpdG9yeSBkb2VzIG5vdCBoYXZlIGEgdmVyc2lvbiBudW1iZXIgaW4gdGhlIGZpbGUuIFRoaXMgcGx1Z2luIGNhbm5vdCBiZSBpbnN0YWxsZWQuYDtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4ubG9nKG1zZywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIFRvYXN0TWVzc2FnZSh0aGlzLnBsdWdpbiwgYCR7bXNnfWAsIG5vdGljZVRpbWVvdXQpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBnZXRSZWxlYXNlID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByRmlsZXMgPSBhd2FpdCB0aGlzLmdldEFsbFJlbGVhc2VGaWxlcyhyZXBvc2l0b3J5UGF0aCwgcHJpbWFyeU1hbmlmZXN0LCB1c2luZ0JldGFNYW5pZmVzdCk7XHJcbiAgICAgICAgICAgIGlmICh1c2luZ0JldGFNYW5pZmVzdCB8fCByRmlsZXMubWFuaWZlc3QgPT09IG51bGwpICAvL2lmIGJldGEsIHVzZSB0aGF0IG1hbmlmZXN0LCBvciBpZiB0aGVyZSBpcyBubyBtYW5pZmVzdCBpbiByZWxlYXNlLCB1c2UgdGhlIHByaW1hcnlNYW5pZmVzdFxyXG4gICAgICAgICAgICAgICAgckZpbGVzLm1hbmlmZXN0ID0gSlNPTi5zdHJpbmdpZnkocHJpbWFyeU1hbmlmZXN0KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyRmlsZXMubWFpbkpzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBgJHtyZXBvc2l0b3J5UGF0aH1cXG5UaGUgcmVsZWFzZSBpcyBub3QgY29tcGxldGUgYW5kIGNhbm5vdCBiZSBkb3dubG9hZC4gbWFpbi5qcyBpcyBtaXNzaW5nIGZyb20gdGhlIFJlbGVhc2VgO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4ubG9nKG1zZywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBUb2FzdE1lc3NhZ2UodGhpcy5wbHVnaW4sIGAke21zZ31gLCBub3RpY2VUaW1lb3V0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByRmlsZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodXBkYXRlUGx1Z2luRmlsZXMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlbGVhc2VGaWxlcyA9IGF3YWl0IGdldFJlbGVhc2UoKTtcclxuICAgICAgICAgICAgaWYgKHJlbGVhc2VGaWxlcyA9PT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLndyaXRlUmVsZWFzZUZpbGVzVG9QbHVnaW5Gb2xkZXIocHJpbWFyeU1hbmlmZXN0LmlkLCByZWxlYXNlRmlsZXMpO1xyXG4gICAgICAgICAgICBhd2FpdCBhZGRCZXRhUGx1Z2luVG9MaXN0KHRoaXMucGx1Z2luLCByZXBvc2l0b3J5UGF0aCk7XHJcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5hcHAucGx1Z2lucy5sb2FkTWFuaWZlc3RzKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IGAke3JlcG9zaXRvcnlQYXRofVxcblRoZSBwbHVnaW4gaGFzIGJlZW4gcmVnaXN0ZXJlZCB3aXRoIEJSQVQuIFlvdSBtYXkgc3RpbGwgbmVlZCB0byBlbmFibGUgaXQgdGhlIENvbW11bml0eSBQbHVnaW4gTGlzdC5gO1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5sb2cobXNnLCB0cnVlKTtcclxuICAgICAgICAgICAgVG9hc3RNZXNzYWdlKHRoaXMucGx1Z2luLCBtc2csIG5vdGljZVRpbWVvdXQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHRlc3QgaWYgdGhlIHBsdWdpbiBuZWVkcyB0byBiZSB1cGRhdGVkXHJcbiAgICAgICAgICAgIGNvbnN0IHBsdWdpblRhcmdldEZvbGRlclBhdGggPSB0aGlzLnBsdWdpbi5hcHAudmF1bHQuY29uZmlnRGlyICsgXCIvcGx1Z2lucy9cIiArIHByaW1hcnlNYW5pZmVzdC5pZCArIFwiL1wiO1xyXG4gICAgICAgICAgICBsZXQgbG9jYWxNYW5pZmVzdENvbnRlbnRzID0gbnVsbDtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGxvY2FsTWFuaWZlc3RDb250ZW50cyA9IGF3YWl0IHRoaXMucGx1Z2luLmFwcC52YXVsdC5hZGFwdGVyLnJlYWQocGx1Z2luVGFyZ2V0Rm9sZGVyUGF0aCArIFwibWFuaWZlc3QuanNvblwiKVxyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5lcnJubyA9PT0gLTQwNTgpIHsgLy8gZmlsZSBkb2VzIG5vdCBleGlzdCwgdHJ5IGluc3RhbGxpbmcgdGhlIHBsdWdpblxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkUGx1Z2luKHJlcG9zaXRvcnlQYXRoLCBmYWxzZSwgdXNpbmdCZXRhTWFuaWZlc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBldmVuIHRob3VnaCBmYWlsZWQsIHJldHVybiB0cnVlIHNpbmNlIGluc3RhbGwgd2lsbCBiZSBhdHRlbXB0ZWRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkJSQVQgLSBMb2NhbCBNYW5pZmVzdCBMb2FkXCIsIHByaW1hcnlNYW5pZmVzdC5pZCwgSlNPTi5zdHJpbmdpZnkoZSwgbnVsbCwgMikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsTWFuaWZlc3RKU09OID0gYXdhaXQgSlNPTi5wYXJzZShsb2NhbE1hbmlmZXN0Q29udGVudHMpO1xyXG4gICAgICAgICAgICBpZiAobG9jYWxNYW5pZmVzdEpTT04udmVyc2lvbiAhPT0gcHJpbWFyeU1hbmlmZXN0LnZlcnNpb24pIHsgLy9tYW5pZmVzdCBmaWxlcyBhcmUgbm90IHRoZSBzYW1lLCBkbyBhbiB1cGRhdGVcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlbGVhc2VGaWxlcyA9IGF3YWl0IGdldFJlbGVhc2UoKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZWxlYXNlRmlsZXMgPT09IG51bGwpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VlSWZVcGRhdGVkT25seSkgeyAvLyBkb250IHVwZGF0ZSwganVzdCByZXBvcnQgaXRcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBgVGhlcmUgaXMgYW4gdXBkYXRlIGF2YWlsYWJsZSBmb3IgJHtwcmltYXJ5TWFuaWZlc3QuaWR9IGZyb20gdmVyc2lvbiAke2xvY2FsTWFuaWZlc3RKU09OLnZlcnNpb259IHRvICR7cHJpbWFyeU1hbmlmZXN0LnZlcnNpb259LiBgO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmxvZyhtc2cgKyBgW1JlbGVhc2UgSW5mb10oaHR0cHM6Ly9naXRodWIuY29tLyR7cmVwb3NpdG9yeVBhdGh9L3JlbGVhc2VzL3RhZy8ke3ByaW1hcnlNYW5pZmVzdC52ZXJzaW9ufSlgLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgVG9hc3RNZXNzYWdlKHRoaXMucGx1Z2luLCBtc2csIDMwLCBhc3luYyAoKSA9PiB7IHdpbmRvdy5vcGVuKGBodHRwczovL2dpdGh1Yi5jb20vJHtyZXBvc2l0b3J5UGF0aH0vcmVsZWFzZXMvdGFnLyR7cHJpbWFyeU1hbmlmZXN0LnZlcnNpb259YCl9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53cml0ZVJlbGVhc2VGaWxlc1RvUGx1Z2luRm9sZGVyKHByaW1hcnlNYW5pZmVzdC5pZCwgcmVsZWFzZUZpbGVzKTtcclxuICAgICAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5hcHAucGx1Z2lucy5sb2FkTWFuaWZlc3RzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2luLmFwcC5wbHVnaW5zLnBsdWdpbnNbcHJpbWFyeU1hbmlmZXN0LmlkXT8ubWFuaWZlc3QpIGF3YWl0IHRoaXMucmVsb2FkUGx1Z2luKHByaW1hcnlNYW5pZmVzdC5pZCk7IC8vcmVsb2FkIGlmIGVuYWJsZWRcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBgJHtwcmltYXJ5TWFuaWZlc3QuaWR9XFxuUGx1Z2luIGhhcyBiZWVuIHVwZGF0ZWQgZnJvbSB2ZXJzaW9uICR7bG9jYWxNYW5pZmVzdEpTT04udmVyc2lvbn0gdG8gJHtwcmltYXJ5TWFuaWZlc3QudmVyc2lvbn0uIGA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4ubG9nKG1zZyArIGBbUmVsZWFzZSBJbmZvXShodHRwczovL2dpdGh1Yi5jb20vJHtyZXBvc2l0b3J5UGF0aH0vcmVsZWFzZXMvdGFnLyR7cHJpbWFyeU1hbmlmZXN0LnZlcnNpb259KWAsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBUb2FzdE1lc3NhZ2UodGhpcy5wbHVnaW4sIG1zZywgMzAsIGFzeW5jICgpID0+IHsgd2luZG93Lm9wZW4oYGh0dHBzOi8vZ2l0aHViLmNvbS8ke3JlcG9zaXRvcnlQYXRofS9yZWxlYXNlcy90YWcvJHtwcmltYXJ5TWFuaWZlc3QudmVyc2lvbn1gKSB9ICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgaWYgKHJlcG9ydElmTm90VXBkdGVkKSBUb2FzdE1lc3NhZ2UodGhpcy5wbHVnaW4sIGBObyB1cGRhdGUgYXZhaWxhYmxlIGZvciAke3JlcG9zaXRvcnlQYXRofWAsIDMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJlbG9hZHMgYSBwbHVnaW4gKGFzc3VtaW5nIGl0IGhhcyBiZWVuIGVuYWJsZWQgYnkgdXNlcilcclxuICAgICAqIHBqZWJ5LCBUaGFua3MgQnJvIGh0dHBzOi8vZ2l0aHViLmNvbS9wamVieS9ob3QtcmVsb2FkL2Jsb2IvbWFzdGVyL21haW4uanNcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtICAge3N0cmluZzx2b2lkPn0gICBwbHVnaW5OYW1lICBuYW1lIG9mIHBsdWdpblxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gIHtQcm9taXNlPHZvaWQ+fSAgICAgICAgICAgICAgXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHJlbG9hZFBsdWdpbihwbHVnaW5OYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgY29uc3QgcGx1Z2lucyA9IHRoaXMucGx1Z2luLmFwcC5wbHVnaW5zO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHBsdWdpbnMuZGlzYWJsZVBsdWdpbihwbHVnaW5OYW1lKTtcclxuICAgICAgICAgICAgYXdhaXQgcGx1Z2lucy5lbmFibGVQbHVnaW4ocGx1Z2luTmFtZSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBjb25zb2xlLmxvZyhcInJlbG9hZCBwbHVnaW5cIiwgZSkgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogdXBkYXRlcyBhIGJldGEgcGx1Z2luXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtICAge3N0cmluZ30gICByZXBvc2l0b3J5UGF0aCAgcmVwb3NpdG9yeSBwYXRoIG9uIEdpdEh1YlxyXG4gICAgICogQHBhcmFtICAge2Jvb2xlYW59ICBvbmx5Q2hlY2tEb250VXBkYXRlIG9ubHkgbG9va3MgZm9yIHVwZGF0ZVxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gIHtQcm9taXNlPHZvaWQ+fSAgICAgICAgICAgICAgICAgIFxyXG4gICAgICovXHJcbiAgICBhc3luYyB1cGRhdGVQbHVnaW4ocmVwb3NpdG9yeVBhdGg6IHN0cmluZywgb25seUNoZWNrRG9udFVwZGF0ZSA9IGZhbHNlLCByZXBvcnRJZk5vdFVwZHRlZCA9IGZhbHNlKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5hZGRQbHVnaW4ocmVwb3NpdG9yeVBhdGgsIHRydWUsIG9ubHlDaGVja0RvbnRVcGRhdGUsIHJlcG9ydElmTm90VXBkdGVkKTtcclxuICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSAmJiBvbmx5Q2hlY2tEb250VXBkYXRlID09PSBmYWxzZSlcclxuICAgICAgICBUb2FzdE1lc3NhZ2UodGhpcy5wbHVnaW4sIGAke3JlcG9zaXRvcnlQYXRofVxcblVwZGF0ZSBvZiBwbHVnaW4gZmFpbGVkLmApXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHdhbGtzIHRocm91Z2ggdGhlIGxpc3QgIG9mIHBsdWdpbnMgYW5kIHBlcmZvcm1zIGFuIHVwZGF0ZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSAgIHtib29sZWFufSAgICAgICAgICAgc2hvd0luZm8gIHNob3VsZCB0aGlzIHdpdGggYSBzdGFydGVkL2NvbXBsZXRlZCBtZXNzYWdlIC0gdXNlZnVsIHdoZW4gcmFuIGZyb20gQ1BcclxuICAgICAqIEByZXR1cm4gIHtQcm9taXNlPHZvaWQ+fSAgICAgICAgICAgICAgXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGNoZWNrRm9yVXBkYXRlc0FuZEluc3RhbGxVcGRhdGVzKHNob3dJbmZvID0gZmFsc2UsIG9ubHlDaGVja0RvbnRVcGRhdGUgPSBmYWxzZSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGlmKGF3YWl0IGlzQ29ubmVjdGVkVG9JbnRlcm5ldCgpPT09ZmFsc2UpIHsgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQlJBVDogTm8gaW50ZXJuZXQgZGV0ZWN0ZWQuXCIpIFxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBuZXdOb3RpY2U6IE5vdGljZTtcclxuICAgICAgICBjb25zdCBtc2cxID0gYENoZWNraW5nIGZvciBwbHVnaW4gdXBkYXRlcyBTVEFSVEVEYDtcclxuICAgICAgICB0aGlzLnBsdWdpbi5sb2cobXNnMSwgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKHNob3dJbmZvICYmIHRoaXMucGx1Z2luLnNldHRpbmdzLm5vdGlmaWNhdGlvbnNFbmFibGVkKSBuZXdOb3RpY2UgPSBuZXcgTm90aWNlKGBCUkFUXFxuJHttc2cxfWAsIDMwMDAwKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGJwIG9mIHRoaXMucGx1Z2luLnNldHRpbmdzLnBsdWdpbkxpc3QpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVQbHVnaW4oYnAsIG9ubHlDaGVja0RvbnRVcGRhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtc2cyID0gYENoZWNraW5nIGZvciBwbHVnaW4gdXBkYXRlcyBDT01QTEVURURgO1xyXG4gICAgICAgIHRoaXMucGx1Z2luLmxvZyhtc2cyLCB0cnVlKTtcclxuICAgICAgICBpZiAoc2hvd0luZm8pIHtcclxuICAgICAgICAgICAgbmV3Tm90aWNlLmhpZGUoKTtcclxuICAgICAgICAgICAgVG9hc3RNZXNzYWdlKHRoaXMucGx1Z2luLCBtc2cyLCAxMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyB0aGUgYmV0YSBwbHVnaW4gZnJvbSB0aGUgbGlzdCBvZiBiZXRhIHBsdWdpbnMgKGRvZXMgbm90IGRlbGV0ZSB0aGVtIGZyb20gZGlzaylcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gICB7c3RyaW5nPHZvaWQ+fSAgIGJldGFQbHVnaW5JRCAgcmVwb3NpdG9yeSBwYXRoXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiAge1Byb21pc2U8dm9pZD59ICAgICAgICAgICAgICAgIFtyZXR1cm4gZGVzY3JpcHRpb25dXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGRlbGV0ZVBsdWdpbihyZXBvc2l0b3J5UGF0aDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3QgbXNnID0gYFJlbW92ZWQgJHtyZXBvc2l0b3J5UGF0aH0gZnJvbSBCUkFUIHBsdWdpbiBsaXN0YDtcclxuICAgICAgICB0aGlzLnBsdWdpbi5sb2cobXNnLCB0cnVlKTtcclxuICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wbHVnaW5MaXN0ID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MucGx1Z2luTGlzdC5maWx0ZXIoKGIpID0+IGIgIT0gcmVwb3NpdG9yeVBhdGgpO1xyXG4gICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgcGx1Z2lucyB0aGF0IGFyZSBjdXJyZW50bHkgZW5hYmxlZCBvciBjdXJyZW50bHkgZGlzYWJsZWRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gICB7Ym9vbGVhbltdfSAgICAgICAgZW5hYmxlZCAgdHJ1ZSBmb3IgZW5hYmxlZCBwbHVnaW5zLCBmYWxzZSBmb3IgZGlzYWJsZWQgcGx1dGluZ3NcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuICB7UGx1Z2luTWFuaWZlc3RbXX0gICAgICAgICAgIG1hbmlmZXN0cyAgb2YgcGx1Z2luc1xyXG4gICAgICovXHJcbiAgICBnZXRFbmFibGVkRGlzYWJsZWRQbHVnaW5zKGVuYWJsZWQ6IGJvb2xlYW4pOiBQbHVnaW5NYW5pZmVzdFtdIHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgY29uc3QgcGwgPSB0aGlzLnBsdWdpbi5hcHAucGx1Z2lucztcclxuICAgICAgICBjb25zdCBtYW5pZmVzdHM6IFBsdWdpbk1hbmlmZXN0W10gPSBPYmplY3QudmFsdWVzKHBsLm1hbmlmZXN0cyk7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGNvbnN0IGVuYWJsZWRQbHVnaW5zOiBQbHVnaW5NYW5pZmVzdFtdID0gT2JqZWN0LnZhbHVlcyhwbC5wbHVnaW5zKS5tYXAocCA9PiBwLm1hbmlmZXN0KTtcclxuICAgICAgICByZXR1cm4gZW5hYmxlZCA/XHJcbiAgICAgICAgICAgIG1hbmlmZXN0cy5maWx0ZXIobWFuaWZlc3QgPT4gZW5hYmxlZFBsdWdpbnMuZmluZChwbHVnaW5OYW1lID0+IG1hbmlmZXN0LmlkID09PSBwbHVnaW5OYW1lLmlkKSkgOlxyXG4gICAgICAgICAgICBtYW5pZmVzdHMuZmlsdGVyKG1hbmlmZXN0ID0+ICFlbmFibGVkUGx1Z2lucy5maW5kKHBsdWdpbk5hbWUgPT4gbWFuaWZlc3QuaWQgPT09IHBsdWdpbk5hbWUuaWQpKTtcclxuICAgIH1cclxufSIsICJpbXBvcnQgeyBhZGRJY29uIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZEljb25zKCk6IHZvaWQge1xyXG4gICAgYWRkSWNvbihcclxuICAgICAgICBcIkJyYXRJY29uXCIsXHJcbiAgICAgICAgYDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiAgZD1cIk0gNDEuNjY3OTY5IDQxLjY2Nzk2OSBDIDQxLjY2Nzk2OSAzOS4zNjcxODggMzkuODAwNzgxIDM3LjUgMzcuNSAzNy41IEMgMzUuMTk5MjE5IDM3LjUgMzMuMzMyMDMxIDM5LjM2NzE4OCAzMy4zMzIwMzEgNDEuNjY3OTY5IEMgMzMuMzMyMDMxIDQzLjk2ODc1IDM1LjE5OTIxOSA0NS44MzIwMzEgMzcuNSA0NS44MzIwMzEgQyAzOS44MDA3ODEgNDUuODMyMDMxIDQxLjY2Nzk2OSA0My45Njg3NSA0MS42Njc5NjkgNDEuNjY3OTY5IFogTSA2MC40MTc5NjkgNTguNTgyMDMxIEMgNTkuNDYwOTM4IDU4LjAyMzQzOCA1OC4zMjAzMTIgNTcuODY3MTg4IDU3LjI1IDU4LjE0ODQzOCBDIDU2LjE3OTY4OCA1OC40Mjk2ODggNTUuMjY1NjI1IDU5LjEyNSA1NC43MDcwMzEgNjAuMDgyMDMxIEMgNTMuNzQ2MDk0IDYxLjc3NzM0NCA1MS45NDkyMTkgNjIuODIwMzEyIDUwIDYyLjgyMDMxMiBDIDQ4LjA1MDc4MSA2Mi44MjAzMTIgNDYuMjUzOTA2IDYxLjc3NzM0NCA0NS4yOTI5NjkgNjAuMDgyMDMxIEMgNDQuNzM0Mzc1IDU5LjEyNSA0My44MjAzMTIgNTguNDI5Njg4IDQyLjc1IDU4LjE0ODQzOCBDIDQxLjY3OTY4OCA1Ny44NjcxODggNDAuNTM5MDYyIDU4LjAyMzQzOCAzOS41ODIwMzEgNTguNTgyMDMxIEMgMzcuNTk3NjU2IDU5LjcyNjU2MiAzNi45MTAxNTYgNjIuMjU3ODEyIDM4LjA0Mjk2OSA2NC4yNSBDIDQwLjUgNjguNTMxMjUgNDUuMDYyNSA3MS4xNzE4NzUgNTAgNzEuMTcxODc1IEMgNTQuOTM3NSA3MS4xNzE4NzUgNTkuNSA2OC41MzEyNSA2MS45NTcwMzEgNjQuMjUgQyA2My4wODk4NDQgNjIuMjU3ODEyIDYyLjQwMjM0NCA1OS43MjY1NjIgNjAuNDE3OTY5IDU4LjU4MjAzMSBaIE0gNjIuNSAzNy41IEMgNjAuMTk5MjE5IDM3LjUgNTguMzMyMDMxIDM5LjM2NzE4OCA1OC4zMzIwMzEgNDEuNjY3OTY5IEMgNTguMzMyMDMxIDQzLjk2ODc1IDYwLjE5OTIxOSA0NS44MzIwMzEgNjIuNSA0NS44MzIwMzEgQyA2NC44MDA3ODEgNDUuODMyMDMxIDY2LjY2Nzk2OSA0My45Njg3NSA2Ni42Njc5NjkgNDEuNjY3OTY5IEMgNjYuNjY3OTY5IDM5LjM2NzE4OCA2NC44MDA3ODEgMzcuNSA2Mi41IDM3LjUgWiBNIDUwIDguMzMyMDMxIEMgMjYuOTg4MjgxIDguMzMyMDMxIDguMzMyMDMxIDI2Ljk4ODI4MSA4LjMzMjAzMSA1MCBDIDguMzMyMDMxIDczLjAxMTcxOSAyNi45ODgyODEgOTEuNjY3OTY5IDUwIDkxLjY2Nzk2OSBDIDczLjAxMTcxOSA5MS42Njc5NjkgOTEuNjY3OTY5IDczLjAxMTcxOSA5MS42Njc5NjkgNTAgQyA5MS42Njc5NjkgMjYuOTg4MjgxIDczLjAxMTcxOSA4LjMzMjAzMSA1MCA4LjMzMjAzMSBaIE0gNTAgODMuMzMyMDMxIEMgMzMuOTg4MjgxIDgzLjQwMjM0NCAyMC4xOTE0MDYgNzIuMDc4MTI1IDE3LjEzNjcxOSA1Ni4zNjMyODEgQyAxNC4wNzgxMjUgNDAuNjQ0NTMxIDIyLjYyODkwNiAyNC45NzY1NjIgMzcuNSAxOS4wNDI5NjkgQyAzNy40NTcwMzEgMTkuNjM2NzE5IDM3LjQ1NzAzMSAyMC4yMzgyODEgMzcuNSAyMC44MzIwMzEgQyAzNy41IDI3LjczODI4MSA0My4wOTc2NTYgMzMuMzMyMDMxIDUwIDMzLjMzMjAzMSBDIDUyLjMwMDc4MSAzMy4zMzIwMzEgNTQuMTY3OTY5IDMxLjQ2ODc1IDU0LjE2Nzk2OSAyOS4xNjc5NjkgQyA1NC4xNjc5NjkgMjYuODY3MTg4IDUyLjMwMDc4MSAyNSA1MCAyNSBDIDQ3LjY5OTIxOSAyNSA0NS44MzIwMzEgMjMuMTMyODEyIDQ1LjgzMjAzMSAyMC44MzIwMzEgQyA0NS44MzIwMzEgMTguNTMxMjUgNDcuNjk5MjE5IDE2LjY2Nzk2OSA1MCAxNi42Njc5NjkgQyA2OC40MTAxNTYgMTYuNjY3OTY5IDgzLjMzMjAzMSAzMS41ODk4NDQgODMuMzMyMDMxIDUwIEMgODMuMzMyMDMxIDY4LjQxMDE1NiA2OC40MTAxNTYgODMuMzMyMDMxIDUwIDgzLjMzMjAzMSBaIE0gNTAgODMuMzMyMDMxIFwiIC8+YFxyXG4gICAgKTtcclxufSIsICJpbXBvcnQgeyBtb21lbnQsIFRGaWxlLCBQbGF0Zm9ybSB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBnZXREYWlseU5vdGVTZXR0aW5ncyB9IGZyb20gXCJvYnNpZGlhbi1kYWlseS1ub3Rlcy1pbnRlcmZhY2VcIjtcclxuaW1wb3J0IFRoZVBsdWdpbiBmcm9tIFwiLi4vbWFpblwiO1xyXG5cclxuLyoqXHJcbiAqIExvZ3MgZXZlbnRzIHRvIGEgbG9nIGZpbGVcclxuICpcclxuICogQHBhcmFtICAge1RoZVBsdWdpbn0gIHBsdWdpbiAgICAgICAgICAgIFBsdWdpbiBvYmplY3RcclxuICogQHBhcmFtICAge3N0cmluZ30gICAgIHRleHRUb0xvZyAgICAgICAgIHRleHQgdG8gYmUgc2F2ZWQgdG8gbG9nIGZpbGVcclxuICogQHBhcmFtICAge1t0eXBlXX0gICAgIHZlcmJvc2VMb2dnaW5nT24gIFRydWUgaWYgc2hvdWxkIG9ubHkgYmUgbG9nZ2VkIGlmIHZlcmJvc2UgbG9nZ2luZyBpcyBlbmFibGVkXHJcbiAqXHJcbiAqIEByZXR1cm4gIHt2b2lkfSAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2dnZXIocGx1Z2luOiBUaGVQbHVnaW4sIHRleHRUb0xvZzogc3RyaW5nLCB2ZXJib3NlTG9nZ2luZ09uID0gZmFsc2UpOiB2b2lkIHtcclxuICAgIGlmKHBsdWdpbi5zZXR0aW5ncy5kZWJ1Z2dpbmdNb2RlKSBjb25zb2xlLmxvZyhcIkJSQVQ6IFwiICsgdGV4dFRvTG9nKTtcclxuICAgIGlmIChwbHVnaW4uc2V0dGluZ3MubG9nZ2luZ0VuYWJsZWQpIHtcclxuICAgICAgICBpZiAocGx1Z2luLnNldHRpbmdzLmxvZ2dpbmdWZXJib3NlRW5hYmxlZCA9PT0gZmFsc2UgJiYgdmVyYm9zZUxvZ2dpbmdPbiA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBwbHVnaW4uc2V0dGluZ3MubG9nZ2luZ1BhdGggKyBcIi5tZFwiO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRlT3V0cHV0ID0gXCJbW1wiICsgbW9tZW50KCkuZm9ybWF0KGdldERhaWx5Tm90ZVNldHRpbmdzKCkuZm9ybWF0KS50b1N0cmluZygpICsgXCJdXSBcIiArXHJcbiAgICAgICAgICAgICAgICBtb21lbnQoKS5mb3JtYXQoXCJISDptbVwiKTtcclxuICAgICAgICAgICAgY29uc3QgbWFjaGluZU5hbWUgPSBQbGF0Zm9ybS5pc0Rlc2t0b3AgPyB3aW5kb3cucmVxdWlyZShcIm9zXCIpLmhvc3RuYW1lKCkgOiBcIk1PQklMRVwiO1xyXG4gICAgICAgICAgICBsZXQgb3V0cHV0ID0gZGF0ZU91dHB1dCArIFwiIFwiICsgbWFjaGluZU5hbWUgKyBcIiBcIiArIHRleHRUb0xvZy5yZXBsYWNlKFwiXFxuXCIsXCIgXCIpICsgXCJcXG5cXG5cIjtcclxuICAgICAgICAgICAgc2V0VGltZW91dChhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXdhaXQgcGx1Z2luLmFwcC52YXVsdC5hZGFwdGVyLmV4aXN0cyhmaWxlTmFtZSkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlQ29udGVudHMgPSBhd2FpdCBwbHVnaW4uYXBwLnZhdWx0LmFkYXB0ZXIucmVhZChmaWxlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0ICsgZmlsZUNvbnRlbnRzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBwbHVnaW4uYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlTmFtZSkgYXMgVEZpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcGx1Z2luLmFwcC52YXVsdC5tb2RpZnkoZmlsZSwgb3V0cHV0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHBsdWdpbi5hcHAudmF1bHQuY3JlYXRlKGZpbGVOYW1lLCBvdXRwdXQpO1xyXG4gICAgICAgICAgICB9LCAxMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwgImltcG9ydCBUaGVQbHVnaW4gZnJvbSBcIi4uL21haW5cIjtcclxuaW1wb3J0IHsgR2VuZXJpY0Z1enp5U3VnZ2VzdGVyLCBTdWdnZXN0ZXJJdGVtIH0gZnJvbSBcIi4vR2VuZXJpY0Z1enp5U3VnZ2VzdGVyXCI7XHJcbmltcG9ydCB7IGdyYWJDb21tbXVuaXR5UGx1Z2luTGlzdCwgZ3JhYkNvbW1tdW5pdHlUaGVtZXNMaXN0IH0gZnJvbSBcIi4uL2ZlYXR1cmVzL2dpdGh1YlV0aWxzXCI7XHJcbmltcG9ydCB7IHRoZW1lc2VDaGVja0FuZFVwZGF0ZXMsIHRoZW1lc0luc3RhbGxGcm9tQ29tbXVuaXR5TGlzdCB9IGZyb20gXCIuLi9mZWF0dXJlcy90aGVtZXNcIjtcclxuaW1wb3J0IEFkZE5ld1RoZW1lIGZyb20gXCIuL0FkZE5ld1RoZW1lXCI7XHJcbmltcG9ydCB7IFRvYXN0TWVzc2FnZSB9IGZyb20gXCIuLi91dGlscy9ub3RpZmljYXRpb25zXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbHVnaW5Db21tYW5kcyB7XHJcbiAgICBwbHVnaW46IFRoZVBsdWdpbjtcclxuICAgIGJyYXRDb21tYW5kcyA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiBcIkJSQVQtQWRkQmV0YVBsdWdpblwiLFxyXG4gICAgICAgICAgICBpY29uOiBcIkJyYXRJY29uXCIsXHJcbiAgICAgICAgICAgIG5hbWU6IFwiUGx1Z2luczogQWRkIGEgYmV0YSBwbHVnaW4gZm9yIHRlc3RpbmdcIixcclxuICAgICAgICAgICAgc2hvd0luUmliYm9uOiB0cnVlLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4geyBhd2FpdCB0aGlzLnBsdWdpbi5iZXRhUGx1Z2lucy5kaXNwbGF5QWRkTmV3UGx1Z2luTW9kYWwoKSB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiBcIkJSQVQtY2hlY2tGb3JVcGRhdGVzQW5kVXBkYXRlXCIsXHJcbiAgICAgICAgICAgIGljb246IFwiQnJhdEljb25cIixcclxuICAgICAgICAgICAgbmFtZTogXCJQbHVnaW5zOiBDaGVjayBmb3IgdXBkYXRlcyB0byBhbGwgYmV0YSBwbHVnaW5zIGFuZCBVUERBVEVcIixcclxuICAgICAgICAgICAgc2hvd0luUmliYm9uOiB0cnVlLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4geyBhd2FpdCB0aGlzLnBsdWdpbi5iZXRhUGx1Z2lucy5jaGVja0ZvclVwZGF0ZXNBbmRJbnN0YWxsVXBkYXRlcyh0cnVlLCBmYWxzZSkgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogXCJCUkFULWNoZWNrRm9yVXBkYXRlc0FuZERvbnRVcGRhdGVcIixcclxuICAgICAgICAgICAgaWNvbjogXCJCcmF0SWNvblwiLFxyXG4gICAgICAgICAgICBuYW1lOiBcIlBsdWdpbnM6IE9ubHkgY2hlY2sgZm9yIHVwZGF0ZXMgdG8gYmV0YSBwbHVnaW5zLCBidXQgZG9uJ3QgVXBkYXRlXCIsXHJcbiAgICAgICAgICAgIHNob3dJblJpYmJvbjogdHJ1ZSxcclxuICAgICAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHsgYXdhaXQgdGhpcy5wbHVnaW4uYmV0YVBsdWdpbnMuY2hlY2tGb3JVcGRhdGVzQW5kSW5zdGFsbFVwZGF0ZXModHJ1ZSwgdHJ1ZSkgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogXCJCUkFULXVwZGF0ZU9uZVBsdWdpblwiLFxyXG4gICAgICAgICAgICBpY29uOiBcIkJyYXRJY29uXCIsXHJcbiAgICAgICAgICAgIG5hbWU6IFwiUGx1Z2luczogQ2hvb3NlIGEgc2luZ2xlIHBsdWdpbiB0byB1cGRhdGVcIixcclxuICAgICAgICAgICAgc2hvd0luUmliYm9uOiB0cnVlLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGx1Z2luTGlzdDogU3VnZ2VzdGVySXRlbVtdID0gT2JqZWN0LnZhbHVlcyh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wbHVnaW5MaXN0KS5tYXAoKG0pID0+IHsgcmV0dXJuIHsgZGlzcGxheTogbSwgaW5mbzogbSB9IH0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ2ZzID0gbmV3IEdlbmVyaWNGdXp6eVN1Z2dlc3Rlcih0aGlzLnBsdWdpbik7XHJcbiAgICAgICAgICAgICAgICBnZnMuc2V0U3VnZ2VzdGVyRGF0YShwbHVnaW5MaXN0KTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IGdmcy5kaXNwbGF5KGFzeW5jIChyZXN1bHRzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNnID0gYENoZWNraW5nIGZvciB1cGRhdGVzIGZvciAke3Jlc3VsdHMuaW5mb31gO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmxvZyhtc2csdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgVG9hc3RNZXNzYWdlKHRoaXMucGx1Z2luLCBgXFxuJHttc2d9YCwgMyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uYmV0YVBsdWdpbnMudXBkYXRlUGx1Z2luKHJlc3VsdHMuaW5mbywgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IFwiQlJBVC1yZXN0YXJ0UGx1Z2luXCIsXHJcbiAgICAgICAgICAgIGljb246IFwiQnJhdEljb25cIixcclxuICAgICAgICAgICAgbmFtZTogXCJQbHVnaW5zOiBSZXN0YXJ0IGEgcGx1Z2luIHRoYXQgaXMgYWxyZWFkeSBpbnN0YWxsZWRcIixcclxuICAgICAgICAgICAgc2hvd0luUmliYm9uOiB0cnVlLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGx1Z2luTGlzdDogU3VnZ2VzdGVySXRlbVtdID0gT2JqZWN0LnZhbHVlcyh0aGlzLnBsdWdpbi5hcHAucGx1Z2lucy5tYW5pZmVzdHMpLm1hcCgobSkgPT4geyByZXR1cm4geyBkaXNwbGF5OiBtLmlkLCBpbmZvOiBtLmlkIH0gfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBnZnMgPSBuZXcgR2VuZXJpY0Z1enp5U3VnZ2VzdGVyKHRoaXMucGx1Z2luKTtcclxuICAgICAgICAgICAgICAgIGdmcy5zZXRTdWdnZXN0ZXJEYXRhKHBsdWdpbkxpc3QpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgZ2ZzLmRpc3BsYXkoYXN5bmMgKHJlc3VsdHMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBUb2FzdE1lc3NhZ2UodGhpcy5wbHVnaW4sIGAke3Jlc3VsdHMuaW5mb31cXG5QbHVnaW4gcmVsb2FkaW5nIC4uLi4uYCwgNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uYmV0YVBsdWdpbnMucmVsb2FkUGx1Z2luKHJlc3VsdHMuaW5mbyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogXCJCUkFULWRpc2FibGVQbHVnaW5cIixcclxuICAgICAgICAgICAgaWNvbjogXCJCcmF0SWNvblwiLFxyXG4gICAgICAgICAgICBuYW1lOiBcIlBsdWdpbnM6IERpc2FibGUgYSBwbHVnaW4gLSB0b2dnbGUgaXQgb2ZmXCIsXHJcbiAgICAgICAgICAgIHNob3dJblJpYmJvbjogdHJ1ZSxcclxuICAgICAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBsdWdpbkxpc3QgPSB0aGlzLnBsdWdpbi5iZXRhUGx1Z2lucy5nZXRFbmFibGVkRGlzYWJsZWRQbHVnaW5zKHRydWUpLm1hcChtYW5pZmVzdCA9PiB7IHJldHVybiB7IGRpc3BsYXk6IGAke21hbmlmZXN0Lm5hbWV9ICgke21hbmlmZXN0LmlkfSlgLCBpbmZvOiBtYW5pZmVzdC5pZCB9IH0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ2ZzID0gbmV3IEdlbmVyaWNGdXp6eVN1Z2dlc3Rlcih0aGlzLnBsdWdpbik7XHJcbiAgICAgICAgICAgICAgICBnZnMuc2V0U3VnZ2VzdGVyRGF0YShwbHVnaW5MaXN0KTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IGdmcy5kaXNwbGF5KGFzeW5jIChyZXN1bHRzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4ubG9nKGAke3Jlc3VsdHMuZGlzcGxheX0gcGx1Z2luIGRpc2FibGVkYCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5hcHAucGx1Z2lucy5kaXNhYmxlUGx1Z2luKHJlc3VsdHMuaW5mbyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogXCJCUkFULWVuYWJsZVBsdWdpblwiLFxyXG4gICAgICAgICAgICBpY29uOiBcIkJyYXRJY29uXCIsXHJcbiAgICAgICAgICAgIG5hbWU6IFwiUGx1Z2luczogRW5hYmxlIGEgcGx1Z2luIC0gdG9nZ2xlIGl0IG9uXCIsXHJcbiAgICAgICAgICAgIHNob3dJblJpYmJvbjogdHJ1ZSxcclxuICAgICAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBsdWdpbkxpc3QgPSB0aGlzLnBsdWdpbi5iZXRhUGx1Z2lucy5nZXRFbmFibGVkRGlzYWJsZWRQbHVnaW5zKGZhbHNlKS5tYXAobWFuaWZlc3QgPT4geyByZXR1cm4geyBkaXNwbGF5OiBgJHttYW5pZmVzdC5uYW1lfSAoJHttYW5pZmVzdC5pZH0pYCwgaW5mbzogbWFuaWZlc3QuaWQgfSB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdmcyA9IG5ldyBHZW5lcmljRnV6enlTdWdnZXN0ZXIodGhpcy5wbHVnaW4pO1xyXG4gICAgICAgICAgICAgICAgZ2ZzLnNldFN1Z2dlc3RlckRhdGEocGx1Z2luTGlzdCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBnZnMuZGlzcGxheShhc3luYyAocmVzdWx0cykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmxvZyhgJHtyZXN1bHRzLmRpc3BsYXl9IHBsdWdpbiBlbmFibGVkYCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5hcHAucGx1Z2lucy5lbmFibGVQbHVnaW4ocmVzdWx0cy5pbmZvKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiBcIkJSQVQtb3BlbkdpdEh1YlpSZXBvc2l0b3J5XCIsXHJcbiAgICAgICAgICAgIGljb246IFwiQnJhdEljb25cIixcclxuICAgICAgICAgICAgbmFtZTogXCJQbHVnaW5zOiBPcGVuIHRoZSBHaXRIdWIgcmVwb3NpdG9yeSBmb3IgYSBwbHVnaW5cIixcclxuICAgICAgICAgICAgc2hvd0luUmliYm9uOiB0cnVlLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29tbXVuaXR5UGx1Z2lucyA9IGF3YWl0IGdyYWJDb21tbXVuaXR5UGx1Z2luTGlzdCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29tbXVuaXR5UGx1Z2luTGlzdDogU3VnZ2VzdGVySXRlbVtdID0gT2JqZWN0LnZhbHVlcyhjb21tdW5pdHlQbHVnaW5zKS5tYXAoKHApID0+IHsgcmV0dXJuIHsgZGlzcGxheTogYFBsdWdpbjogJHtwLm5hbWV9ICAoJHtwLnJlcG99KWAsIGluZm86IHAucmVwbyB9IH0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYnJhdExpc3Q6IFN1Z2dlc3Rlckl0ZW1bXSA9IE9iamVjdC52YWx1ZXModGhpcy5wbHVnaW4uc2V0dGluZ3MucGx1Z2luTGlzdCkubWFwKChwKSA9PiB7IHJldHVybiB7IGRpc3BsYXk6IFwiQlJBVDogXCIgKyBwLCBpbmZvOiBwIH0gfSk7XHJcbiAgICAgICAgICAgICAgICBjb21tdW5pdHlQbHVnaW5MaXN0LmZvckVhY2goc2kgPT4gYnJhdExpc3QucHVzaChzaSkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ2ZzID0gbmV3IEdlbmVyaWNGdXp6eVN1Z2dlc3Rlcih0aGlzLnBsdWdpbik7XHJcbiAgICAgICAgICAgICAgICBnZnMuc2V0U3VnZ2VzdGVyRGF0YShicmF0TGlzdCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBnZnMuZGlzcGxheShhc3luYyAocmVzdWx0cykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzLmluZm8pIHdpbmRvdy5vcGVuKGBodHRwczovL2dpdGh1Yi5jb20vJHtyZXN1bHRzLmluZm99YClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiBcIkJSQVQtb3BlbkdpdEh1YlJlcG9UaGVtZVwiLFxyXG4gICAgICAgICAgICBpY29uOiBcIkJyYXRJY29uXCIsXHJcbiAgICAgICAgICAgIG5hbWU6IFwiVGhlbWVzOiBPcGVuIHRoZSBHaXRIdWIgcmVwb3NpdG9yeSBmb3IgYSB0aGVtZSAoYXBwZWFyYW5jZSlcIixcclxuICAgICAgICAgICAgc2hvd0luUmliYm9uOiB0cnVlLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29tbXVuaXR5VGhlbWUgPSBhd2FpdCBncmFiQ29tbW11bml0eVRoZW1lc0xpc3QoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbW11bml0eVRoZW1lTGlzdDogU3VnZ2VzdGVySXRlbVtdID0gT2JqZWN0LnZhbHVlcyhjb21tdW5pdHlUaGVtZSkubWFwKChwKSA9PiB7IHJldHVybiB7IGRpc3BsYXk6IGBUaGVtZTogJHtwLm5hbWV9ICAoJHtwLnJlcG99KWAsIGluZm86IHAucmVwbyB9IH0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ2ZzID0gbmV3IEdlbmVyaWNGdXp6eVN1Z2dlc3Rlcih0aGlzLnBsdWdpbik7XHJcbiAgICAgICAgICAgICAgICBnZnMuc2V0U3VnZ2VzdGVyRGF0YShjb21tdW5pdHlUaGVtZUxpc3QpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgZ2ZzLmRpc3BsYXkoYXN5bmMgKHJlc3VsdHMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0cy5pbmZvKSB3aW5kb3cub3BlbihgaHR0cHM6Ly9naXRodWIuY29tLyR7cmVzdWx0cy5pbmZvfWApXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogXCJCUkFULW9wZW50UGx1Z2luU2V0dGluZ3NcIixcclxuICAgICAgICAgICAgaWNvbjogXCJCcmF0SWNvblwiLFxyXG4gICAgICAgICAgICBuYW1lOiBcIlBsdWdpbnM6IE9wZW4gUGx1Z2luIFNldHRpbmdzIFRhYlwiLFxyXG4gICAgICAgICAgICBzaG93SW5SaWJib246IHRydWUsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZXR0aW5ncyA9IHRoaXMucGx1Z2luLmFwcC5zZXR0aW5nO1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbGlzdE9mUGx1Z2luU2V0dGluZ3NUYWJzOiBTdWdnZXN0ZXJJdGVtW10gPSBPYmplY3QudmFsdWVzKHNldHRpbmdzLnBsdWdpblRhYnMpLm1hcCgodCkgPT4geyByZXR1cm4geyBkaXNwbGF5OiBcIlBsdWdpbjogXCIgKyB0Lm5hbWUsIGluZm86IHQuaWQgfSB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdmcyA9IG5ldyBHZW5lcmljRnV6enlTdWdnZXN0ZXIodGhpcy5wbHVnaW4pO1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbGlzdE9mQ29yZVNldHRpbmdzVGFiczogU3VnZ2VzdGVySXRlbVtdID0gT2JqZWN0LnZhbHVlcyhzZXR0aW5ncy5zZXR0aW5nVGFicykubWFwKCh0KSA9PiB7IHJldHVybiB7IGRpc3BsYXk6IFwiQ29yZTogXCIgKyB0Lm5hbWUsIGluZm86IHQuaWQgfSB9KTtcclxuICAgICAgICAgICAgICAgIGxpc3RPZlBsdWdpblNldHRpbmdzVGFicy5mb3JFYWNoKHNpID0+IGxpc3RPZkNvcmVTZXR0aW5nc1RhYnMucHVzaChzaSkpO1xyXG4gICAgICAgICAgICAgICAgZ2ZzLnNldFN1Z2dlc3RlckRhdGEobGlzdE9mQ29yZVNldHRpbmdzVGFicyk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBnZnMuZGlzcGxheShhc3luYyAocmVzdWx0cykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm9wZW4oKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5vcGVuVGFiQnlJZChyZXN1bHRzLmluZm8pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IFwiQlJBVC1HcmFiQ29tbXVuaXR5VGhlbWVcIixcclxuICAgICAgICAgICAgaWNvbjogXCJCcmF0SWNvblwiLFxyXG4gICAgICAgICAgICBuYW1lOiBcIlRoZW1lczogR3JhYiBhIGNvbW11bml0eSB0aGVtZVwiLFxyXG4gICAgICAgICAgICBzaG93SW5SaWJib246IHRydWUsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiBhd2FpdCB0aGVtZXNJbnN0YWxsRnJvbUNvbW11bml0eUxpc3QodGhpcy5wbHVnaW4pXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiBcIkJSQVQtR3JhYkJldGFUaGVtZVwiLFxyXG4gICAgICAgICAgICBpY29uOiBcIkJyYXRJY29uXCIsXHJcbiAgICAgICAgICAgIG5hbWU6IFwiVGhlbWVzOiBHcmFiIGEgYmV0YSB0aGVtZSBmb3IgdGVzdGluZyBmcm9tIGEgR2l0aHViIHJlcG9zaXRvcnlcIixcclxuICAgICAgICAgICAgc2hvd0luUmliYm9uOiB0cnVlLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4geyAobmV3IEFkZE5ld1RoZW1lKHRoaXMucGx1Z2luKSkub3BlbigpIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IFwiQlJBVC11cGRhdGVCZXRhVGhlbWVzXCIsXHJcbiAgICAgICAgICAgIGljb246IFwiQnJhdEljb25cIixcclxuICAgICAgICAgICAgbmFtZTogXCJUaGVtZXM6IFVwZGF0ZSBiZXRhIHRoZW1lc1wiLFxyXG4gICAgICAgICAgICBzaG93SW5SaWJib246IHRydWUsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiBhd2FpdCB0aGVtZXNlQ2hlY2tBbmRVcGRhdGVzKHRoaXMucGx1Z2luLCB0cnVlKSBcclxuICAgICAgICB9LCAgICAgICAgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogXCJCUkFULXN3aXRjaFRoZW1lXCIsXHJcbiAgICAgICAgICAgIGljb246IFwiQnJhdEljb25cIixcclxuICAgICAgICAgICAgbmFtZTogXCJUaGVtZXM6IFN3aXRjaCBBY3RpdmUgVGhlbWUgXCIsXHJcbiAgICAgICAgICAgIHNob3dJblJpYmJvbjogdHJ1ZSxcclxuICAgICAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbW11bml0eVRoZW1lTGlzdDogU3VnZ2VzdGVySXRlbVtdID0gT2JqZWN0LnZhbHVlcyh0aGlzLnBsdWdpbi5hcHAuY3VzdG9tQ3NzLnRoZW1lcykubWFwKCh0KSA9PiB7IHJldHVybiB7IGRpc3BsYXk6IHQsIGluZm86IHQgfSB9KTtcclxuICAgICAgICAgICAgICAgIGNvbW11bml0eVRoZW1lTGlzdC51bnNoaWZ0KHsgZGlzcGxheTogXCJPYnNpZGlhbiBEZWZhdWx0IFRoZW1lXCIsIGluZm86IFwiXCIgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBnZnMgPSBuZXcgR2VuZXJpY0Z1enp5U3VnZ2VzdGVyKHRoaXMucGx1Z2luKTtcclxuICAgICAgICAgICAgICAgIGdmcy5zZXRTdWdnZXN0ZXJEYXRhKGNvbW11bml0eVRoZW1lTGlzdCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBnZnMuZGlzcGxheShhc3luYyAocmVzdWx0cykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmxvZyhgU3dpdGNoZWQgdG8gdGhlbWUgJHtyZXN1bHRzLmRpc3BsYXl9YCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5hcHAuY3VzdG9tQ3NzLnNldFRoZW1lKHJlc3VsdHMuaW5mbyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogXCJCUkFULWFsbENvbW1hbmRzXCIsXHJcbiAgICAgICAgICAgIGljb246IFwiQnJhdEljb25cIixcclxuICAgICAgICAgICAgbmFtZTogXCJBbGwgQ29tbWFuZHMgbGlzdFwiLFxyXG4gICAgICAgICAgICBzaG93SW5SaWJib246IGZhbHNlLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4gdGhpcy5yaWJib25EaXNwbGF5Q29tbWFuZHMoKVxyXG4gICAgICAgIH0sXHJcbiAgICBdXHJcblxyXG4gICAgYXN5bmMgcmliYm9uRGlzcGxheUNvbW1hbmRzKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGNvbnN0IGJyYXRDb21tYW5kTGlzdDogU3VnZ2VzdGVySXRlbVtdID0gW107XHJcbiAgICAgICAgdGhpcy5icmF0Q29tbWFuZHMuZm9yRWFjaChjbWQgPT4geyBpZiAoY21kLnNob3dJblJpYmJvbikgYnJhdENvbW1hbmRMaXN0LnB1c2goeyBkaXNwbGF5OiBjbWQubmFtZSwgaW5mbzogY21kLmNhbGxiYWNrIH0pIH0pO1xyXG4gICAgICAgIGNvbnN0IGdmcyA9IG5ldyBHZW5lcmljRnV6enlTdWdnZXN0ZXIodGhpcy5wbHVnaW4pO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IHRoaXMucGx1Z2luLmFwcC5zZXR0aW5nO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBjb25zdCBsaXN0T2ZDb3JlU2V0dGluZ3NUYWJzOiBTdWdnZXN0ZXJJdGVtW10gPSBPYmplY3QudmFsdWVzKHNldHRpbmdzLnNldHRpbmdUYWJzKS5tYXAoKHQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJDb3JlOiBcIiArIHQubmFtZSxcclxuICAgICAgICAgICAgICAgIGluZm86IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5vcGVuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Mub3BlblRhYkJ5SWQodC5pZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgY29uc3QgbGlzdE9mUGx1Z2luU2V0dGluZ3NUYWJzOiBTdWdnZXN0ZXJJdGVtW10gPSBPYmplY3QudmFsdWVzKHNldHRpbmdzLnBsdWdpblRhYnMpLm1hcCgodDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcIlBsdWdpbjogXCIgKyB0Lm5hbWUsXHJcbiAgICAgICAgICAgICAgICBpbmZvOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Mub3BlbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm9wZW5UYWJCeUlkKHQuaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGJyYXRDb21tYW5kTGlzdC5wdXNoKHsgZGlzcGxheTogXCItLS0tIENvcmUgUGx1Z2luIFNldHRpbmdzIC0tLS1cIiwgaW5mbzogYXN5bmMgKCkgPT4geyBhd2FpdCB0aGlzLnJpYmJvbkRpc3BsYXlDb21tYW5kcygpIH0gfSlcclxuICAgICAgICBsaXN0T2ZDb3JlU2V0dGluZ3NUYWJzLmZvckVhY2goc2kgPT4gYnJhdENvbW1hbmRMaXN0LnB1c2goc2kpKTtcclxuICAgICAgICBicmF0Q29tbWFuZExpc3QucHVzaCh7IGRpc3BsYXk6IFwiLS0tLSBQbHVnaW4gU2V0dGluZ3MgLS0tLVwiLCBpbmZvOiBhc3luYyAoKSA9PiB7IGF3YWl0IHRoaXMucmliYm9uRGlzcGxheUNvbW1hbmRzKCkgfSB9KVxyXG4gICAgICAgIGxpc3RPZlBsdWdpblNldHRpbmdzVGFicy5mb3JFYWNoKHNpID0+IGJyYXRDb21tYW5kTGlzdC5wdXNoKHNpKSk7XHJcblxyXG4gICAgICAgIGdmcy5zZXRTdWdnZXN0ZXJEYXRhKGJyYXRDb21tYW5kTGlzdCk7XHJcbiAgICAgICAgYXdhaXQgZ2ZzLmRpc3BsYXkoYXN5bmMgKHJlc3VsdHMpID0+IGF3YWl0IHJlc3VsdHMuaW5mbygpKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IFRoZVBsdWdpbikge1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG5cclxuICAgICAgICB0aGlzLmJyYXRDb21tYW5kcy5mb3JFYWNoKGFzeW5jIChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICAgICAgaWQ6IGl0ZW0uaWQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXHJcbiAgICAgICAgICAgICAgICBpY29uOiBpdGVtLmljb24sXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4geyBhd2FpdCBpdGVtLmNhbGxiYWNrKCkgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuIl0sCiAgIm1hcHBpbmdzIjogInEwQkFBQSwyQkFFQSxPQUFPLGVBQWUsRUFBUyxhQUFjLENBQUUsTUFBTyxFQUFLLENBQUMsRUFFNUQsR0FBSSxHQUFXLFFBQVEsWUFFakIsR0FBNEIsYUFDNUIsR0FBNkIsYUFDN0IsR0FBOEIsVUFDOUIsR0FBZ0MsWUFDaEMsR0FBNkIsT0FFbkMsV0FBd0MsRUFB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
